(dp1
S'output'
p2
S'<class \'pymysql.err.InternalError\'> (1054, u"Unknown column \'trade.addrbkp\' in \'field list\'")'
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py'
p5
sS'code'
p6
S'__author__ = \'Administrator\'\n\nimport xml.etree.ElementTree as XML_ET\nimport os\nimport sys\nimport time\nimport hashlib\nimport chardet\nimport requests\nimport json\nimport openpyxl\nfrom datetime import datetime\nfrom time import mktime\n#from snownlp import SnowNLP\nimport re\nimport redis\nrds=redis.StrictRedis()\np=re.compile("[\\.\\!\\|\\,\\\\\\$%^*+=\\"\\\']+|[+\xef\xbc\x81\xef\xbc\x8c\xe3\x80\x82\xef\xbc\x9f\xe3\x80\x81~@\xef\xbf\xa5%\xe2\x80\xa6\xe2\x80\xa6&*\xef\xbc\xa0]+".decode("utf8"))\npspace=re.compile("\\s+".decode("utf8"))\npaddress=re.compile("-".decode("utf8"))\npatt_feature=re.compile("[\\w+|\\(+|\\)+|\xe4\xb8\x80+|\xe4\xba\x8c+|\xe4\xb8\x89+|\xe5\x9b\x9b+|\xe4\xba\x94+|\xe5\x85\xad+|\xe4\xb8\x83+|\xe5\x85\xab+|\xe4\xb9\x9d+|\xe5\x8d\x81+|\xe9\x9b\xb6+]+".decode(\'utf8\'))\npatt_keywd=re.compile("[\xe5\x8f\xb7|\xe6\xa5\xbc|\xe5\x85\x83|\xe8\xb7\xaf|\xe6\xa0\x8b|\xe5\x8c\xba|\xe5\xae\xa4|\xe5\x9b\xad|\xe7\xbb\x84|\xe9\x81\x93|\xe6\x9d\x91|\xe5\xb9\xa2|\xe5\x9f\x8e|\xe5\x8f\xb8|\xe5\xba\xa7|\xe5\xbc\x84|\xe5\xba\x97|\xe6\x9c\x9f|\xe5\xa4\xa7|\xe5\xb7\xb7|\xe5\x9c\xba|\xe6\x97\x81|\xe5\xaf\x93|\xe7\x9c\x81|\xe5\xb8\x82|\xe5\x8e\xbf|\xe9\x99\xa2|\xe5\xbf\x83|\xe5\x8e\xa6|\xe9\x97\xa8|\xe5\x8f\xa3|\xe9\x9b\x86|\xe9\x95\x87|\xe8\x8b\x91|\xe5\xb1\x82|\xe8\xa1\x97|\xe6\x99\xaf|\xe5\xb1\x85|\xe8\x88\x8d|\xe6\x88\xbf|\xe9\x83\xa8|\xe7\xa7\x91|\xe9\x83\xbd|\xe5\xad\xa6|\xe5\x8e\x82|\xe4\xb8\x8a|\xe8\xa1\x8c|\xe6\x96\xb9|\xe5\x90\x8e|\xe5\xb1\x9e|\xe9\x9d\xa2|\xe4\xb8\x8b|\xe6\x88\xb7|\xe6\x94\xb6|\xe5\xa4\x84|\xe5\x86\x85|\xe5\x90\x91|\xe9\x98\x9f|\xe9\xa6\x86|\xe6\xa0\xa1|\xe6\x96\x9c|\xe7\xa4\xbe|\xe6\x89\x80|\xe5\x95\x86|\xe7\xab\x99|\xe5\xb1\x80|\xe8\xa1\x8c|\xe5\xba\xad|\xe6\xae\xb5|\xe5\x9b\xa2]+".decode(\'utf8\'))\nzhixia=(u\'\xe5\x8c\x97\xe4\xba\xac\',u\'\xe5\xa4\xa9\xe6\xb4\xa5\',u\'\xe4\xb8\x8a\xe6\xb5\xb7\',u\'\xe9\x87\x8d\xe5\xba\x86\')\nzhixiashi=(u\'\xe5\x8c\x97\xe4\xba\xac\xe5\xb8\x82\',u\'\xe5\xa4\xa9\xe6\xb4\xa5\xe5\xb8\x82\',u\'\xe4\xb8\x8a\xe6\xb5\xb7\xe5\xb8\x82\',u\'\xe9\x87\x8d\xe5\xba\x86\xe5\xb8\x82\')\nzizhi=(u\'\xe5\x86\x85\xe8\x92\x99\xe5\x8f\xa4\',u\'\xe8\xa5\xbf\xe8\x97\x8f\')\nprovinces=(u\'\xe6\xb2\xb3\xe5\x8c\x97\',u\'\xe5\xb1\xb1\xe8\xa5\xbf\',u\'\xe8\xbe\xbd\xe5\xae\x81\',u\'\xe5\x90\x89\xe6\x9e\x97\',u\'\xe9\xbb\x91\xe9\xbe\x99\xe6\xb1\x9f\',u\'\xe6\xb1\x9f\xe8\x8b\x8f\',\n    u\'\xe6\xb5\x99\xe6\xb1\x9f\',u\'\xe5\xae\x89\xe5\xbe\xbd\',u\'\xe7\xa6\x8f\xe5\xbb\xba\',u\'\xe6\xb1\x9f\xe8\xa5\xbf\',u\'\xe5\xb1\xb1\xe4\xb8\x9c\',u\'\xe6\xb2\xb3\xe5\x8d\x97\',u\'\xe6\xb9\x96\xe5\x8c\x97\',u\'\xe6\xb9\x96\xe5\x8d\x97\',u\'\xe5\xb9\xbf\xe4\xb8\x9c\',\n    u\'\xe6\xb5\xb7\xe5\x8d\x97\',u\'\xe5\x9b\x9b\xe5\xb7\x9d\',u\'\xe8\xb4\xb5\xe5\xb7\x9e\',u\'\xe4\xba\x91\xe5\x8d\x97\',u\'\xe9\x99\x95\xe8\xa5\xbf\',u\'\xe7\x94\x98\xe8\x82\x83\',u\'\xe9\x9d\x92\xe6\xb5\xb7\')\nprovincesf=(u\'\xe5\x8c\x97\xe4\xba\xac\',u\'\xe4\xb8\x8a\xe6\xb5\xb7\',u\'\xe5\xa4\xa9\xe6\xb4\xa5\',u\'\xe9\x87\x8d\xe5\xba\x86\',u\'\xe9\xa6\x99\xe6\xb8\xaf\',u\'\xe6\xbe\xb3\xe9\x97\xa8\',u\'\xe6\xb2\xb3\xe5\x8c\x97\xe7\x9c\x81\',u\'\xe5\xb1\xb1\xe8\xa5\xbf\xe7\x9c\x81\',u\'\xe8\xbe\xbd\xe5\xae\x81\xe7\x9c\x81\',u\'\xe5\x90\x89\xe6\x9e\x97\xe7\x9c\x81\',u\'\xe9\xbb\x91\xe9\xbe\x99\xe6\xb1\x9f\xe7\x9c\x81\',u\'\xe6\xb1\x9f\xe8\x8b\x8f\xe7\x9c\x81\',\n    u\'\xe6\xb5\x99\xe6\xb1\x9f\xe7\x9c\x81\',u\'\xe5\xae\x89\xe5\xbe\xbd\xe7\x9c\x81\',u\'\xe7\xa6\x8f\xe5\xbb\xba\xe7\x9c\x81\',u\'\xe6\xb1\x9f\xe8\xa5\xbf\xe7\x9c\x81\',u\'\xe5\xb1\xb1\xe4\xb8\x9c\xe7\x9c\x81\',u\'\xe6\xb2\xb3\xe5\x8d\x97\xe7\x9c\x81\',u\'\xe6\xb9\x96\xe5\x8c\x97\xe7\x9c\x81\',u\'\xe6\xb9\x96\xe5\x8d\x97\xe7\x9c\x81\',u\'\xe5\xb9\xbf\xe4\xb8\x9c\xe7\x9c\x81\',u\'\xe5\xb9\xbf\xe8\xa5\xbf\xe5\xa3\xae\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',\n    u\'\xe6\xb5\xb7\xe5\x8d\x97\xe7\x9c\x81\',u\'\xe5\x9b\x9b\xe5\xb7\x9d\xe7\x9c\x81\',u\'\xe8\xb4\xb5\xe5\xb7\x9e\xe7\x9c\x81\',u\'\xe4\xba\x91\xe5\x8d\x97\xe7\x9c\x81\',u\'\xe8\xa5\xbf\xe8\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',u\'\xe9\x99\x95\xe8\xa5\xbf\xe7\x9c\x81\',u\'\xe7\x94\x98\xe8\x82\x83\xe7\x9c\x81\',u\'\xe9\x9d\x92\xe6\xb5\xb7\xe7\x9c\x81\',u\'\xe5\xae\x81\xe5\xa4\x8f\xe5\x9b\x9e\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',u"\xe6\x96\xb0\xe7\x96\x86\xe7\xbb\xb4\xe5\x90\xbe\xe5\xb0\x94\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba",u\'\xe5\x86\x85\xe8\x92\x99\xe5\x8f\xa4\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\')\nfuzzywords=(u\'\xe7\x9c\x81\',u\'\xe5\xb8\x82\',u\'\xe5\x8e\xbf\',u\'\xe9\x95\x87\',u\'\xe5\xb7\xa5\xe4\xb8\x9a\xe5\x8c\xba\',u\'\xe4\xb8\x9a\xe5\x9b\xad\xe5\x8c\xba\',u\'\xe5\xb7\xa5\xe8\xb4\xb8\xe5\x9b\xad\',u\'\xe5\x85\xac\xe5\x9b\xad\',u\'\xe7\xae\xa1\xe7\x90\x86\xe5\x8c\xba\',u\'\xe5\xbc\x80\xe5\x8f\x91\xe5\x8c\xba\',u\'\xe6\x96\xb0\xe5\x8c\xba\',u\'\xe5\xa4\xa7\xe9\x81\x93\',u\'\xe5\x9b\xbd\xe9\x81\x93\',u\'\xe5\xb9\xbf\xe5\x9c\xba\',u\'\xe8\xa1\x97\xe9\x81\x93\',\n            u\'\xe9\x81\x93\',u\'\xe8\xb7\xaf\',u\'\xe6\xa1\xa5\',u\'\xe8\xb7\xaf\xe5\x8f\xa3\',u\'\xe8\xa1\x97\xe4\xb8\x8a\',u\'\xe8\xa1\x97\',u\'\xe8\xa1\x97\xe4\xb8\x8a\',u\'\xe9\x81\x93\xe4\xb8\x8a\',u\'\xe9\x81\x93\xe5\x8f\xa3\',u\'\xe9\x97\xa8\xe5\x8f\xa3\',u\'\xe5\xb8\x82\xe5\x9c\xba\',u\'\xe9\x99\x84\xe8\xbf\x91\',u\'\xe8\xbd\xa6\xe7\xab\x99\',u\'\xe5\xbf\xab\xe9\x80\x92\',\n            u\'\xe5\x9c\x86\xe9\x80\x9a\',u\'\xe9\xa1\xba\xe4\xb8\xb0\',u\'\xe4\xb8\xad\xe9\x80\x9a\',u\'\xe7\x94\xb3\xe9\x80\x9a\',u\'\xe9\x9f\xb5\xe8\xbe\xbe\',u\'\xe6\xb1\x87\xe9\x80\x9a\',u\'\xe9\x82\xae\xe5\xb1\x80\',u\'\xe9\x82\xae\xe6\x94\xbf\xe5\xb1\x80\',u\'\xe7\xbd\x91\xe7\x82\xb9\',u\'\xe9\x80\x9f\xe9\x80\x92\',u\'\xe9\x95\x87\xe9\x82\xae\xe5\xb1\x80\',u\'\xe7\x89\xa9\xe6\xb5\x81\',\n            u\'\xe6\xa1\xa5\xe5\xa4\xb4\',u\'\xe4\xba\xa4\xe5\x8f\x89\xe5\x8f\xa3\',u\'\xe4\xb8\x89\xe5\xb2\x94\xe5\x8f\xa3\',u\'\xe4\xba\xa4\xe5\x8f\xa3\',u\'\xe4\xb9\xa1\', u\'\xe6\x97\x97\',u\'\xe7\x90\x83\xe5\x9c\xba\',u\'\xe5\xbf\xab\xe9\x80\x92\xe5\x85\xac\xe5\x8f\xb8\',u\'\xe5\xbf\xab\xe9\x80\x92\xe7\x82\xb9\',u\'\xe5\xbf\xab\xe9\x80\x92\xe5\xa4\x84\',u\'\xe6\x94\xb6\xe7\x82\xb9\')\nfuzzywords1=(u\'\xe8\x87\xaa\xe5\x8f\x96\',u\'\xe8\x87\xaa\xe6\x8f\x90\',u\'\xe5\x8f\x96\xe4\xbb\xb6\', u\'\xe7\xab\x99\', u\'\xe8\x90\xa5\xe4\xb8\x9a\xe7\x82\xb9\', u\'\xe7\x94\xb5\xe8\xaf\x9d\', u\'\xe7\x9f\xad\xe4\xbf\xa1\', u\'\xe7\x94\xb5\xe8\x81\x94\', u\'\xe6\x89\x93\xe7\x94\xb5\xe8\xaf\x9d\', u\'\xe7\x82\xb9\', u\'\xe4\xb8\xad\xe8\xbd\xac\xe7\xab\x99\', )\nfixaddress={u"\xe5\x85\xb6\xe5\xae\x83\xe5\x8c\xba":u"",u"\xe5\xb8\x82\xe8\xbe\x96\xe5\x8c\xba":u"",u"\xe5\x9c\xb0\xe5\x9d\x80":u"",u"\xe5\xa2\x89\xe6\xa1\xa5\xe5\x8c\xba":u"\xe5\x9f\x87\xe6\xa1\xa5\xe5\x8c\xba",u"\xe7\x92\xa7\xe5\xb1\xb1\xe5\x8c\xba":u"\xe7\x92\xa7\xe5\xb1\xb1\xe5\x8e\xbf",u"\xe9\xab\x98\xe9\x99\xb5\xe5\x8c\xba":u"\xe9\xab\x98\xe9\x99\xb5\xe5\x8e\xbf",u"\xe5\xaf\x8c\xe9\x98\xb3\xe5\x8c\xba":u"\xe5\xaf\x8c\xe9\x98\xb3\xe5\xb8\x82",\n            u"\xe8\x97\x81\xe5\x9f\x8e\xe5\x8c\xba":u"\xe8\x97\x81\xe5\x9f\x8e\xe5\xb8\x82",u"\xe6\xba\xa7\xe6\xb0\xb4\xe5\x8c\xba":u"\xe6\xba\xa7\xe6\xb0\xb4\xe5\x8e\xbf",u"\xe5\x8d\x97\xe6\xba\xaa\xe5\x8c\xba":u"\xe5\x8d\x97\xe6\xba\xaa\xe5\x8e\xbf",u"\xe9\xb9\xbf\xe6\xb3\x89\xe5\x8c\xba":u"\xe9\xb9\xbf\xe6\xb3\x89\xe5\xb8\x82",u"\xe5\xa4\xa7\xe8\xb6\xb3\xe5\x8c\xba":u"\xe5\xa4\xa7\xe8\xb6\xb3\xe5\x8e\xbf",\n            u"\xe6\xaf\x95\xe8\x8a\x82\xe5\xb8\x82":u"\xe4\xb8\x83\xe6\x98\x9f\xe5\x85\xb3\xe5\x8c\xba",u"\xe9\x93\x9c\xe4\xbb\x81\xe5\xb8\x82":u"\xe9\x93\x9c\xe4\xbb\x81\xe5\x9c\xb0\xe5\x8c\xba",u"\xe6\xb5\x91\xe5\x8d\x97\xe6\x96\xb0\xe5\x8c\xba":u"\xe6\xb5\x91\xe5\x8d\x97\xe5\x8c\xba",u"\xe4\xb8\x9c\xe9\x99\xb5\xe5\x8c\xba":u"\xe6\xb5\x91\xe5\x8d\x97\xe5\x8c\xba",u"\xe8\xb5\xa3\xe6\xa6\x86\xe5\x8c\xba":u"\xe8\xb5\xa3\xe6\xa6\x86\xe5\x8e\xbf",\n            u"\xe9\x93\x9c\xe6\xa2\x81\xe5\x8c\xba":u"\xe9\x93\x9c\xe6\xa2\x81\xe5\x8e\xbf",u"\xe9\xbe\x99\xe9\xa9\xac\xe6\xbd\xad":u"\xe9\xbe\x99\xe9\xa9\xac\xe6\xbd\xad\xe5\x8c\xba",u"\xe4\xb8\x8a\xe8\x99\x9e\xe5\x8c\xba":u"\xe4\xb8\x8a\xe8\x99\x9e\xe5\xb8\x82",u"\xe5\xb9\xbf\xe5\xb7\x9e\xe7\x9c\x81":u"\xe5\xb9\xbf\xe4\xb8\x9c\xe7\x9c\x81",u"\xe5\xb9\xbf\xe8\xa5\xbf\xe7\x9c\x81":u"",u"\xe4\xb8\xb4\xe6\xb2\xb3\xe5\xb8\x82":u"\xe4\xb8\xb4\xe6\xb2\xb3\xe5\x8c\xba",\n            u"\xe5\xa8\x84\xe5\xba\x95\xe5\x9c\xb0\xe5\x8c\xba":u"\xe5\xa8\x84\xe5\xba\x95\xe5\xb8\x82",u"\xe6\xb5\xb7\xe4\xb8\x9c\xe5\xb8\x82":u"\xe6\xb5\xb7\xe4\xb8\x9c\xe5\x9c\xb0\xe5\x8c\xba",u"\xe8\x8f\x8f\xe6\xb3\xbd\xe5\x9c\xb0\xe5\x8c\xba":u"\xe8\x8f\x8f\xe6\xb3\xbd\xe5\xb8\x82",u"\xe5\xb7\xb4\xe5\xbd\xa6\xe6\xb7\x96\xe5\xb0\x94\xe7\x9b\x9f":u"\xe5\xb7\xb4\xe5\xbd\xa6\xe6\xb7\x96\xe5\xb0\x94\xe5\xb8\x82",u"+":u"\xef\xbc\x8b",\n            u"\xe6\x9c\x9b\xe5\x9f\x8e\xe5\x8c\xba":u"\xe6\x9c\x9b\xe5\x9f\x8e\xe5\x8e\xbf",u"\xe5\xa2\x9e\xe5\x9f\x8e\xe5\x8c\xba":u"\xe5\xa2\x9e\xe5\x9f\x8e\xe5\xb8\x82",u"\xe6\xba\xa7\xe6\xb0\xb4\xe5\x8c\xba":u"\xe6\xba\xa7\xe6\xb0\xb4\xe5\x8e\xbf",u"\xe6\xb1\x9f\xe9\x83\xbd\xe5\x8c\xba":u"\xe6\xb1\x9f\xe9\x83\xbd\xe5\xb8\x82",u"\xe6\xb8\x85\xe6\x96\xb0\xe5\x8c\xba":u"\xe6\xb8\x85\xe6\x96\xb0\xe5\x8e\xbf",\n            u"\xe6\x96\x87\xe5\xb1\xb1\xe5\xb8\x82":u"\xe6\x96\x87\xe5\xb1\xb1\xe5\x8e\xbf",u"\xe4\xbb\x8e\xe5\x8c\x96\xe5\x8c\xba":u"\xe4\xbb\x8e\xe5\x8c\x96\xe5\xb8\x82",u"\xe6\xbd\xae\xe5\xae\x89\xe5\x8c\xba":u"\xe6\xbd\xae\xe5\xae\x89\xe5\x8e\xbf",u"\xe7\x94\xb5\xe7\x99\xbd\xe5\x8c\xba":u"\xe7\x94\xb5\xe7\x99\xbd\xe5\x8e\xbf",u"\xe8\x97\x81\xe5\x9f\x8e\xe5\x8c\xba":u"\xe8\x97\x81\xe5\x9f\x8e\xe5\xb8\x82",u"\xe9\x99\xb5\xe5\x9f\x8e\xe5\x8c\xba":u"\xe9\x99\xb5\xe5\x8e\xbf",\n            u"\xe5\x8d\x97\xe5\xba\xb7\xe5\x8c\xba":u"\xe5\x8d\x97\xe5\xba\xb7\xe5\xb8\x82",u"\xe7\xb6\xa6\xe6\xb1\x9f\xe5\x8c\xba":u"\xe7\xb6\xa6\xe6\xb1\x9f\xe5\x8e\xbf",u"\xe5\xa2\x9e\xe5\x9f\x8e\xe5\x8c\xba":u"\xe5\xa2\x9e\xe5\x9f\x8e\xe5\xb8\x82",u"\xe5\x90\xb4\xe6\xb1\x9f\xe5\x8c\xba":u"\xe5\x90\xb4\xe6\xb1\x9f\xe5\xb8\x82",u"\xe9\x93\x9c\xe5\xb1\xb1\xe5\x8c\xba":u"\xe9\x93\x9c\xe5\xb1\xb1\xe5\x8e\xbf",u"\xe6\x96\x87\xe7\x99\xbb\xe5\x8c\xba":u"\xe6\x96\x87\xe7\x99\xbb\xe5\xb8\x82",\n            u"\xe6\x9d\xa8\xe5\x87\x8c\xe5\x8c\xba":u"\xe6\x9d\xa8\xe9\x99\xb5\xe5\x8c\xba",u"\xe9\x95\xbf\xe5\xae\x89\xe5\x8e\xbf":u"\xe9\x95\xbf\xe5\xae\x89\xe5\x8c\xba",u"\xe9\xa2\x96\xe5\xb7\x9e\xe5\x8c\xba":u"\xe9\xa2\x8d\xe5\xb7\x9e\xe5\x8c\xba"}\n\ndef findprovincebycity(straddr):\n    strcity=straddr+u"\xe5\xb8\x82"\n    if rds.hexists(\'dictcity\',straddr):\n        return getprovince(rds.hget(\'dictcity\',straddr).decode(\'utf8\'))\n    elif rds.hexists(\'dictcity\',strcity):\n        return getprovince(rds.hget(\'dictcity\',strcity).decode(\'utf8\'))\n    else:\n        return u""\n\ndef getprovince(straddr):\n    if straddr in provinces:\n        result=straddr+u"\xe7\x9c\x81"\n    elif straddr in provincesf:\n        result=straddr\n    elif straddr in zhixia:\n        result=straddr\n    elif straddr in zhixiashi:\n        result=straddr[:2]\n    elif straddr in zizhi:\n        result=straddr+u"\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba"\n    elif straddr.startswith(u"\xe5\xb9\xbf\xe8\xa5\xbf"):\n        result=u"\xe5\xb9\xbf\xe8\xa5\xbf\xe5\xa3\xae\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba"\n    elif straddr.startswith(u"\xe5\xae\x81\xe5\xa4\x8f"):\n        result=u"\xe5\xae\x81\xe5\xa4\x8f\xe5\x9b\x9e\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba"\n    elif straddr.startswith(u"\xe6\x96\xb0\xe7\x96\x86"):\n        result=u"\xe6\x96\xb0\xe7\x96\x86\xe7\xbb\xb4\xe5\x90\xbe\xe5\xb0\x94\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba"\n    else:\n        result=u""\n    return result\n\ndef getcity(straddr):\n    addr=straddr+u"\xe5\xb8\x82"\n    if straddr == u"\xe6\xaf\x95\xe8\x8a\x82\xe5\xb8\x82" or straddr == u"\xe6\xaf\x95\xe8\x8a\x82":\n        return u"\xe6\xaf\x95\xe8\x8a\x82\xe5\x9c\xb0\xe5\x8c\xba"\n    elif straddr == u"\xe9\x93\x9c\xe4\xbb\x81\xe5\xb8\x82" or straddr == u"\xe9\x93\x9c\xe4\xbb\x81":\n        return u"\xe9\x93\x9c\xe4\xbb\x81\xe5\x9c\xb0\xe5\x8c\xba"\n    elif straddr == u"\xe5\xb8\x82\xe8\xbe\x96\xe5\x8c\xba" or straddr ==u"\xe5\x8e\xbf" or straddr.endswith(u"\xe7\x9b\xb4\xe8\xbe\x96\xe5\x8e\xbf\xe7\xba\xa7\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\xe5\x88\x92"):\n        return u""\n    elif rds.sismember(\'citys\',straddr):\n        return straddr\n    elif rds.sismember(\'citys\',addr):\n        return straddr +u"\xe5\xb8\x82"\n    else:\n        return u""\n\n#\xe6\x9f\xa5\xe5\x8c\xba\xe4\xbf\xa1\xe6\x81\xaf\ndef getarea(straddrfilter):\n    straddr=filterotherarea(straddrfilter)\n    if rds.sismember(\'areas\',straddr):\n        return straddr\n    elif rds.sismember(\'areas\',straddr + u"\xe5\xb8\x82"):\n        return straddr + u"\xe5\xb8\x82"\n    elif rds.sismember(\'areas\',straddr + u"\xe5\x8c\xba"):\n        return straddr + u"\xe5\x8c\xba"\n    elif rds.sismember(\'areas\',straddr + u"\xe5\x8e\xbf"):\n        return straddr + u"\xe5\x8e\xbf"\n    else:\n        return u""\n\n#\xe7\x94\xa8\xe7\x9c\x81,\xe5\x8c\xba \xe6\x9f\xa5\xe5\xb8\x82\ndef getcitybyProvArea(prov,straddr):\n    #comkey=prov+getarea(straddr)\n    comkey=prov+straddr\n    if rds.hexists(\'PCA\',comkey):\n        return rds.hget(\'PCA\',comkey).decode(\'utf8\')\n    else:\n        return u""\n\ndef getcityclass(city,area):\n    if rds.hexists(\'areaclass\',area):\n        return rds.hget(\'areaclass\',area).decode(\'utf8\')\n    elif rds.hexists(\'cityclass\',city):\n        return rds.hget(\'cityclass\',city).decode(\'utf8\')\n    else:\n        return u""\n\ndef findstreetincity(city,straddr):\n    if rds.exists(city):\n        streets=rds.smembers(city)\n        for s in streets:\n            su=s.decode(\'utf8\')\n            if su in straddr:\n                return su\n    return ""\n\n#\xe4\xbb\x8e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xbc\x80\xe5\xa7\x8b \xe5\x8e\xbb\xe9\x87\x8d1\xe6\xac\xa1\ndef filterdupaddress(straddr):\n    dup=0\n    for dup in range(len(straddr)/2,0,-1):\n        if dup > 3:\n            if straddr[:dup] in straddr[dup:]:\n                break\n        else:\n            if straddr[:dup] in straddr[dup:dup+len(straddr[:dup])]:\n                break\n    if dup > 1:\n        dupsplit=straddr.rsplit(straddr[:dup],1)\n        return dupsplit[0]+dupsplit[1]\n    else:\n        return straddr\n\ndef getkeywd(straddr):\n    result=[]\n    keypos=[]\n    keywd=patt_keywd.findall(straddr)\n    for i in range(0,len(straddr)):\n        if straddr[i:i+1] in keywd:\n            keypos.append(i)\n    j=0\n    for k in keypos:\n        result.append(straddr[j:k+1])\n        j=k+1\n    if j<len(straddr):\n        result.append(straddr[j:])\n    return result\n\n#\xe6\xa0\xb9\xe6\x8d\xae\xe5\x88\x86\xe8\xaf\x8d\xe5\x8e\xbb\xe9\x87\x8d\ndef dynareduce(address):\n    if len(address)>0:\n        #addwords=SnowNLP(address).words\n        addwords=getkeywd(address)\n        for pos in range(0,len(addwords)-1):\n            for pos1 in range(pos+1,len(addwords)-1):\n                if len(addwords[pos]) >1 and addwords[pos] == addwords[pos1] and not addwords[pos].isdigit():\n                    addwords[pos1]=u""\n                    break\n        result=u""\n        for words in addwords:\n            result+=words\n        return filterdupaddress(result)\n    else:\n        return address\n\n#\xe6\xa0\xb9\xe6\x8d\xae\xe7\x9c\x81\xe5\xb8\x82\xe5\x8c\xba\xe8\xaf\xa6\xe7\xbb\x86\xe5\x9c\xb0\xe5\x9d\x80 \xe9\x87\x8d\xe6\x9e\x84\xe8\xaf\xa6\xe7\xbb\x86\xe5\x9c\xb0\xe5\x9d\x80.\ndef setdetail(prov,city,area,detail):\n    baredetail=detail.replace(area,u"").replace(city,u"").replace(prov,u"")\n    if prov in zhixia:\n        return city+area+baredetail\n    elif city==area:\n        return prov+city+baredetail\n    else:\n        return prov+city+area+baredetail\n\n#\xe7\xba\xa0\xe6\xad\xa3\xe5\x8c\xba\xe5\x9f\x9f\xe4\xbf\xa1\xe6\x81\xaf\ndef filterotherarea(straddr):\n    for fixword in fixaddress.keys():\n        if fixword in straddr:\n            return straddr.replace(fixword,fixaddress[fixword])\n    return straddr\n\n#\xe6\x98\xaf\xe5\x90\xa6\xe6\xa8\xa1\xe7\xb3\x8a\xe5\xad\x97\xe7\xbb\x93\xe5\xb0\xbe\ndef isfuzzyend(straddr):\n    for i in fuzzywords:\n        if straddr.endswith(i):\n            return True\n    return False\n\ndef isfuzzyend1(straddr):\n    for i in fuzzywords1:\n        if straddr.endswith(i):\n            return True\n    return False\n\ndef procaddress(**content):\n    addr=""\n    city=""\n    area=""\n    fulladdr=u""\n    Detailaddress=pspace.sub("",content["address"])\n    if not content.has_key("status"):\n        content["status"]=u""\n    if not content.has_key("area"):\n        content["area"]=u""\n    if not content.has_key("city"):\n        content["city"]=u""\n    if not content.has_key("province"):\n        content["province"]=u""\n    if content["province"]==u"-":\n        content["province"]=u""\n        content["city"]=u""\n        content["area"]=u""\n        Detailaddress=paddress.sub("",content["address"])\n    else:\n        if Detailaddress.startswith(content["province"]):\n            Detailaddress=Detailaddress.replace(content["province"],"",1)\n        if Detailaddress.startswith(content["city"]):\n            Detailaddress=Detailaddress.replace(content["city"],"",1)\n        if Detailaddress.startswith(content["area"]):\n            Detailaddress=Detailaddress.replace(content["area"],"",1)\n    content["address"]=Detailaddress\n    if content["province"]!=\'\':\n        addr=getprovince(content["province"])\n        if addr!="":\n            content["province"]=addr\n        else:\n            content["province"]=u""\n    if content["city"]!=\'\':\n        city=getcity(content["city"])\n        if city!="":\n            content["city"]=city\n    if content["area"]!=\'\': #\xe6\x9c\x89\xe8\xaf\xa6\xe7\xbb\x86\xe5\x9c\xb0\xe5\x9d\x80\xe5\xad\x97\xe6\xae\xb5\n        area=getarea(content["area"])\n        if area!="":\n            content["area"]=area\n    if addr!="" and city!="" and area!="":\n        content["province"]=addr\n        content["city"]=city\n        content["area"]=area\n        if content["address"].startswith(addr) and city in content["address"] and area in content["address"]:\n            fulladdr=content["address"]\n        elif area in content["address"] and city in content["address"]:\n            fulladdr=addr+content["address"]\n        elif area in content["address"]:\n            fulladdr=addr+area+content["address"]\n        else:\n            if addr in zhixia:\n                fulladdr=city+area+content["address"]\n            else:\n                fulladdr=addr+city+area+content["address"]\n        content["address"]=dynareduce(filterotherarea(fulladdr))\n        area=getarea(area)\n        if city == u"":\n            if addr in zhixia:\n                city=addr+u"\xe5\xb8\x82"\n            else:\n                city = area\n            content["city"]=city\n        else:\n            content["city"]=city\n    else:#\xe6\xb2\xa1\xe6\x9c\x89\xe7\x9c\x81\xe5\xb8\x82\xe5\x8c\xba\xe5\xad\x97\xe6\xae\xb5\xef\xbc\x8c\xe9\x9c\x80\xe6\x8b\x86\xe5\x88\x86\xe8\xaf\xa6\xe7\xbb\x86\xe5\x9c\xb0\xe5\x9d\x80\n        if addr!="":\n            fulladdr+=addr\n        if city!="":\n            fulladdr+=city\n        if area!="":\n            fulladdr+=area\n        fulladdr+=content["address"]\n        content["address"]=filterotherarea(fulladdr)\n        posp=0\n        posc=0\n        posa=0\n        addrs=getkeywd(fulladdr)\n        if addr=="":\n            addr=getprovince(content["province"])\n        if addr=="":\n            addr=findprovincebycity(content["city"])\n        if addr=="":\n            for posp in range(0,len(addrs)-1):\n                addr=getprovince(addrs[posp])\n                if addr!="":\n                    break\n        if addr=="":\n            for posp in range(0,len(addrs)-1):\n                addr=findprovincebycity(addrs[posp])\n                if addr!="":\n                    break\n        if addr=="":\n            addr=u""\n            content["status"]="0" #\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe7\x9c\x81\xe4\xbf\xa1\xe6\x81\xaf\n        else :\n            if addr in zhixia:\n                content["address"]=u""\n            else:\n                content["address"]=addr\n            if city=="" and content["city"]!=u"":\n                city=getcity(content["city"])\n            if city=="" and content["area"]!=u"":\n                city=getcity(content["area"])\n            if city=="" and content["city"]!=u"":\n                city=getcitybyProvArea(addr,content["city"])\n                if city!="":\n                    area=getarea(content["city"])\n            if city=="" and content["area"]!=u"":\n                city=getcitybyProvArea(addr,content["area"])\n                if city!="":\n                    area=getarea(content["area"])\n            if city=="":\n                for posc in range(posp,len(addrs)-1):\n                    city=getcity(addrs[posc])\n                    if city!="":\n                        break\n                    city=getcitybyProvArea(addr,addrs[posc])\n                    if city!="":\n                        area=getarea(addrs[posc])\n                        break\n            if city=="" or findprovincebycity(city)!=addr:\n                city=u""\n                content["status"]="6" #\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe5\xb8\x82\xe4\xbf\xa1\xe6\x81\xaf\n            else:\n                content["address"]+=city\n            if area =="" and content["area"]!=u"":\n                area=getarea(content["area"])\n            if area=="":\n                for posa in range(posc,len(addrs)-1):\n                    area=getarea(addrs[posa])\n                    if area!="":\n                        break\n            if area==u"" or getcitybyProvArea(addr,area)!= city:\n                area=u""\n                posa=1\n                content["status"]+="8"#\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe5\x8c\xba\xe4\xbf\xa1\xe6\x81\xaf\n            else:\n                content["address"]+=area\n                if city==u"":\n                    city=area\n            for detail in addrs[posa:]:\n                content["address"]+=detail\n        content["province"]=addr\n        content["city"]=city\n        content["area"]=area\n        content["address"]=dynareduce(filterotherarea(content["address"]))\n    content["address"]=setdetail(content["province"],content["city"],content["area"],content["address"])\n    if isfuzzyend(content["address"]):\n        content["status"]="2"\n        content["wrong_reason"]=u"\xe4\xb8\x8d\xe9\x80\x9a\xe8\xbf\x87"\n    elif isfuzzyend1(content["address"]):\n        content["status"] += "4" #\xe5\xbe\x85\xe6\x9f\xa5\xe7\x9c\x8b\n    street=findstreetincity(content["city"],content["address"])\n    if street!="":\n        content["other_remark"]=street\n        content["address"]=content["address"].replace(street,u"")\n    content[\'city_class\']=getcityclass(content["city"],content["area"])\n    return content\n\ndef cmp(x,y):\n    x1=x.lower()\n    y1=y.lower()\n    if x1>y1:\n        return 1\n    if x1<y1:\n        return -1\n    return 0\n\ndef GetTimeStamp():\n    t=time.localtime()\n    lst=[]\n    for i in xrange(len(t)):\n        if i>=5:\n            break\n        v=str(t[i]).zfill(2)\n        lst.append(v)\n    reStr="".join(lst)\n    return reStr\n\ndef log_file(msg):\n    dir=os.getcwd()\n    fileName="err.txt"\n    finalPath=os.path.join(dir,fileName)\n    with open(finalPath,"ab") as f:\n        f.write("[%s] %s\\r\\n"%(GetTimeStamp(),msg))\n    return finalPath\n\ndef MD5Sign(md5Str):\n    m=hashlib.md5()\n    m.update(md5Str)\n    return m.hexdigest().upper()\n\ndef TrialAPI(**arg):\n    def _TrialAPI(func):\n        def __TrialAPI(data):\n            SysData={"apiKey":"57Hyjts8HHty",}\n            ExData={"apiSecret":"iO7hbmH8-rbt6Hg_Yg6",}\n            param=func(data)\n            param.update(SysData)\n            param.update(data)\n            url="http://122.193.31.8:8080/TrialCenter/order/Pampers/ST/"+arg["method"]\n            param["timestamp"]=str(int(time.time()))\n            paraList=[]\n            for k,v in param.items():\n                if isinstance(v,str):\n                    paraList.append(k+"="+str(v))\n            paraList.sort(cmp)\n            md5Str="&".join(paraList)\n            md5Str=md5Str+ExData["apiSecret"]\n            param["sig"]=MD5Sign(md5Str)\n            log_file("%s %s"%(md5Str,param["sig"]))\n            jsparam=json.dumps(param)\n            req=requests.post(url,jsparam,verify=False)\n            return json.loads(req.content)\n        return __TrialAPI\n    return _TrialAPI\n\n@TrialAPI(method="updateOrderTrackingInfo")\ndef updateOTI(data):\n    return {}\n\n@TrialAPI(method="updateTrialOrderStatus")\ndef updateTOS(data):\n    return {}\n\n@request.restful()\ndef test_TOS():\n    response.view =\'generic.\'+request.extension  #return json\n    def GET(*args,**vars):\n        barcode_dict={\'62015092412001\':\'6903148240014\',\'62015092480001\':\'6903148238905\',\n                     \'2015092412002\':\'6903148240021\',\'2015092480002\':\'6903148238912\',\n                     \'33320151016001\':\'6903148238912\',\'33320151016002\':\'6903148238905\'}\n        keys=vars.keys()\n        result={}\n        if (\'out_tid\' in keys) and (\'status\' in keys) and (\'appKey\' in keys):\n            if vars[\'appKey\']==\'updateandtos\':\n                a_row=db(db.trade.out_tid.like(vars[\'out_tid\'])).select()\n                if a_row:\n                    if a_row[0][\'oti_return\']==1:\n                        result[\'is_success\']=\'t\'\n                    else:\n                        a_row.first().update_record(status=vars[\'status\'])\n                        data={"order_id":vars[\'out_tid\'],\'status\':vars[\'status\']}\n                        if vars[\'status\']==\'2\':\n                            data[\'message\']=vars[\'msg\']\n                            a_row.first().update_record(wrong_reason=vars[\'msg\'])\n                        else:\n                            trade_content=a_row.as_list()[0]\n                            if \'province\' in trade_content.keys():\n                                trade_content[\'privince\']=trade_content[\'province\']\n                            for k,v in trade_content.items():\n                                if isinstance(v,str):\n                                    trade_content[k]=v.decode(\'utf8\')\n                                if isinstance(v, datetime):\n                                    trade_content[k] = v.isoformat()\n                            if trade_content[\'barCode\'] in barcode_dict.keys():\n                                trade_content[\'barCode\']=barcode_dict[trade_content[\'barCode\']]\n                            trade_content[\'out_tid\']=\'TC\'+trade_content[\'out_tid\']\n                            if a_row.as_list()[0][\'edb_return\']==None or a_row.as_list()[0][\'edb_return\']!=\'True\':\n                                edbreturn=AddTrade(trade_content)\n                                try:\n                                    a_row.first().update_record(edb_return=edbreturn[\'Success\'][\'items\'][\'item\'][0][\'is_success\'])\n                                except:\n                                    a_row.first().update_record(edb_return=edbreturn)\n                                result[\'edb_return\']=edbreturn\n                        if a_row.as_list()[0][\'tc_return\']==None or a_row.as_list()[0][\'tc_return\']!=\'true\':\n                            ctreturn=updateTOS(data)\n                            a_row.first().update_record(tc_return=ctreturn[\'result\'])\n                            result[\'CT_return\']=ctreturn\n                        result[\'is_success\']=\'t\'\n                else:\n                    result[\'is_success\']=\'o\'\n            else:\n                result[\'is_success\']=\'f\'\n        else:\n            result[\'is_success\']=\'f\'\n        return result\n    return locals()\n    \'\'\'wb=openpyxl.load_workbook(\'/home/20160121_27\xe6\xba\x90\xe6\x95\xb0\xe6\x8d\xae60658\xe6\x9d\xa1.xlsx\')\n    wst= wb.get_sheet_by_name(name = \'true\')\n    wsw= wb.get_sheet_by_name(name = \'wrong\')\n    for i in range(2,wst.max_row+1):\n        outtid=wst.cell(row=i,column=3).value.encode(\'utf8\')\n        data={"order_id":outtid}\n        data["status"]="3"\n        result=updateTOS(data)\n        log_file("%s %s"%(data,result))\n        db(db.trade.out_tid==wst.cell(row=i,column=3).value).select().first().update_record(status=3)\n    for i in range(2,wsw.max_row+1):\n        outtid=wsw.cell(row=i,column=3).value.encode(\'utf8\')\n        data={"order_id":outtid}\n        data["status"]="2"\n        data["message"]=wsw.cell(row=i,column=17).value.encode(\'utf8\')\n        result=updateTOS(data)\n        log_file("%s %s"%(data,result))\n        db(db.trade.out_tid==wsw.cell(row=i,column=3).value).select().first().update_record(status=2)\'\'\'\n\n\n@request.restful()\ndef testredis():\n    response.view =\'generic.\'+request.extension  #return json\n    def GET(*args,**vars):\n        p=rds.hget(\'dictcity\',vars[\'city\'])\n        return p\n    return locals()\n\n@request.restful()\ndef onlyToEDB():\n    response.view =\'generic.\'+request.extension  #return json\n    def GET(*args,**vars):\n        barcode_dict={\'62015092412001\':\'6903148240014\',\'62015092480001\':\'6903148238905\',\n                     \'2015092412002\':\'6903148240021\',\'2015092480002\':\'6903148238912\',\n                     \'33320151016001\':\'6903148238912\',\'33320151016002\':\'6903148238905\'}\n        keys=vars.keys()\n        result={}\n        if (\'out_tid\' in keys) and (\'status\' in keys) and (\'appKey\' in keys):\n            if vars[\'appKey\']==\'updateandtos\':\n                a_row=db(db.trade.out_tid.like(vars[\'out_tid\'])).select()\n                if a_row:\n                    a_row.first().update_record(status=vars[\'status\'])\n                    data={"order_id":vars[\'out_tid\'],\'status\':vars[\'status\']}\n                    if vars[\'status\']==\'2\':\n                        data[\'message\']=vars[\'msg\']\n                    else:\n                        trade_content=a_row.as_list()[0]\n                        if \'province\' in trade_content.keys():\n                            trade_content[\'privince\']=trade_content[\'province\']\n                        for k,v in trade_content.items():\n                            if isinstance(v,str):\n                                trade_content[k]=v.decode(\'utf8\')\n                            if isinstance(v, datetime):\n                                trade_content[k] = v.isoformat()\n                        if trade_content[\'barCode\'] in barcode_dict.keys():\n                            trade_content[\'barCode\']=barcode_dict[trade_content[\'barCode\']]\n\n                        if vars.has_key(\'hard_update\'):\n                            edbreturn=AddTrade(trade_content)\n                            try:\n                                a_row.first().update_record(edb_return=edbreturn[\'Success\'][\'items\'][\'item\'][0][\'is_success\'])\n                            except:\n                                a_row.first().update_record(edb_return=edbreturn)\n                            result[\'edb_return\']=edbreturn\n                        else:\n                            if a_row.as_list()[0][\'edb_return\']==None or a_row.as_list()[0][\'edb_return\']!=\'True\':\n                                edbreturn=AddTrade(trade_content)\n                                try:\n                                    a_row.first().update_record(edb_return=edbreturn[\'Success\'][\'items\'][\'item\'][0][\'is_success\'])\n                                except:\n                                    a_row.first().update_record(edb_return=edbreturn)\n                                result[\'edb_return\']=edbreturn\n                    result[\'is_success\']=\'t\'\n                else:\n                    result[\'is_success\']=\'o\'\n            else:\n                result[\'is_success\']=\'f\'\n        else:\n            result[\'is_success\']=\'f\'\n        return result\n    return locals()\n\n#\xe6\xb5\x8b\xe8\xaf\x95\xe7\x94\xa8\xef\xbc\x8c\xe5\x8f\xaf\xe5\x88\xa0\xe9\x99\xa4\ndef test_OTI():\n    orderinfo={\n\t"order_id": "8444",\n\t"tracking_number": "3100901633843",\n\t"tracking_company": "17"\n    }\n    result=updateOTI(orderinfo)\n    log_file("%s %s"%(orderinfo,result))\n\ndef EdbAPI(**arg):\n    def _EdbAPI(func):\n        def __EdbAPI(data):\n            #url="http://vip79.edb04.net/edb2/rest/openapi/index.aspx"\n            url="http://vip79.edb04.net/rest/index.aspx"\n            SysData={\n                "appkey":"5a7b7896",\n                "dbhost":"edb_a77527",\n                "format":"json",\n                "v":2.0,\n                "slencry":0,\n                "Ip":"117.79.148.228",\n                }\n            ExData={\n                "appscret":"1f5b75edd28d480e968feecbc38f2c73",\n                "token":"7041e7424cb4410f8370f10a2d3a285a",\n                }\n            param=func(data)\n            param.update(SysData)\n            param["method"]=arg["method"]\n            param["timestamp"]=GetTimeStamp()\n            paraList=[]\n            for k,v in param.items():\n                if k=="appkey":\n                    continue\n                if not str(v):\n                    continue\n                paraList.append(k+str(v))\n            for k,v in ExData.items():\n                paraList.append(k+str(v))\n            paraList.sort(cmp)\n            md5Str="".join(paraList)\n            md5Str=SysData["appkey"]+"appkey"+SysData["appkey"]+md5Str\n            param["sign"]=MD5Sign(md5Str)\n            req=requests.post(url,param)\n            if not req.ok:\n                print "requests FAIL"\n                log_file("%s %s"%(arg,data))\n                filePath=log_file(req.content)\n                print "log_file in",filePath\n                return\n            return json.loads(req.content)\n        return __EdbAPI\n    return _EdbAPI\n\n@EdbAPI(method="edbTradeAdd")\ndef AddTrade(data):\n    orderTag=(\'out_tid\',\'shop_id\',\'storage_id\',\'buyer_id\',\'buyer_msg\',\'buyer_email\',\'buyer_alipay\',\'seller_remark\',\'consignee\',\'address\',\'postcode\',\'telephone\',\'mobilPhone\',\'privince\',\'city\',\'area\',\'actual_freight_get\',\'actual_RP\',\'ship_method\',\'express\',\'is_invoiceOpened\',\'invoice_type\',\'invoice_money\',\'invoice_title\',\'invoice_msg\',\'order_type\',\'process_status\',\'pay_status\',\'deliver_status\',\'is_COD\',\'serverCost_COD\',\'order_totalMoney\',\'product_totalMoney\',\'pay_method\',\'pay_commission\',\'pay_score\',\'return_score\',\'favorable_money\',\'alipay_transaction_no\',\'out_payNo\',\'out_express_method\',\'out_order_status\',\'order_date\',\'pay_date\',\'finish_date\',\'plat_type\',\'distributor_no\',\'WuLiu\',\'WuLiu_no\',\'in_memo\',\'other_remark\',\'actual_freight_pay\',\'ship_date_plan\',\'deliver_date_plan\',\'is_scorePay\',\'is_needInvoice\')\n    productTag=(\'barCode\',\'product_title\',\'standard\',\'out_price\',\'favorite_money\',\'orderGoods_Num\',\'gift_Num\',\'cost_Price\',\'tid\',\'product_stockout\',\'is_Book\',\'is_presell\',\'is_Gift\',\'avg_price\',\'product_freight\',\'shop_id\',\'out_tid\',\'out_productId\',\'out_barCode\',\'product_intro\')\n    orderXml=XML_ET.fromstring(\'<info><orderInfo></orderInfo></info>\')\n    productXml=XML_ET.fromstring(\'<product_info><product_item></product_item></product_info>\')\n    orderInfo=orderXml.find("orderInfo")\n    itemInfo=productXml.find("product_item")\n    for k,v in data.items():\n        if k in orderTag:\n            tmp=XML_ET.SubElement(orderInfo,k)\n            tmp.text=v\n        if k in productTag:\n            tmp=XML_ET.SubElement(itemInfo,k)\n            tmp.text=v\n    orderInfo.append(productXml)\n    finalStr=XML_ET.tostring(orderXml,"utf8")\n    result={}\n    result["xmlValues"]=finalStr[37:]\n    return result\n\ndef test_2edb():\n    wb=openpyxl.load_workbook(\'/home/trade20160125h_36\xef\xbc\x88100\xe6\x9d\xa1\xe6\xb5\x8b\xe8\xaf\x9571\xe6\x9d\xa1\xe5\x90\x88\xe6\xa0\xbc\xef\xbc\x89.xlsx\')\n    wst= wb.get_sheet_by_name(name = \'true71\')\n    results=[]\n    for i in range(2,wst.max_row+1):\n        outtid=wst.cell(row=i,column=28).value.encode(\'utf8\')\n        trade_content=db(db.trade.out_tid==wst.cell(row=i,column=28).value).select().first()\n        for k,v in trade_content.items():\n            if isinstance(v,str):\n                trade_content[k]=v.decode(\'utf8\')\n            if isinstance(v, datetime):\n                trade_content[k] = v.isoformat()\n    result=AddTrade(trade_content)\n    return result\n\n#{\'bar_code\':vars[\'product_info\'][0][\'barCode\']} in AllBarcode\n#@auth.requires_login()\n@request.restful()\ndef AddTradeToEdb():\n    response.view =\'generic.\'+request.extension  #return  json\n    def POST(tablename,**vars):\n        msg=[]\n        jsonObj={}\n        keys=vars.keys()\n        for k in keys:\n            k.decode(\'unicode_escape\')\n        if (\'apiKey\' in keys)and(\'product_info\' in keys)and\\\n        (\'timestamp\' in keys)and(\'sig\' in keys) and\\\n        (\'out_tid\' in keys)and (\'shop_id\' in keys)and\\\n        (\'consignee\' in keys)and(\'address\' in keys)and\\\n        (\'postcode\' in keys)and(\'mobilPhone\' in keys)and\\\n        (\'order_date\' in keys)and(\'storage_id\' in keys)and\\\n        (\'barCode\' in vars[\'product_info\'][0].keys())and \\\n        (\'product_title\' in vars[\'product_info\'][0].keys())and \\\n        (\'standard\' in vars[\'product_info\'][0].keys())and\\\n        (\'out__tid\' in vars[\'product_info\'][0].keys()):\n            ts=int(time.time())\n            this_apiKey=\'A6BEA59B\'\n            this_apiSecret=\'1F6F088755B094DDAD3C7AEFEA73A1A1\'\n            essential_field=vars.keys()\n            essential_field.sort()\n            SigStr=""\n            edbdata={}\n            for field in essential_field:\n                if field =="sig" or field =="apiSecret":\n                    continue\n                elif field =="product_info":\n                    SigStr=SigStr+unicode(field)+u"="+u"["\n                    for d in vars["product_info"]:\n                        k=d.keys()\n                        k.sort()\n                        SigStr=SigStr+u"{"\n                        for j in k:\n                            SigStr=SigStr+unicode(j)+u"="+unicode(d[j])+u"&"\n                            edbdata[j]=d[j]\n                        SigStr=SigStr[0:len(SigStr)-1]\n                        SigStr=SigStr+u"}"\n                    SigStr=SigStr+u"]"+u"&"\n                else:\n                    SigStr=SigStr+unicode(field)+u"="+unicode(vars[field])+u"&"\n                    if (field != \'apiKey\') and (field !=\'timestamp\'):\n                        edbdata[field]=vars[field]\n            edbdata[\'address\']=edbdata[\'address\'].replace(\'\\r\',\'\')\n            edbdata[\'address\']=edbdata[\'address\'].replace(\',\',\'-\')\n            if (\'province\' in keys):\n                edbdata[\'province\']=edbdata[\'province\'].replace(\'\\r\',\'\')\n                edbdata[\'province\']=edbdata[\'province\'].replace(\',\',\'-\')\n            if  (\'city\' in keys):\n                edbdata[\'city\']=edbdata[\'city\'].replace(\'\\r\',\'\')\n                edbdata[\'city\']=edbdata[\'city\'].replace(\',\',\'-\')\n            if  (\'area\' in keys):\n                edbdata[\'area\']=edbdata[\'area\'].replace(\'\\r\',\'\')\n                edbdata[\'area\']=edbdata[\'area\'].replace(\',\',\'-\')\n            if (\'consignee\' in keys):\n                edbdata[\'consignee\']=edbdata[\'consignee\'].replace(\'\\r\',\'\')\n                edbdata[\'consignee\']=edbdata[\'consignee\'].replace(\',\',\'-\')\n            if (\'plat_type\' in keys):\n                if edbdata[\'plat_type\']==None :\n                    edbdata[\'plat_type\']=\'TrialCenter\'\n            this_sig=MD5Sign((SigStr[0:len(SigStr)-1]+this_apiSecret).encode(\'utf8\'))\n            #AllBarcode=db().select(db.AllBarcode.bar_code).as_list()\n            if (vars[\'sig\']==this_sig) and (ts-int(vars[\'timestamp\'])<180) and \\\n            ((vars[\'apiKey\']).decode(\'unicode_escape\')==(this_apiKey)):\n                #getorderid=db.trade.update_or_insert(db.trade.out_tid==edbdata[\'out_tid\'],**edbdata)\n                t=db(db.trade.out_tid==edbdata[\'out_tid\']).select()\n                #edbdata=procaddress(**edbdata)\n                if t:\n                    msg.append({\'is_success\':\'true\',\'response_Msg\':\'duplicate trade\'})\n                    t.first().update_record(**edbdata)\n                else:\n                    tcpid=db.trade.insert(**edbdata)\n                    if tcpid:\n                        msg.append({\'is_success\':\'true\',\'response_Msg\':\'import to TaoTongGroup successfully\'})\n                    else:\n                        msg.append({\'is_success\':\'false\',\'response_Msg\':\'unexpected data\'})\n            else:\n                msg.append({\'is_success\':\'false\',\'response_Msg\':\'wrong verification\'})\n        else:\n            msg.append({\'is_success\':\'false\',\'response_Msg\':\'absence of essential field\'})\n        jsonObj[\'item\']=msg\n        return jsonObj\n    return locals()\n\n#@auth.requires_login()\n@request.restful()\ndef GetEdbOrderInfo():\n    WuLiu_dict={}\n    response.view =\'generic.\'+request.extension\n    def GET(*args,**vars):\n        keys=vars.keys()\n        content={}\n        if (\'orderId\' in keys)and(\'status\' in keys) and\\\n(\'logisticCompany\' in keys)and(\'trackingNo\' in keys) and\\\n(\'updateTime\' in keys)and(\'app_key\' in keys):\n            WuLiu_dict={\n\'EMS\':\'1\',\'HTKY\':\'10\',\'ZJS\':\'11\',\'STO\':\'12\',\'ZDY\':\'13\',\'ZDY\':\'14\',\'YUNDA\':\'15\',\n\'FEDEX\':\'16\',\'DBL\':\'17\',\'RFD\':\'18\',\'ZT\':\'19\',\'STO\':\'2\',\'POSTB\':\'20\',\'SF\':\'6\',\n\'STO\':\'21\',\'OTHER\':\'22\',\'OTHER\':\'23\',\'UC\':\'24\',\'FAST\':\'25\',\'STO\':\'26\',\'SF\':\'7\',\n\'TTKDEX\':\'27\',\'SF\':\'28\',\'SF\':\'29\',\'EMS\':\'3\',\'ZTO\':\'30\',\'STO\':\'31\',\'YUNDA\':\'32\',\n\'SF\':\'33\',\'SF\':\'34\',\'YUNDA\':\'35\',\'YTO\':\'36\',\'TTKDEX\':\'37\',\'YTO\':\'4\',\'TTKDEX\':\'5\',\n\'YUNDA\':\'8\',\'ZTO\':\'9\'}\n            order_info={}\n            for k,v in vars.items():\n                if k==\'app_key\':\n                    continue\n                elif k==\'status\':\n                    order_info[\'order_status\']=v\n                elif k==\'orderId\':\n                    order_info[\'orderId\']=v.replace(\'TC\',\'\')\n                else:\n                    order_info[k]=v\n            db.WuLiuInfo.update_or_insert(db.WuLiuInfo.orderId==order_info[\'orderId\'],**order_info)\n            trade_exist=db(db.trade.out_tid.like(order_info[\'orderId\'])).select()\n            if not order_info[\'orderId\'].startswith(\'TT\'):\n                if trade_exist:\n                    WuLiu_info={"order_id": order_info[\'orderId\'],\n\t                "tracking_number":order_info[\'trackingNo\']}\n                    if order_info[\'logisticCompany\'] in WuLiu_dict.keys():\n                        WuLiu_info["tracking_company"]=str(WuLiu_dict[order_info[\'logisticCompany\']])\n                        result=updateOTI(WuLiu_info)\n                        if result[\'result\']==\'true\':\n                            content[\'isSuccess\']=True\n                            content[\'errorCode\']=1\n                            content[\'errorMsg\']=\'\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x90\xe5\x8a\x9f\'\n                        else:\n                            if result[\'error\']==\'1032\':\n                                content[\'isSuccess\']=True\n                                content[\'errorCode\']=1\n                                content[\'errorMsg\']=\'\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x90\xe5\x8a\x9f\'\n                            else:\n                                content[\'isSuccess\']=False\n                                content[\'errorCode\']=2\n                                content[\'errorMsg\']=\'\xe8\xae\xa2\xe5\x8d\x95\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\'\n                    else:\n                        content[\'isSuccess\']=False\n                        content[\'errorCode\']=5\n                        content[\'errorMsg\']=\'\xe7\x89\xa9\xe6\xb5\x81\xe5\x85\xac\xe5\x8f\xb8\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\'\n                    trade_exist.first().update_record(oti_return=content[\'errorCode\'])\n                else:\n                    content[\'isSuccess\']=True\n                    content[\'errorCode\']=1\n                    content[\'errorMsg\']=\'\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x90\xe5\x8a\x9f\'\n            else:\n                content[\'isSuccess\']=True\n                content[\'errorCode\']=1\n                content[\'errorMsg\']=\'\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x90\xe5\x8a\x9f\'\n        else:\n            content[\'isSuccess\']=False\n            content[\'errorCode\']=9\n            content[\'wrong_reason\']=\'\xe8\xae\xa2\xe5\x8d\x95\xe5\x8f\xb7\xe6\xa0\xbc\xe5\xbc\x8f\xe9\x94\x99\xe8\xaf\xaf\'\n        return content\n    return locals()\n\n#@auth.requires_login()\n#@request.restful()\ndef TradeGet():\n    response.view =\'generic.\'+request.extension  #return  json\n    def GET(*args,**vars):\n        patterns=[\n            "/products[db_map]",\n            "/productid/{db_map.id}",\n            "/product_exid/{db_map.field_order}",\n            "/product/{custom_order.user_name.startswith}",\n            "/product/{custom_order.user_name}/:field",\n            "/trades[trade]",\n            "/tradeTid/{trade.tid}",\n            "/tradeOut/{trade.out_tid}"\n        ]\n        #patterns = \'auto\'\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    return locals()\n\n#@request.restful()\ndef TradeUpdate():\n    response.view =\'generic.\'+request.extension  #return  json\n    def PUT(table_name,record_id,**vars):\n        return db(db[table_name].order_id==record_id).update(**vars)\n    return locals()\n\n#@request.restful()\ndef TradeDelete():\n    response.view =\'generic.\'+request.extension  #return  json\n    def DELETE(table_name,record_id):\n        return db(db[table_name].order_id==record_id).delete()\n    return locals()\n\nif __name__=="__main__":\n    test_TOS()\n\nresponse._vars=response._caller(GetEdbOrderInfo)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'pymysql.err'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of InternalError object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of InternalError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of InternalError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of InternalError object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'__init__'
p26
S"<method-wrapper '__init__' of InternalError object>"
p27
sS'__setattr__'
p28
S"<method-wrapper '__setattr__' of InternalError object>"
p29
sS'__reduce_ex__'
p30
S'<built-in method __reduce_ex__ of InternalError object>'
p31
sS'__new__'
p32
S'<built-in method __new__ of type object>'
p33
sS'__format__'
p34
S'<built-in method __format__ of InternalError object>'
p35
sS'__class__'
p36
S"<class 'pymysql.err.InternalError'>"
p37
sS'__doc__'
p38
S"'Exception raised when the database encounters an...anymore, the transaction is\\n    out of sync, etc.'"
p39
sS'__getitem__'
p40
S"<method-wrapper '__getitem__' of InternalError object>"
p41
sS'__setstate__'
p42
S'<built-in method __setstate__ of InternalError object>'
p43
sS'__getattribute__'
p44
S"<method-wrapper '__getattribute__' of InternalError object>"
p45
sS'args'
p46
S'(1054, u"Unknown column \'trade.addrbkp\' in \'field list\'")'
p47
sS'__subclasshook__'
p48
S'<built-in method __subclasshook__ of type object>'
p49
sS'__unicode__'
p50
S'<built-in method __unicode__ of InternalError object>'
p51
sS'__delattr__'
p52
S"<method-wrapper '__delattr__' of InternalError object>"
p53
sS'__repr__'
p54
S"<method-wrapper '__repr__' of InternalError object>"
p55
sS'__hash__'
p56
S"<method-wrapper '__hash__' of InternalError object>"
p57
ssS'evalue'
p58
S'(1054, u"Unknown column \'trade.addrbkp\' in \'field list\'")'
p59
sS'request'
p60
cgluon.html
XML_unpickle
p61
(S's\x9c?\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>183.56.163.88</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>TtApi</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>text/xml; charset=utf-8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">DOCUMENT_ROOT</td><td style="vertical-align:top;">:</td><td><div>/usr/share/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>text/xml; charset=utf-8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/GetEdbOrderInfo.xml</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div>orderId=TC1667482&amp;status=S&amp;logisticCompany=YUNDA&amp;trackingNo=3101039016675&amp;updateTime=2016-05-25%2009:48:13&amp;app_key=78f68d221aeac799553b7fd76aa719d4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>183.56.163.88</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>52475</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_URI</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/GetEdbOrderInfo?orderId=TC1667482&amp;status=S&amp;logisticCompany=YUNDA&amp;trackingNo=3101039016675&amp;updateTime=2016-05-25%2009:48:13&amp;app_key=78f68d221aeac799553b7fd76aa719d4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>nginx/1.4.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">UWSGI_SCHEME</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/www-data/web2py/applications/admin/&#x27;, &#x27;/home/www-data/web2py/applications/pampers1/&#x27;, &#x27;/home/www-data/web2py/applications/search/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div>text/xml; charset=utf-8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">document_root</td><td style="vertical-align:top;">:</td><td><div>/usr/share/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_type</td><td style="vertical-align:top;">:</td><td><div>text/xml; charset=utf-8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td><div>10.172.40.151</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>120.76.79.181</div></td></tr><tr><td><div>int.taotonggroup.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/GetEdbOrderInfo.xml</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div>orderId=TC1667482&amp;status=S&amp;logisticCompany=YUNDA&amp;trackingNo=3101039016675&amp;updateTime=2016-05-25%2009:48:13&amp;app_key=78f68d221aeac799553b7fd76aa719d4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>183.56.163.88</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>52475</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/GetEdbOrderInfo.xml?orderId=TC1667482&amp;status=S&amp;logisticCompany=YUNDA&amp;trackingNo=3101039016675&amp;updateTime=2016-05-25%2009:48:13&amp;app_key=78f68d221aeac799553b7fd76aa719d4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>nginx/1.4.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.node</td><td style="vertical-align:top;">:</td><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.version</td><td style="vertical-align:top;">:</td><td><div>2.0.12</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_node</td><td style="vertical-align:top;">:</td><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_version</td><td style="vertical-align:top;">:</td><td><div>2.0.12</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_original_uri</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/GetEdbOrderInfo.xml?orderId=TC1667482&amp;status=S&amp;logisticCompany=YUNDA&amp;trackingNo=3101039016675&amp;updateTime=2016-05-25%2009:48:13&amp;app_key=78f68d221aeac799553b7fd76aa719d4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;wsgi_errors&#x27;, mode &#x27;w&#x27; at 0x7fcaaeea0c90&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7fcaae377198&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;wsgi_errors&#x27;, mode &#x27;w&#x27; at 0x7fcaaeea0c90&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7fcaae377198&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>xml</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py/applications/pampers1/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>GetEdbOrderInfo</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/www-data/web2py/applications/admin/&#x27;, &#x27;/home/www-data/web2py/applications/pampers1/&#x27;, &#x27;/home/www-data/web2py/applications/search/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td><div>10.172.40.151</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>120.76.79.181</div></td></tr><tr><td><div>int.taotonggroup.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 5, 25, 9, 48, 15, 83957)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>xml</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/GetEdbOrderInfo.xml</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 5, 25, 1, 48, 15, 83992)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7fcaada50350&gt;</div></td></tr></table></div>'
tRp62
sS'frames'
p63
(lp64
(dp65
S'file'
p66
S'/home/www-data/web2py/gluon/restricted.py'
p67
sS'dump'
p68
(dp69
S'environment'
p70
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AddTrade': <function __EdbAPI>, 'AddTradeToEdb': <function AddTradeToEdb>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, ...}"
p71
sS'ccode'
p72
S'<code object <module> at 0x7fcaae23d7b0, file "/...lications/pampers1/controllers/TtApi.py", line 1>'
p73
ssS'lnum'
p74
I227
sS'lines'
p75
(dp76
I224
S'            ccode = code'
p77
sI225
S'        else:'
p78
sI226
S'            ccode = compile2(code, layer)'
p79
sI227
S'        exec ccode in environment'
p80
sI228
S'    except HTTP:'
p81
sI229
S'        raise'
p82
sI230
S'    except RestrictedError:'
p83
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p84
sI222
S'    try:'
p85
sI223
S'        if isinstance(code, types.CodeType):'
p86
ssS'call'
p87
S'(code="__author__ = \'Administrator\'\\n\\nimport xml.etree.E...response._vars=response._caller(GetEdbOrderInfo)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AddTrade\': <function __EdbAPI>, \'AddTradeToEdb\': <function AddTradeToEdb>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, ...}, layer=\'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py\')'
p88
sS'func'
p89
S'restricted'
p90
sa(dp91
g66
S'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py'
p92
sg68
(dp93
sg74
I861
sg75
(dp94
I850
S''
sI851
S'#@request.restful()'
p95
sI852
S'def TradeDelete():'
p96
sI853
S"    response.view ='generic.'+request.extension  #return  json"
p97
sI854
S'    def DELETE(table_name,record_id):'
p98
sI855
S'        return db(db[table_name].order_id==record_id).delete()'
p99
sI856
S'    return locals()'
p100
sI857
S''
sI858
S'if __name__=="__main__":'
p101
sI859
S'    test_TOS()'
p102
ssg87
S'()'
p103
sg89
S'<module>'
p104
sa(dp105
g66
S'/home/www-data/web2py/gluon/globals.py'
p106
sg68
(dp107
S'self'
p108
S'undefined'
p109
sS'f'
S'<function GetEdbOrderInfo>'
p110
ssg74
I412
sg75
(dp111
I416
S"        self.generic_patterns = ['*']"
p112
sI407
S"        self.flash = ''            # used by the default view layout"
p113
sI408
S'        self.meta = Storage()      # used by web2py_ajax.html'
p114
sI409
S'        self.menu = []             # used by the default view layout'
p115
sI410
S'        self.files = []            # used by web2py_ajax.html'
p116
sI411
S'        self._vars = None'
p117
sI412
S'        self._caller = lambda f: f()'
p118
sI413
S'        self._view_environment = None'
p119
sI414
S'        self._custom_commit = None'
p120
sI415
S'        self._custom_rollback = None'
p121
ssg87
S'(f=<function GetEdbOrderInfo>)'
p122
sg89
S'<lambda>'
p123
sa(dp124
g66
S'/home/www-data/web2py/gluon/globals.py'
p125
sg68
(dp126
S'rest_action'
p127
S'<function GET>'
p128
sS'_self'
p129
S"<Storage {'_vars': <Storage {'orderId': 'TC16674... '/home/www-data/web2py/applications/pampers1/'}>"
p130
sS'_self.args'
p131
S'[]'
p132
sS'builtingetattr'
p133
S'<built-in function getattr>'
p134
ssg74
I378
sg75
(dp135
I373
S'                rest_action = _action().get(method, None)'
p136
sI374
S'                if not (rest_action and method == method.upper()'
p137
sI375
S'                        and callable(rest_action)):'
p138
sI376
S'                    raise HTTP(405, "method not allowed")'
p139
sI377
S'                try:'
p140
sI378
S"                    return rest_action(*_self.args, **getattr(_self, 'vars', {}))"
p141
sI379
S'                except TypeError, e:'
p142
sI380
S'                    exc_type, exc_value, exc_traceback = sys.exc_info()'
p143
sI381
S'                    if len(traceback.extract_tb(exc_traceback)) == 1:'
p144
sI382
S'                        raise HTTP(400, "invalid arguments")'
p145
ssg87
S"(_action=<function GetEdbOrderInfo>, _self=<Storage {'_vars': <Storage {'orderId': 'TC16674... '/home/www-data/web2py/applications/pampers1/'}>, *a=(), **b={})"
p146
sg89
S'f'
sa(dp147
g66
S'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py'
p148
sg68
(dp149
S'db.trade.out_tid.like'
p150
S'<bound method Field.like of <pydal.objects.Field object>>'
p151
sS'order_info'
p152
S"{'logisticCompany': 'YUNDA', 'orderId': '1667482', 'order_status': 'S', 'trackingNo': '3101039016675', 'updateTime': '2016-05-25 09:48:13'}"
p153
sS').select'
p154
g109
sS'db.trade.out_tid'
p155
S'<pydal.objects.Field object>'
p156
sS'db.trade'
p157
S'<Table trade (id,tid,out_tid,shop_id,storage_id,...us,tc_return,edb_return,oti_return,wrong_reason)>'
p158
sS'global db'
p159
S'<DAL uri="mysql:******@localhost/taotongdb">'
p160
sS'trade_exist'
p161
g109
ssg74
I780
sg75
(dp162
I775
S"                elif k=='orderId':"
p163
sI776
S"                    order_info['orderId']=v.replace('TC','')"
p164
sI777
S'                else:'
p165
sI778
S'                    order_info[k]=v'
p166
sI779
S"            db.WuLiuInfo.update_or_insert(db.WuLiuInfo.orderId==order_info['orderId'],**order_info)"
p167
sI780
S"            trade_exist=db(db.trade.out_tid.like(order_info['orderId'])).select()"
p168
sI781
S"            if not order_info['orderId'].startswith('TT'):"
p169
sI782
S'                if trade_exist:'
p170
sI783
S'                    WuLiu_info={"order_id": order_info[\'orderId\'],'
p171
sI784
S'\t                "tracking_number":order_info[\'trackingNo\']}'
p172
ssg87
S"(*args=(), **vars={'app_key': '78f68d221aeac799553b7fd76aa719d4', 'logisticCompany': 'YUNDA', 'orderId': 'TC1667482', 'status': 'S', 'trackingNo': '3101039016675', 'updateTime': '2016-05-25 09:48:13'})"
p173
sg89
S'GET'
p174
sa(dp175
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/objects.py'
p176
sg68
(dp177
S'self.query'
p178
S"<Query (trade.out_tid LIKE '1667482' ESCAPE '\\')>"
p179
sS'adapter.select'
p180
S'<bound method MySQLAdapter.select of <pydal.adapters.mysql.MySQLAdapter object>>'
p181
sS'fields'
p182
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...]'
p183
sS'adapter'
p184
S'<pydal.adapters.mysql.MySQLAdapter object>'
p185
sS'attributes'
p186
g21
sS'self'
p187
S"<Set (trade.out_tid LIKE '1667482' ESCAPE '\\')>"
p188
ssg74
I2025
sg75
(dp189
I2020
S"                                    attributes.get('join',None),"
p190
sI2021
S"                                    attributes.get('left',None),"
p191
sI2022
S"                                    attributes.get('orderby',None),"
p192
sI2023
S"                                    attributes.get('groupby',None))"
p193
sI2024
S'        fields = adapter.expand_all(fields, tablenames)'
p194
sI2025
S'        return adapter.select(self.query,fields,attributes)'
p195
sI2026
S''
sI2027
S'    def iterselect(self, *fields, **attributes):'
p196
sI2028
S'        adapter = self.db._adapter'
p197
sI2029
S'        tablenames = adapter.tables(self.query,'
p198
ssg87
S"(self=<Set (trade.out_tid LIKE '1667482' ESCAPE '\\')>, *fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...], **attributes={})"
p199
sg89
S'select'
p200
sa(dp201
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p202
sg68
(dp203
S'fields'
p204
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...]'
p205
sS'self'
p206
S'<pydal.adapters.mysql.MySQLAdapter object>'
p207
sS'attributes'
p208
g21
sS'self._select_aux'
p209
S'<bound method MySQLAdapter._select_aux of <pydal.adapters.mysql.MySQLAdapter object>>'
p210
sS'sql'
p211
S'r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');"'
p212
ssg74
I1293
sg75
(dp213
I1288
S'            return cache_model('
p214
sI1289
S'                key,'
p215
sI1290
S'                lambda self=self,args=args:self._select_aux(*args),'
p216
sI1291
S'                time_expire)'
p217
sI1292
S'        else:'
p218
sI1293
S'            return self._select_aux(sql,fields,attributes)'
p219
sI1294
S''
sI1295
S'    def iterselect(self, query, fields, attributes):'
p220
sI1296
S'        sql = self._select(query, fields, attributes)'
p221
sI1297
S"        cacheable = attributes.get('cacheable', False)"
p222
ssg87
S"(self=<pydal.adapters.mysql.MySQLAdapter object>, query=<Query (trade.out_tid LIKE '1667482' ESCAPE '\\')>, fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...], attributes={})"
p223
sg89
g200
sa(dp224
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p225
sg68
(dp226
S'self'
p227
S'<pydal.adapters.mysql.MySQLAdapter object>'
p228
sS'self.execute'
p229
S'<bound method MySQLAdapter.execute of <pydal.adapters.mysql.MySQLAdapter object>>'
p230
sS'sql'
p231
S'r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');"'
p232
ssg74
I1250
sg75
(dp233
I1248
S"        cache = args_get('cache',None)"
p234
sI1249
S'        if not cache:'
p235
sI1250
S'            self.execute(sql)'
p236
sI1251
S'            rows = self._fetchall()'
p237
sI1252
S'        else:'
p238
sI1253
S'            if isinstance(cache, dict):'
p239
sI1254
S"                cache_model = cache['model']"
p240
sI1245
S''
sI1246
S'    def _select_aux(self, sql, fields, attributes):'
p241
sI1247
S'        args_get = attributes.get'
p242
ssg87
S'(self=<pydal.adapters.mysql.MySQLAdapter object>, sql=r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');", fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...], attributes={})'
p243
sg89
S'_select_aux'
p244
sa(dp245
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p246
sg68
(dp247
S'a'
S'(r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');",)'
p248
sS'self'
p249
S'<pydal.adapters.mysql.MySQLAdapter object>'
p250
sS'b'
g21
sS'self.log_execute'
p251
S'<bound method MySQLAdapter.log_execute of <pydal.adapters.mysql.MySQLAdapter object>>'
p252
ssg74
I1385
sg75
(dp253
I1380
S'        self.db._timings.append((command,time.time()-t0))'
p254
sI1381
S'        del self.db._timings[:-TIMINGSSIZE]'
p255
sI1382
S'        return ret'
p256
sI1383
S''
sI1384
S'    def execute(self, *a, **b):'
p257
sI1385
S'        return self.log_execute(*a, **b)'
p258
sI1386
S''
sI1387
S'    def execute_test_query(self):'
p259
sI1388
S'        return self.execute(self.test_query)'
p260
sI1389
S''
ssg87
S'(self=<pydal.adapters.mysql.MySQLAdapter object>, *a=(r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');",), **b={})'
p261
sg89
S'execute'
p262
sa(dp263
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p264
sg68
(dp265
S'a'
S'(r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');",)'
p266
sS'b'
g21
sS'self'
p267
S'<pydal.adapters.mysql.MySQLAdapter object>'
p268
sS'ret'
p269
g109
sS'command'
p270
S'r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');"'
p271
sS'self.get_cursor'
p272
S'<bound method MySQLAdapter.get_cursor of <pydal.adapters.mysql.MySQLAdapter object>>'
p273
sS').execute'
p274
g109
ssg74
I1379
sg75
(dp275
I1376
S"            self.db.logger.debug('SQL: %s' % command)"
p276
sI1377
S'        self.db._lastsql = command'
p277
sI1378
S'        t0 = time.time()'
p278
sI1379
S'        ret = self.get_cursor().execute(command, *a[1:], **b)'
p279
sI1380
S'        self.db._timings.append((command,time.time()-t0))'
p280
sI1381
S'        del self.db._timings[:-TIMINGSSIZE]'
p281
sI1382
S'        return ret'
p282
sI1383
S''
sI1374
S'            command = self.filter_sql_command(command)'
p283
sI1375
S'        if self.db._debug:'
p284
ssg87
S'(self=<pydal.adapters.mysql.MySQLAdapter object>, *a=(r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');",), **b={})'
p285
sg89
S'log_execute'
p286
sa(dp287
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py'
p288
sg68
(dp289
S'query'
p290
S'r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');"'
p291
sS'self'
p292
S'<pymysql.cursors.Cursor object>'
p293
sS'result'
p294
g109
sS'self._query'
p295
S'<bound method Cursor._query of <pymysql.cursors.Cursor object>>'
p296
ssg74
I146
sg75
(dp297
I141
S'        while self.nextset():'
p298
sI142
S'            pass'
p299
sI143
S''
sI144
S'        query = self.mogrify(query, args)'
p300
sI145
S''
sI146
S'        result = self._query(query)'
p301
sI147
S'        self._executed = query'
p302
sI148
S'        return result'
p303
sI149
S''
sI150
S'    def executemany(self, query, args):'
p304
ssg87
S'(self=<pymysql.cursors.Cursor object>, query=r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');", args=None)'
p305
sg89
g262
sa(dp306
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py'
p307
sg68
(dp308
S'q'
S'r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');"'
p309
sS'conn.query'
p310
S'<bound method Connection.query of <pymysql.connections.Connection object>>'
p311
sS'conn'
p312
S'<pymysql.connections.Connection object>'
p313
ssg74
I296
sg75
(dp314
I291
S'        self.rownumber = r'
p315
sI292
S''
sI293
S'    def _query(self, q):'
p316
sI294
S'        conn = self._get_db()'
p317
sI295
S'        self._last_executed = q'
p318
sI296
S'        conn.query(q)'
p319
sI297
S'        self._do_get_result()'
p320
sI298
S'        return self.rowcount'
p321
sI299
S''
sI300
S'    def _do_get_result(self):'
p322
ssg87
S'(self=<pymysql.cursors.Cursor object>, q=r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');")'
p323
sg89
S'_query'
p324
sa(dp325
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p326
sg68
(dp327
S'self._read_query_result'
p328
S'<bound method Connection._read_query_result of <pymysql.connections.Connection object>>'
p329
sS'self'
p330
S'<pymysql.connections.Connection object>'
p331
sS'unbuffered'
p332
S'False'
p333
sS'self._affected_rows'
p334
S'1'
ssg74
I819
sg75
(dp335
I814
S'            if PY2:'
p336
sI815
S'                sql = sql.encode(self.encoding)'
p337
sI816
S'            else:'
p338
sI817
S"                sql = sql.encode(self.encoding, 'surrogateescape')"
p339
sI818
S'        self._execute_command(COMMAND.COM_QUERY, sql)'
p340
sI819
S'        self._affected_rows = self._read_query_result(unbuffered=unbuffered)'
p341
sI820
S'        return self._affected_rows'
p342
sI821
S''
sI822
S'    def next_result(self, unbuffered=False):'
p343
sI823
S'        self._affected_rows = self._read_query_result(unbuffered=unbuffered)'
p344
ssg87
S'(self=<pymysql.connections.Connection object>, sql=r"SELECT  trade.id, trade.tid, trade.out_tid, trad... WHERE (trade.out_tid LIKE \'1667482\' ESCAPE \'\\\');", unbuffered=False)'
p345
sg89
S'query'
p346
sa(dp347
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p348
sg68
(dp349
S'result.read'
p350
S'<bound method MySQLResult.read of <pymysql.connections.MySQLResult object>>'
p351
sS'result'
p352
S'<pymysql.connections.MySQLResult object>'
p353
ssg74
I1001
sg75
(dp354
I996
S'                result.unbuffered_active = False'
p355
sI997
S'                result.connection = None'
p356
sI998
S'                raise'
p357
sI999
S'        else:'
p358
sI1000
S'            result = MySQLResult(self)'
p359
sI1001
S'            result.read()'
p360
sI1002
S'        self._result = result'
p361
sI1003
S'        if result.server_status is not None:'
p362
sI1004
S'            self.server_status = result.server_status'
p363
sI1005
S'        return result.affected_rows'
p364
ssg87
S'(self=<pymysql.connections.Connection object>, unbuffered=False)'
p365
sg89
S'_read_query_result'
p366
sa(dp367
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p368
sg68
(dp369
S'first_packet'
p370
g109
sS'self'
p371
S'<pymysql.connections.MySQLResult object>'
p372
sS'self.connection'
p373
S'None'
p374
sS'self.connection._read_packet'
p375
g109
ssg74
I1285
sg75
(dp376
I1280
S'        if self.unbuffered_active:'
p377
sI1281
S'            self._finish_unbuffered_query()'
p378
sI1282
S''
sI1283
S'    def read(self):'
p379
sI1284
S'        try:'
p380
sI1285
S'            first_packet = self.connection._read_packet()'
p381
sI1286
S''
sI1287
S'            if first_packet.is_ok_packet():'
p382
sI1288
S'                self._read_ok_packet(first_packet)'
p383
sI1289
S'            elif first_packet.is_load_local_packet():'
p384
ssg87
S'(self=<pymysql.connections.MySQLResult object>)'
p385
sg89
S'read'
p386
sa(dp387
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p388
sg68
(dp389
S'packet'
p390
S'<pymysql.connections.MysqlPacket object>'
p391
sS'packet.check_error'
p392
S'<bound method MysqlPacket.check_error of <pymysql.connections.MysqlPacket object>>'
p393
ssg74
I965
sg75
(dp394
I960
S'                continue'
p395
sI961
S'            if bytes_to_read < MAX_PACKET_LEN:'
p396
sI962
S'                break'
p397
sI963
S''
sI964
S'        packet = packet_type(buff, self.encoding)'
p398
sI965
S'        packet.check_error()'
p399
sI966
S'        return packet'
p400
sI967
S''
sI968
S'    def _read_bytes(self, num_bytes):'
p401
sI969
S'        while True:'
p402
ssg87
S"(self=<pymysql.connections.Connection object>, packet_type=<class 'pymysql.connections.MysqlPacket'>)"
p403
sg89
S'_read_packet'
p404
sa(dp405
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p406
sg68
(dp407
S'self._data'
p408
S'"\\xff\\x1e\\x04#42S22Unknown column \'trade.addrbkp\' in \'field list\'"'
p409
sS'self'
p410
S'<pymysql.connections.MysqlPacket object>'
p411
sS'global err'
p412
S"<module 'pymysql.err' from '/usr/local/lib/python2.7/dist-packages/pymysql/err.pyc'>"
p413
sS'err.raise_mysql_exception'
p414
S'<function raise_mysql_exception>'
p415
ssg74
I394
sg75
(dp416
I389
S'        if self.is_error_packet():'
p417
sI390
S'            self.rewind()'
p418
sI391
S'            self.advance(1)  # field_count == error (we already know that)'
p419
sI392
S'            errno = self.read_uint16()'
p420
sI393
S'            if DEBUG: print("errno =", errno)'
p421
sI394
S'            err.raise_mysql_exception(self._data)'
p422
sI395
S''
sI396
S'    def dump(self):'
p423
sI397
S'        dump_packet(self._data)'
p424
sI398
S''
ssg87
S'(self=<pymysql.connections.MysqlPacket object>)'
p425
sg89
S'check_error'
p426
sa(dp427
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/err.py'
p428
sg68
(dp429
S'global _check_mysql_exception'
p430
S'<function _check_mysql_exception>'
p431
sS'errinfo'
p432
S'(1054, u\'42S22\', u"Unknown column \'trade.addrbkp\' in \'field list\'")'
p433
ssg74
I120
sg75
(dp434
I111
S'    if errorclass:'
p435
sI112
S'        raise errorclass(errno, errorvalue)'
p436
sI113
S''
sI114
S"    # couldn't find the right error number"
p437
sI115
S'    raise InternalError(errno, errorvalue)'
p438
sI116
S''
sI117
S''
sI118
S'def raise_mysql_exception(data):'
p439
sI119
S'    errinfo = _get_error_info(data)'
p440
sI120
S'    _check_mysql_exception(errinfo)'
p441
ssg87
S'(data="\\xff\\x1e\\x04#42S22Unknown column \'trade.addrbkp\' in \'field list\'")'
p442
sg89
S'raise_mysql_exception'
p443
sa(dp444
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/err.py'
p445
sg68
(dp446
S'errno'
p447
S'1054'
p448
sS'global InternalError'
p449
S"<class 'pymysql.err.InternalError'>"
p450
sS'errorvalue'
p451
S'u"Unknown column \'trade.addrbkp\' in \'field list\'"'
p452
ssg74
I115
sg75
(dp453
I110
S'    errorclass = error_map.get(errno, None)'
p454
sI111
S'    if errorclass:'
p455
sI112
S'        raise errorclass(errno, errorvalue)'
p456
sI113
S''
sI114
S"    # couldn't find the right error number"
p457
sI115
S'    raise InternalError(errno, errorvalue)'
p458
sI116
S''
sI117
S''
sI118
S'def raise_mysql_exception(data):'
p459
sI119
S'    errinfo = _get_error_info(data)'
p460
ssg87
S'(errinfo=(1054, u\'42S22\', u"Unknown column \'trade.addrbkp\' in \'field list\'"))'
p461
sg89
S'_check_mysql_exception'
p462
sasS'pyver'
p463
S'Python 2.7.6: /usr/local/bin/uwsgi (prefix: /usr)'
p464
sS'session'
p465
g61
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp466
sS'etype'
p467
S"<class 'pymysql.err.InternalError'>"
p468
sS'date'
p469
S'Wed May 25 09:48:15 2016'
p470
sS'response'
p471
g61
(S's\xce>\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7fcaae052d18&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_pampers1</td><td style="vertical-align:top;">:</td><td><div>183.56.163.88-51b891c9-6b57-4cfd-b9e0-e20c1fe47d20<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*.xml</div></td></tr><tr><td><div>*.json</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/pampers1/default/index.xml</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>My Sites</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site.xml</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>This App</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Design</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design.xml/pampers1</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Controller</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit.xml/pampers1/controllers/TtApi.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>View</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit.xml/pampers1/views/TtApi/GetEdbOrderInfo.xml</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>DB Model</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit.xml/pampers1/models/db.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Menu Model</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit.xml/pampers1/models/menu.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Config.ini</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit.xml/pampers1/private/appconfig.ini</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Layout</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit.xml/pampers1/views/layout.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Stylesheet</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit.xml/pampers1/static/css/web2py-bootstrap3.css</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Database</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/pampers1/appadmin/index.xml</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Errors</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/errors.xml/pampers1</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>About</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/about.xml/pampers1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>web2py.com</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Download</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/download</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Support</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/support</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Demo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/demo_admin</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Quick Examples</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/examples/default/examples</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>FAQ</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/AlterEgo</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Videos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/videos/</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Free Applications</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/appliances</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/plugins</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2pyslices.com/</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Documentation</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Online book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Preface</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/00</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Introduction</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/01</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Python</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/02</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Overview</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/03</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>The Core</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/04</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>The Views</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/05</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Database</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/06</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Forms and Validators</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/07</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Email and SMS</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/08</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Access Control</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/09</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Services</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/10</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Ajax Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/11</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Components and Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/12</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Deployment Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/13</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Other Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/14</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Helping web2py</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/15</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Buy web2py\'s book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://stores.lulu.com/web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Community</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Groups</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/usergroups</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Twitter</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://twitter.com/web2py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Live Chat</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://webchat.freenode.net/?channels=web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^TtApi/\\w+\\.py$</div></td></tr><tr><td><div>^TtApi/GetEdbOrderInfo/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>183.56.163.88</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py/applications/pampers1/sessions/183.56.163.88-51b891c9-6b57-4cfd-b9e0-e20c1fe47d20</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>c0762cbf4baf7f9af97c051e7fcb8083</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>183.56.163.88-51b891c9-6b57-4cfd-b9e0-e20c1fe47d20</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>generic.xml</div></td></tr></table></div>'
tRp472
sS'locals'
p473
(dp474
S'errorclass'
p475
S'None'
p476
sS'errno'
p477
S'1054'
p478
sS'sqlstate'
p479
S"u'42S22'"
p480
sS'errinfo'
p481
S'(1054, u\'42S22\', u"Unknown column \'trade.addrbkp\' in \'field list\'")'
p482
sS'errorvalue'
p483
S'u"Unknown column \'trade.addrbkp\' in \'field list\'"'
p484
sssS'traceback'
p485
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/pampers1/controllers/TtApi.py", line 861, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/gluon/globals.py", line 378, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/www-data/web2py/applications/pampers1/controllers/TtApi.py", line 780, in GET\n    trade_exist=db(db.trade.out_tid.like(order_info[\'orderId\'])).select()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1293, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1250, in _select_aux\n    self.execute(sql)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1385, in execute\n    return self.log_execute(*a, **b)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1379, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py", line 146, in execute\n    result = self._query(query)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py", line 296, in _query\n    conn.query(q)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 819, in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 1001, in _read_query_result\n    result.read()\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 1285, in read\n    first_packet = self.connection._read_packet()\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 965, in _read_packet\n    packet.check_error()\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 394, in check_error\n    err.raise_mysql_exception(self._data)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/err.py", line 120, in raise_mysql_exception\n    _check_mysql_exception(errinfo)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/err.py", line 115, in _check_mysql_exception\n    raise InternalError(errno, errorvalue)\nInternalError: (1054, u"Unknown column \'trade.addrbkp\' in \'field list\'")\n'
p486
s.