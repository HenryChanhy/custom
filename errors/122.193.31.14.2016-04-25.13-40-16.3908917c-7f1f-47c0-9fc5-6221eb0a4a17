(dp1
S'output'
p2
S'<class \'pymysql.err.InternalError\'> (1054, u"Unknown column \'trade.wrong_reason\' in \'field list\'")'
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py'
p5
sS'code'
p6
S'__author__ = \'Administrator\'\nfrom simhash import Simhash,SimhashIndex\nimport xml.etree.ElementTree as XML_ET\nimport os\nimport sys\nimport time\nimport hashlib\nimport chardet\nimport requests\nimport json\nimport openpyxl\nfrom datetime import datetime\nfrom time import mktime\n\ndef cmp(x,y):\n    x1=x.lower()\n    y1=y.lower()\n    if x1>y1:\n        return 1\n    if x1<y1:\n        return -1\n    return 0\n\ndef GetTimeStamp():\n    t=time.localtime()\n    lst=[]\n    for i in xrange(len(t)):\n        if i>=5:\n            break\n        v=str(t[i]).zfill(2)\n        lst.append(v)\n    reStr="".join(lst)\n    return reStr\n\ndef log_file(msg):\n    dir=os.getcwd()\n    fileName="err.txt"\n    finalPath=os.path.join(dir,fileName)\n    with open(finalPath,"ab") as f:\n        f.write("[%s] %s\\r\\n"%(GetTimeStamp(),msg))\n    return finalPath\n\ndef MD5Sign(md5Str):\n    m=hashlib.md5()\n    m.update(md5Str)\n    return m.hexdigest().upper()\n\ndef TrialAPI(**arg):\n    def _TrialAPI(func):\n        def __TrialAPI(data):\n            SysData={"apiKey":"57Hyjts8HHty",}\n            ExData={"apiSecret":"iO7hbmH8-rbt6Hg_Yg6",}\n            param=func(data)\n            param.update(SysData)\n            param.update(data)\n            url="http://122.193.31.8:8080/TrialCenter/order/Pampers/ST/"+arg["method"]\n            param["timestamp"]=str(int(time.time()))\n            paraList=[]\n            for k,v in param.items():\n                if isinstance(v,str):\n                    paraList.append(k+"="+str(v))\n            paraList.sort(cmp)\n            md5Str="&".join(paraList)\n            md5Str=md5Str+ExData["apiSecret"]\n            param["sig"]=MD5Sign(md5Str)\n            log_file("%s %s"%(md5Str,param["sig"]))\n            jsparam=json.dumps(param)\n            req=requests.post(url,jsparam,verify=False)\n            return json.loads(req.content)\n        return __TrialAPI\n    return _TrialAPI\n\n@TrialAPI(method="updateOrderTrackingInfo")\ndef updateOTI(data):\n    return {}\n\n@TrialAPI(method="updateTrialOrderStatus")\ndef updateTOS(data):\n    return {}\n\n@request.restful()\ndef test_TOS():\n    response.view =\'generic.\'+request.extension  #return json\n    def GET(*args,**vars):\n        barcode_dict={\'62015092412001\':\'6903148240014\',\'62015092480001\':\'6903148238905\',\n                     \'2015092412002\':\'6903148240021\',\'2015092480002\':\'6903148238912\',\n                     \'33320151016001\':\'6903148238912\',\'33320151016002\':\'6903148238905\'}\n        keys=vars.keys()\n        result={}\n        if (\'out_tid\' in keys) and (\'status\' in keys) and (\'appKey\' in keys):\n            if vars[\'appKey\']==\'updateandtos\':\n                a_row=db(db.trade.out_tid.like(vars[\'out_tid\'])).select()\n                if a_row:\n                    if a_row[0][\'oti_return\']==1:\n                        result[\'is_success\']=\'t\'\n                    else:\n                        a_row.first().update_record(status=vars[\'status\'])\n                        data={"order_id":vars[\'out_tid\'],\'status\':vars[\'status\']}\n                        if vars[\'status\']==\'2\':\n                            data[\'message\']=vars[\'msg\']\n                        else:\n                            trade_content=a_row.as_list()[0]\n                            if \'province\' in trade_content.keys():\n                                trade_content[\'privince\']=trade_content[\'province\']\n                            for k,v in trade_content.items():\n                                if isinstance(v,str):\n                                    trade_content[k]=v.decode(\'utf8\')\n                                if isinstance(v, datetime):\n                                    trade_content[k] = v.isoformat()\n                            if trade_content[\'barCode\'] in barcode_dict.keys():\n                                trade_content[\'barCode\']=barcode_dict[trade_content[\'barCode\']]\n                            trade_content[\'out_tid\']=\'TC\'+trade_content[\'out_tid\']\n                            if a_row.as_list()[0][\'edb_return\']==None or a_row.as_list()[0][\'edb_return\']!=\'True\':\n                                edbreturn=AddTrade(trade_content)\n                                try:\n                                    a_row.first().update_record(edb_return=edbreturn[\'Success\'][\'items\'][\'item\'][0][\'is_success\'])\n                                except:\n                                    a_row.first().update_record(edb_return=edbreturn)\n                                result[\'edb_return\']=edbreturn\n                        if a_row.as_list()[0][\'tc_return\']==None or a_row.as_list()[0][\'tc_return\']!=\'true\':\n                            ctreturn=updateTOS(data)\n                            a_row.first().update_record(tc_return=ctreturn[\'result\'])\n                            result[\'CT_return\']=ctreturn\n                        result[\'is_success\']=\'t\'\n                else:\n                    result[\'is_success\']=\'o\'\n            else:\n                result[\'is_success\']=\'f\'\n        else:\n            result[\'is_success\']=\'f\'\n        return result\n    return locals()\n    \'\'\'wb=openpyxl.load_workbook(\'/home/20160121_27\xe6\xba\x90\xe6\x95\xb0\xe6\x8d\xae60658\xe6\x9d\xa1.xlsx\')\n    wst= wb.get_sheet_by_name(name = \'true\')\n    wsw= wb.get_sheet_by_name(name = \'wrong\')\n    for i in range(2,wst.max_row+1):\n        outtid=wst.cell(row=i,column=3).value.encode(\'utf8\')\n        data={"order_id":outtid}\n        data["status"]="3"\n        result=updateTOS(data)\n        log_file("%s %s"%(data,result))\n        db(db.trade.out_tid==wst.cell(row=i,column=3).value).select().first().update_record(status=3)\n    for i in range(2,wsw.max_row+1):\n        outtid=wsw.cell(row=i,column=3).value.encode(\'utf8\')\n        data={"order_id":outtid}\n        data["status"]="2"\n        data["message"]=wsw.cell(row=i,column=17).value.encode(\'utf8\')\n        result=updateTOS(data)\n        log_file("%s %s"%(data,result))\n        db(db.trade.out_tid==wsw.cell(row=i,column=3).value).select().first().update_record(status=2)\'\'\'\n\n@request.restful()\ndef onlyToEDB():\n    response.view =\'generic.\'+request.extension  #return json\n    def GET(*args,**vars):\n        barcode_dict={\'62015092412001\':\'6903148240014\',\'62015092480001\':\'6903148238905\',\n                     \'2015092412002\':\'6903148240021\',\'2015092480002\':\'6903148238912\',\n                     \'33320151016001\':\'6903148238912\',\'33320151016002\':\'6903148238905\'}\n        keys=vars.keys()\n        result={}\n        if (\'out_tid\' in keys) and (\'status\' in keys) and (\'appKey\' in keys):\n            if vars[\'appKey\']==\'updateandtos\':\n                a_row=db(db.trade.out_tid.like(vars[\'out_tid\'])).select()\n                if a_row:\n                    a_row.first().update_record(status=vars[\'status\'])\n                    data={"order_id":vars[\'out_tid\'],\'status\':vars[\'status\']}\n                    if vars[\'status\']==\'2\':\n                        data[\'message\']=vars[\'msg\']\n                    else:\n                        trade_content=a_row.as_list()[0]\n                        if \'province\' in trade_content.keys():\n                            trade_content[\'privince\']=trade_content[\'province\']\n                        for k,v in trade_content.items():\n                            if isinstance(v,str):\n                                trade_content[k]=v.decode(\'utf8\')\n                            if isinstance(v, datetime):\n                                trade_content[k] = v.isoformat()\n                        if trade_content[\'barCode\'] in barcode_dict.keys():\n                            trade_content[\'barCode\']=barcode_dict[trade_content[\'barCode\']]\n                        if a_row.as_list()[0][\'edb_return\']==None or a_row.as_list()[0][\'edb_return\']!=\'True\':\n                            edbreturn=AddTrade(trade_content)\n                            try:\n                                a_row.first().update_record(edb_return=edbreturn[\'Success\'][\'items\'][\'item\'][0][\'is_success\'])\n                            except:\n                                a_row.first().update_record(edb_return=edbreturn)\n                            result[\'edb_return\']=edbreturn\n                    result[\'is_success\']=\'t\'\n                else:\n                    result[\'is_success\']=\'o\'\n            else:\n                result[\'is_success\']=\'f\'\n        else:\n            result[\'is_success\']=\'f\'\n        return result\n    return locals()\n\n#\xe6\xb5\x8b\xe8\xaf\x95\xe7\x94\xa8\xef\xbc\x8c\xe5\x8f\xaf\xe5\x88\xa0\xe9\x99\xa4\ndef test_OTI():\n    orderinfo={\n\t"order_id": "8444",\n\t"tracking_number": "3100901633843",\n\t"tracking_company": "17"\n    }\n    result=updateOTI(orderinfo)\n    log_file("%s %s"%(orderinfo,result))\n\ndef EdbAPI(**arg):\n    def _EdbAPI(func):\n        def __EdbAPI(data):\n            #url="http://vip79.edb04.net/edb2/rest/openapi/index.aspx"\n            url="http://vip79.edb04.net/rest/index.aspx"\n            SysData={\n                "appkey":"5a7b7896",\n                "dbhost":"edb_a77527",\n                "format":"json",\n                "v":2.0,\n                "slencry":0,\n                "Ip":"117.79.148.228",\n                }\n            ExData={\n                "appscret":"1f5b75edd28d480e968feecbc38f2c73",\n                "token":"7041e7424cb4410f8370f10a2d3a285a",\n                }\n            param=func(data)\n            param.update(SysData)\n            param["method"]=arg["method"]\n            param["timestamp"]=GetTimeStamp()\n            paraList=[]\n            for k,v in param.items():\n                if k=="appkey":\n                    continue\n                if not str(v):\n                    continue\n                paraList.append(k+str(v))\n            for k,v in ExData.items():\n                paraList.append(k+str(v))\n            paraList.sort(cmp)\n            md5Str="".join(paraList)\n            md5Str=SysData["appkey"]+"appkey"+SysData["appkey"]+md5Str\n            param["sign"]=MD5Sign(md5Str)\n            req=requests.post(url,param)\n            if not req.ok:\n                print "requests FAIL"\n                log_file("%s %s"%(arg,data))\n                filePath=log_file(req.content)\n                print "log_file in",filePath\n                return\n            return json.loads(req.content)\n        return __EdbAPI\n    return _EdbAPI\n\n@EdbAPI(method="edbTradeAdd")\ndef AddTrade(data):\n    orderTag=(\'out_tid\',\'shop_id\',\'storage_id\',\'buyer_id\',\'buyer_msg\',\'buyer_email\',\'buyer_alipay\',\'seller_remark\',\'consignee\',\'address\',\'postcode\',\'telephone\',\'mobilPhone\',\'privince\',\'city\',\'area\',\'actual_freight_get\',\'actual_RP\',\'ship_method\',\'express\',\'is_invoiceOpened\',\'invoice_type\',\'invoice_money\',\'invoice_title\',\'invoice_msg\',\'order_type\',\'process_status\',\'pay_status\',\'deliver_status\',\'is_COD\',\'serverCost_COD\',\'order_totalMoney\',\'product_totalMoney\',\'pay_method\',\'pay_commission\',\'pay_score\',\'return_score\',\'favorable_money\',\'alipay_transaction_no\',\'out_payNo\',\'out_express_method\',\'out_order_status\',\'order_date\',\'pay_date\',\'finish_date\',\'plat_type\',\'distributor_no\',\'WuLiu\',\'WuLiu_no\',\'in_memo\',\'other_remark\',\'actual_freight_pay\',\'ship_date_plan\',\'deliver_date_plan\',\'is_scorePay\',\'is_needInvoice\')\n    productTag=(\'barCode\',\'product_title\',\'standard\',\'out_price\',\'favorite_money\',\'orderGoods_Num\',\'gift_Num\',\'cost_Price\',\'tid\',\'product_stockout\',\'is_Book\',\'is_presell\',\'is_Gift\',\'avg_price\',\'product_freight\',\'shop_id\',\'out_tid\',\'out_productId\',\'out_barCode\',\'product_intro\')\n    orderXml=XML_ET.fromstring(\'<info><orderInfo></orderInfo></info>\')\n    productXml=XML_ET.fromstring(\'<product_info><product_item></product_item></product_info>\')\n    orderInfo=orderXml.find("orderInfo")\n    itemInfo=productXml.find("product_item")\n    for k,v in data.items():\n        if k in orderTag:\n            tmp=XML_ET.SubElement(orderInfo,k)\n            tmp.text=v\n        if k in productTag:\n            tmp=XML_ET.SubElement(itemInfo,k)\n            tmp.text=v\n    orderInfo.append(productXml)\n    finalStr=XML_ET.tostring(orderXml,"utf8")\n    result={}\n    result["xmlValues"]=finalStr[37:]\n    return result\n\ndef test_2edb():\n    wb=openpyxl.load_workbook(\'/home/trade20160125h_36\xef\xbc\x88100\xe6\x9d\xa1\xe6\xb5\x8b\xe8\xaf\x9571\xe6\x9d\xa1\xe5\x90\x88\xe6\xa0\xbc\xef\xbc\x89.xlsx\')\n    wst= wb.get_sheet_by_name(name = \'true71\')\n    results=[]\n    for i in range(2,wst.max_row+1):\n        outtid=wst.cell(row=i,column=28).value.encode(\'utf8\')\n        trade_content=db(db.trade.out_tid==wst.cell(row=i,column=28).value).select().first()\n        for k,v in trade_content.items():\n            if isinstance(v,str):\n                trade_content[k]=v.decode(\'utf8\')\n            if isinstance(v, datetime):\n                trade_content[k] = v.isoformat()\n    result=AddTrade(trade_content)\n    return result\n\n#{\'bar_code\':vars[\'product_info\'][0][\'barCode\']} in AllBarcode\n#@auth.requires_login()\n@request.restful()\ndef AddTradeToEdb():\n    response.view =\'generic.\'+request.extension  #return  json\n    def POST(tablename,**vars):\n        msg=[]\n        jsonObj={}\n        keys=vars.keys()\n        for k in keys:\n            k.decode(\'unicode_escape\')\n        if (\'apiKey\' in keys)and(\'product_info\' in keys)and\\\n        (\'timestamp\' in keys)and(\'sig\' in keys) and\\\n        (\'out_tid\' in keys)and (\'shop_id\' in keys)and\\\n        (\'consignee\' in keys)and(\'address\' in keys)and\\\n        (\'postcode\' in keys)and(\'mobilPhone\' in keys)and\\\n        (\'order_date\' in keys)and(\'storage_id\' in keys)and\\\n        (\'barCode\' in vars[\'product_info\'][0].keys())and \\\n        (\'product_title\' in vars[\'product_info\'][0].keys())and \\\n        (\'standard\' in vars[\'product_info\'][0].keys())and\\\n        (\'out__tid\' in vars[\'product_info\'][0].keys()):\n            ts=int(time.time())\n            this_apiKey=\'A6BEA59B\'\n            this_apiSecret=\'1F6F088755B094DDAD3C7AEFEA73A1A1\'\n            essential_field=vars.keys()\n            essential_field.sort()\n            SigStr=""\n            edbdata={}\n            for field in essential_field:\n                if field =="sig" or field =="apiSecret":\n                    continue\n                elif field =="product_info":\n                    SigStr=SigStr+unicode(field)+u"="+u"["\n                    for d in vars["product_info"]:\n                        k=d.keys()\n                        k.sort()\n                        SigStr=SigStr+u"{"\n                        for j in k:\n                            SigStr=SigStr+unicode(j)+u"="+unicode(d[j])+u"&"\n                            edbdata[j]=d[j]\n                        SigStr=SigStr[0:len(SigStr)-1]\n                        SigStr=SigStr+u"}"\n                    SigStr=SigStr+u"]"+u"&"\n                else:\n                    SigStr=SigStr+unicode(field)+u"="+unicode(vars[field])+u"&"\n                    if (field != \'apiKey\') and (field !=\'timestamp\'):\n                        edbdata[field]=vars[field]\n            edbdata[\'address\']=edbdata[\'address\'].replace(\'\\r\',\'\')\n            edbdata[\'address\']=edbdata[\'address\'].replace(\',\',\'-\')\n            if (\'province\' in keys):\n                edbdata[\'province\']=edbdata[\'province\'].replace(\'\\r\',\'\')\n                edbdata[\'province\']=edbdata[\'province\'].replace(\',\',\'-\')\n            if  (\'city\' in keys):\n                edbdata[\'city\']=edbdata[\'city\'].replace(\'\\r\',\'\')\n                edbdata[\'city\']=edbdata[\'city\'].replace(\',\',\'-\')\n            if  (\'area\' in keys):\n                edbdata[\'area\']=edbdata[\'area\'].replace(\'\\r\',\'\')\n                edbdata[\'area\']=edbdata[\'area\'].replace(\',\',\'-\')\n                #edbdata[\'address\']=edbdata[\'address\'].replace(edbdata[\'province\'],\'\')\n                #edbdata[\'address\']=edbdata[\'address\'].replace(edbdata[\'city\'],\'\')\n                #edbdata[\'address\']=edbdata[\'address\'].replace(edbdata[\'area\'],\'\')\n            if (\'consignee\' in keys):\n                edbdata[\'consignee\']=edbdata[\'consignee\'].replace(\'\\r\',\'\')\n                edbdata[\'consignee\']=edbdata[\'consignee\'].replace(\',\',\'-\')\n            if (\'plat_type\' in keys):\n                if edbdata[\'plat_type\']==None :\n                    edbdata[\'plat_type\']=\'TrialCenter\'\n            this_sig=MD5Sign((SigStr[0:len(SigStr)-1]+this_apiSecret).encode(\'utf8\'))\n            #AllBarcode=db().select(db.AllBarcode.bar_code).as_list()\n            if (vars[\'sig\']==this_sig) and (ts-int(vars[\'timestamp\'])<180) and \\\n            ((vars[\'apiKey\']).decode(\'unicode_escape\')==(this_apiKey)):\n                #getorderid=db.trade.update_or_insert(db.trade.out_tid==edbdata[\'out_tid\'],**edbdata)\n                t=db(db.trade.out_tid==edbdata[\'out_tid\']).select()\n                if t:\n                    msg.append({\'is_success\':\'true\',\'response_Msg\':\'duplicate trade\'})\n                    t.first().update_record(**edbdata)\n                else:\n                    tcpid=db.trade.insert(**edbdata)\n                    if tcpid:\n                        msg.append({\'is_success\':\'true\',\'response_Msg\':\'import to TaoTongGroup successfully\'})\n                    else:\n                        msg.append({\'is_success\':\'false\',\'response_Msg\':\'unexpected data\'})\n            else:\n                msg.append({\'is_success\':\'false\',\'response_Msg\':\'wrong verification\'})\n        else:\n            msg.append({\'is_success\':\'false\',\'response_Msg\':\'absence of essential field\'})\n        jsonObj[\'item\']=msg\n        return jsonObj\n    return locals()\n\n#@auth.requires_login()\n@request.restful()\ndef GetEdbOrderInfo():\n    WuLiu_dict={}\n    response.view =\'generic.\'+request.extension\n    def GET(*args,**vars):\n        keys=vars.keys()\n        content={}\n        if (\'orderId\' in keys)and(\'status\' in keys) and\\\n(\'logisticCompany\' in keys)and(\'trackingNo\' in keys) and\\\n(\'updateTime\' in keys)and(\'app_key\' in keys):\n            WuLiu_dict={\n\'EMS\':\'1\',\'HTKY\':\'10\',\'ZJS\':\'11\',\'STO\':\'12\',\'ZDY\':\'13\',\'ZDY\':\'14\',\'YUNDA\':\'15\',\n\'FEDEX\':\'16\',\'DBL\':\'17\',\'RFD\':\'18\',\'ZT\':\'19\',\'STO\':\'2\',\'POSTB\':\'20\',\'SF\':\'6\',\n\'STO\':\'21\',\'OTHER\':\'22\',\'OTHER\':\'23\',\'UC\':\'24\',\'FAST\':\'25\',\'STO\':\'26\',\'SF\':\'7\',\n\'TTKDEX\':\'27\',\'SF\':\'28\',\'SF\':\'29\',\'EMS\':\'3\',\'ZTO\':\'30\',\'STO\':\'31\',\'YUNDA\':\'32\',\n\'SF\':\'33\',\'SF\':\'34\',\'YUNDA\':\'35\',\'YTO\':\'36\',\'TTKDEX\':\'37\',\'YTO\':\'4\',\'TTKDEX\':\'5\',\n\'YUNDA\':\'8\',\'ZTO\':\'9\'}\n            order_info={}\n            for k,v in vars.items():\n                if k==\'app_key\':\n                    continue\n                elif k==\'status\':\n                    order_info[\'order_status\']=v\n                elif k==\'orderId\':\n                    order_info[\'orderId\']=v.replace(\'TC\',\'\')\n                else:\n                    order_info[k]=v\n            db.WuLiuInfo.update_or_insert(db.WuLiuInfo.orderId==order_info[\'orderId\'],**order_info)\n            trade_exist=db(db.trade.out_tid.like(order_info[\'orderId\'])).select()\n            if not order_info[\'orderId\'].startswith(\'TT\'):\n                if trade_exist:\n                    WuLiu_info={"order_id": order_info[\'orderId\'],\n\t                "tracking_number":order_info[\'trackingNo\']}\n                    if order_info[\'logisticCompany\'] in WuLiu_dict.keys():\n                        WuLiu_info["tracking_company"]=str(WuLiu_dict[order_info[\'logisticCompany\']])\n                        result=updateOTI(WuLiu_info)\n                        if result[\'result\']==\'true\':\n                            content[\'isSuccess\']=True\n                            content[\'errorCode\']=1\n                            content[\'errorMsg\']=\'\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x90\xe5\x8a\x9f\'\n                        else:\n                            if result[\'error\']==\'1032\':\n                                content[\'isSuccess\']=True\n                                content[\'errorCode\']=1\n                                content[\'errorMsg\']=\'\xe5\xa4\x84\xe7\x90\x86\xe6\x88\x90\xe5\x8a\x9f\'\n                            else:\n                                content[\'isSuccess\']=False\n                                content[\'errorCode\']=2\n                                content[\'errorMsg\']=\'\xe8\xae\xa2\xe5\x8d\x95\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\'\n                    else:\n                        content[\'isSuccess\']=False\n                        content[\'errorCode\']=5\n                        content[\'errorMsg\']=\'\xe7\x89\xa9\xe6\xb5\x81\xe5\x85\xac\xe5\x8f\xb8\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\'\n                    trade_exist.first().update_record(oti_return=content[\'errorCode\'])\n                else:\n                    content[\'isSuccess\']=True\n                    content[\'errorCode\']=1\n                    content[\'errorMsg\']=\'\xe7\x89\xa9\xe6\xb5\x81\xe4\xbf\xa1\xe6\x81\xaf\xe5\xb7\xb2\xe4\xbf\x9d\xe5\xad\x98\'\n            else:\n                content[\'isSuccess\']=True\n                content[\'errorCode\']=1\n                content[\'errorMsg\']=\'\xe7\x89\xa9\xe6\xb5\x81\xe4\xbf\xa1\xe6\x81\xaf\xe5\xb7\xb2\xe4\xbf\x9d\xe5\xad\x98\'\n        else:\n            content[\'isSuccess\']=False\n            content[\'errorCode\']=9\n            content[\'wrong_reason\']=\'\xe8\xae\xa2\xe5\x8d\x95\xe5\x8f\xb7\xe6\xa0\xbc\xe5\xbc\x8f\xe9\x94\x99\xe8\xaf\xaf\'\n        return content\n    return locals()\n\n#@auth.requires_login()\n#@request.restful()\ndef TradeGet():\n    response.view =\'generic.\'+request.extension  #return  json\n    def GET(*args,**vars):\n        patterns=[\n            "/products[db_map]",\n            "/productid/{db_map.id}",\n            "/product_exid/{db_map.field_order}",\n            "/product/{custom_order.user_name.startswith}",\n            "/product/{custom_order.user_name}/:field",\n            "/trades[trade]",\n            "/tradeTid/{trade.tid}",\n            "/tradeOut/{trade.out_tid}"\n        ]\n        #patterns = \'auto\'\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    return locals()\n\n#@request.restful()\ndef TradeUpdate():\n    response.view =\'generic.\'+request.extension  #return  json\n    def PUT(table_name,record_id,**vars):\n        return db(db[table_name].order_id==record_id).update(**vars)\n    return locals()\n\n#@request.restful()\ndef TradeDelete():\n    response.view =\'generic.\'+request.extension  #return  json\n    def DELETE(table_name,record_id):\n        return db(db[table_name].order_id==record_id).delete()\n    return locals()\n\nif __name__=="__main__":\n    test_TOS()\n\nresponse._vars=response._caller(AddTradeToEdb)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'pymysql.err'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of InternalError object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of InternalError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of InternalError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of InternalError object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'__init__'
p26
S"<method-wrapper '__init__' of InternalError object>"
p27
sS'__setattr__'
p28
S"<method-wrapper '__setattr__' of InternalError object>"
p29
sS'__reduce_ex__'
p30
S'<built-in method __reduce_ex__ of InternalError object>'
p31
sS'__new__'
p32
S'<built-in method __new__ of type object>'
p33
sS'__format__'
p34
S'<built-in method __format__ of InternalError object>'
p35
sS'__class__'
p36
S"<class 'pymysql.err.InternalError'>"
p37
sS'__doc__'
p38
S"'Exception raised when the database encounters an...anymore, the transaction is\\n    out of sync, etc.'"
p39
sS'__getitem__'
p40
S"<method-wrapper '__getitem__' of InternalError object>"
p41
sS'__setstate__'
p42
S'<built-in method __setstate__ of InternalError object>'
p43
sS'__getattribute__'
p44
S"<method-wrapper '__getattribute__' of InternalError object>"
p45
sS'args'
p46
S'(1054, u"Unknown column \'trade.wrong_reason\' in \'field list\'")'
p47
sS'__subclasshook__'
p48
S'<built-in method __subclasshook__ of type object>'
p49
sS'__unicode__'
p50
S'<built-in method __unicode__ of InternalError object>'
p51
sS'__delattr__'
p52
S"<method-wrapper '__delattr__' of InternalError object>"
p53
sS'__repr__'
p54
S"<method-wrapper '__repr__' of InternalError object>"
p55
sS'__hash__'
p56
S"<method-wrapper '__hash__' of InternalError object>"
p57
ssS'evalue'
p58
S'(1054, u"Unknown column \'trade.wrong_reason\' in \'field list\'")'
p59
sS'request'
p60
cgluon.html
XML_unpickle
p61
(S's`I\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>trade</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>122.193.31.14</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>TtApi</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_pampers1</td><td style="vertical-align:top;">:</td><td><div>122.193.31.14-ea947dc6-3299-451b-9534-7198ca55552f<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>1165</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>application/json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">DOCUMENT_ROOT</td><td style="vertical-align:top;">:</td><td><div>/usr/share/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>Keep-Alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>1165</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TRANSFER_ENCODING</td><td style="vertical-align:top;">:</td><td><div>base64</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>application/json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_pampers1=122.193.31.14-ea947dc6-3299-451b-9534-7198ca55552f</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE2</td><td style="vertical-align:top;">:</td><td><div>$Version=1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Apache-HttpClient/4.3.6 (java 1.5)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/AddTradeToEdb/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>122.193.31.14</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>7479</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_URI</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/AddTradeToEdb/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>nginx/1.4.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">UWSGI_SCHEME</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/www-data/web2py/applications/welcome/&#x27;, &#x27;/home/www-data/web2py/applications/pampers1/&#x27;, &#x27;/home/www-data/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div>1165</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div>application/json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">document_root</td><td style="vertical-align:top;">:</td><td><div>/usr/share/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>Keep-Alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_length</td><td style="vertical-align:top;">:</td><td><div>1165</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_transfer_encoding</td><td style="vertical-align:top;">:</td><td><div>base64</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_type</td><td style="vertical-align:top;">:</td><td><div>application/json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_pampers1=122.193.31.14-ea947dc6-3299-451b-9534-7198ca55552f</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie2</td><td style="vertical-align:top;">:</td><td><div>$Version=1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Apache-HttpClient/4.3.6 (java 1.5)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td><div>10.172.40.151</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>120.76.79.181</div></td></tr><tr><td><div>int.taotonggroup.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/AddTradeToEdb/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>122.193.31.14</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>7479</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/AddTradeToEdb/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>nginx/1.4.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.node</td><td style="vertical-align:top;">:</td><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.version</td><td style="vertical-align:top;">:</td><td><div>2.0.12</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_node</td><td style="vertical-align:top;">:</td><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_version</td><td style="vertical-align:top;">:</td><td><div>2.0.12</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;wsgi_errors&#x27;, mode &#x27;w&#x27; at 0x7f3f19f84c90&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f3f191e0690&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;wsgi_errors&#x27;, mode &#x27;w&#x27; at 0x7f3f19f84c90&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f3f191e0690&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py/applications/pampers1/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>AddTradeToEdb</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/www-data/web2py/applications/welcome/&#x27;, &#x27;/home/www-data/web2py/applications/pampers1/&#x27;, &#x27;/home/www-data/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>iZ94xhl4hr8Z</div></td></tr><tr><td><div>10.172.40.151</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>120.76.79.181</div></td></tr><tr><td><div>int.taotonggroup.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.4-stable+timestamp.2015.12.26.04.59.39</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 4, 25, 13, 40, 16, 437851)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/pampers1/TtApi/AddTradeToEdb/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 4, 25, 5, 40, 16, 437917)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7f3f18e597d0&gt;</div></td></tr></table></div>'
tRp62
sS'frames'
p63
(lp64
(dp65
S'file'
p66
S'/home/www-data/web2py/gluon/restricted.py'
p67
sS'dump'
p68
(dp69
S'environment'
p70
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AddTrade': <function __EdbAPI>, 'AddTradeToEdb': <function AddTradeToEdb>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, ...}"
p71
sS'ccode'
p72
S'<code object <module> at 0x7f3f1915fd30, file "/...lications/pampers1/controllers/TtApi.py", line 1>'
p73
ssS'lnum'
p74
I227
sS'lines'
p75
(dp76
I224
S'            ccode = code'
p77
sI225
S'        else:'
p78
sI226
S'            ccode = compile2(code, layer)'
p79
sI227
S'        exec ccode in environment'
p80
sI228
S'    except HTTP:'
p81
sI229
S'        raise'
p82
sI230
S'    except RestrictedError:'
p83
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p84
sI222
S'    try:'
p85
sI223
S'        if isinstance(code, types.CodeType):'
p86
ssS'call'
p87
S'(code="__author__ = \'Administrator\'\\nfrom simhash import...\\n\\nresponse._vars=response._caller(AddTradeToEdb)\\n", environment={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'AddTrade\': <function __EdbAPI>, \'AddTradeToEdb\': <function AddTradeToEdb>, \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, ...}, layer=\'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py\')'
p88
sS'func'
p89
S'restricted'
p90
sa(dp91
g66
S'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py'
p92
sg68
(dp93
sg74
I488
sg75
(dp94
I480
S"    response.view ='generic.'+request.extension  #return  json"
p95
sI481
S'    def DELETE(table_name,record_id):'
p96
sI482
S'        return db(db[table_name].order_id==record_id).delete()'
p97
sI483
S'    return locals()'
p98
sI484
S''
sI485
S'if __name__=="__main__":'
p99
sI486
S'    test_TOS()'
p100
sI477
S''
sI478
S'#@request.restful()'
p101
sI479
S'def TradeDelete():'
p102
ssg87
S'()'
p103
sg89
S'<module>'
p104
sa(dp105
g66
S'/home/www-data/web2py/gluon/globals.py'
p106
sg68
(dp107
S'self'
p108
S'undefined'
p109
sS'f'
S'<function AddTradeToEdb>'
p110
ssg74
I412
sg75
(dp111
I416
S"        self.generic_patterns = ['*']"
p112
sI407
S"        self.flash = ''            # used by the default view layout"
p113
sI408
S'        self.meta = Storage()      # used by web2py_ajax.html'
p114
sI409
S'        self.menu = []             # used by the default view layout'
p115
sI410
S'        self.files = []            # used by web2py_ajax.html'
p116
sI411
S'        self._vars = None'
p117
sI412
S'        self._caller = lambda f: f()'
p118
sI413
S'        self._view_environment = None'
p119
sI414
S'        self._custom_commit = None'
p120
sI415
S'        self._custom_rollback = None'
p121
ssg87
S'(f=<function AddTradeToEdb>)'
p122
sg89
S'<lambda>'
p123
sa(dp124
g66
S'/home/www-data/web2py/gluon/globals.py'
p125
sg68
(dp126
S'rest_action'
p127
S'<function POST>'
p128
sS'_self'
p129
S"<Storage {'_vars': <Storage {u'apiKey': u'A6BEA5... '/home/www-data/web2py/applications/pampers1/'}>"
p130
sS'_self.args'
p131
S"['trade']"
p132
sS'builtingetattr'
p133
S'<built-in function getattr>'
p134
ssg74
I378
sg75
(dp135
I373
S'                rest_action = _action().get(method, None)'
p136
sI374
S'                if not (rest_action and method == method.upper()'
p137
sI375
S'                        and callable(rest_action)):'
p138
sI376
S'                    raise HTTP(405, "method not allowed")'
p139
sI377
S'                try:'
p140
sI378
S"                    return rest_action(*_self.args, **getattr(_self, 'vars', {}))"
p141
sI379
S'                except TypeError, e:'
p142
sI380
S'                    exc_type, exc_value, exc_traceback = sys.exc_info()'
p143
sI381
S'                    if len(traceback.extract_tb(exc_traceback)) == 1:'
p144
sI382
S'                        raise HTTP(400, "invalid arguments")'
p145
ssg87
S"(_action=<function AddTradeToEdb>, _self=<Storage {'_vars': <Storage {u'apiKey': u'A6BEA5... '/home/www-data/web2py/applications/pampers1/'}>, *a=(), **b={})"
p146
sg89
S'f'
sa(dp147
g66
S'/home/www-data/web2py/applications/pampers1/controllers/TtApi.py'
p148
sg68
(dp149
S').select'
p150
g109
sS'db.trade.out_tid'
p151
S'<pydal.objects.Field object>'
p152
sS'edbdata'
p153
S"{u'actual_RP': u'', u'actual_freight_get': u'', u'address': u'\\u4e91\\u5357 \\u6606\\u660e\\u5e02 \\u897f\\u5c71\\u...\\u798f\\u6e90\\u5c0f\\u533a12\\u680b1\\u5355\\u5143501', u'area': u'\\u897f\\u5c71\\u533a', u'barCode': u'6903148238912', u'buyer_alipay': u'', u'buyer_email': u'', u'buyer_id': u'', u'city': u'\\u6606\\u660e\\u5e02', u'consignee': u'\\u5218\\u98de', ...}"
p154
sS't'
g109
sS'db.trade'
p155
S'<Table trade (id,tid,out_tid,shop_id,storage_id,...us,tc_return,edb_return,oti_return,wrong_reason)>'
p156
sS'global db'
p157
S'<DAL uri="mysql:******@localhost/taotongdb">'
p158
ssg74
I360
sg75
(dp159
I355
S"            this_sig=MD5Sign((SigStr[0:len(SigStr)-1]+this_apiSecret).encode('utf8'))"
p160
sI356
S'            #AllBarcode=db().select(db.AllBarcode.bar_code).as_list()'
p161
sI357
S"            if (vars['sig']==this_sig) and (ts-int(vars['timestamp'])<180) and \\"
p162
sI358
S"            ((vars['apiKey']).decode('unicode_escape')==(this_apiKey)):"
p163
sI359
S"                #getorderid=db.trade.update_or_insert(db.trade.out_tid==edbdata['out_tid'],**edbdata)"
p164
sI360
S"                t=db(db.trade.out_tid==edbdata['out_tid']).select()"
p165
sI361
S'                if t:'
p166
sI362
S"                    msg.append({'is_success':'true','response_Msg':'duplicate trade'})"
p167
sI363
S'                    t.first().update_record(**edbdata)'
p168
sI364
S'                else:'
p169
ssg87
S"(tablename='trade', **vars={u'actual_RP': u'', u'actual_freight_get': u'', u'address': u'\\u4e91\\u5357 \\u6606\\u660e\\u5e02 \\u897f\\u5c71\\u...\\u798f\\u6e90\\u5c0f\\u533a12\\u680b1\\u5355\\u5143501', u'apiKey': u'A6BEA59B', u'area': u'\\u897f\\u5c71\\u533a', u'buyer_alipay': u'', u'buyer_email': u'', u'buyer_id': u'', u'city': u'\\u6606\\u660e\\u5e02', u'consignee': u'\\u5218\\u98de', ...})"
p170
sg89
S'POST'
p171
sa(dp172
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/objects.py'
p173
sg68
(dp174
S'self.query'
p175
S"<Query (trade.out_tid = '1326507')>"
p176
sS'adapter.select'
p177
S'<bound method MySQLAdapter.select of <pydal.adapters.mysql.MySQLAdapter object>>'
p178
sS'fields'
p179
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...]'
p180
sS'adapter'
p181
S'<pydal.adapters.mysql.MySQLAdapter object>'
p182
sS'attributes'
p183
g21
sS'self'
p184
S"<Set (trade.out_tid = '1326507')>"
p185
ssg74
I2025
sg75
(dp186
I2020
S"                                    attributes.get('join',None),"
p187
sI2021
S"                                    attributes.get('left',None),"
p188
sI2022
S"                                    attributes.get('orderby',None),"
p189
sI2023
S"                                    attributes.get('groupby',None))"
p190
sI2024
S'        fields = adapter.expand_all(fields, tablenames)'
p191
sI2025
S'        return adapter.select(self.query,fields,attributes)'
p192
sI2026
S''
sI2027
S'    def iterselect(self, *fields, **attributes):'
p193
sI2028
S'        adapter = self.db._adapter'
p194
sI2029
S'        tablenames = adapter.tables(self.query,'
p195
ssg87
S"(self=<Set (trade.out_tid = '1326507')>, *fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...], **attributes={})"
p196
sg89
S'select'
p197
sa(dp198
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p199
sg68
(dp200
S'fields'
p201
S'[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...]'
p202
sS'self'
p203
S'<pydal.adapters.mysql.MySQLAdapter object>'
p204
sS'attributes'
p205
g21
sS'self._select_aux'
p206
S'<bound method MySQLAdapter._select_aux of <pydal.adapters.mysql.MySQLAdapter object>>'
p207
sS'sql'
p208
S'"SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');"'
p209
ssg74
I1293
sg75
(dp210
I1288
S'            return cache_model('
p211
sI1289
S'                key,'
p212
sI1290
S'                lambda self=self,args=args:self._select_aux(*args),'
p213
sI1291
S'                time_expire)'
p214
sI1292
S'        else:'
p215
sI1293
S'            return self._select_aux(sql,fields,attributes)'
p216
sI1294
S''
sI1295
S'    def iterselect(self, query, fields, attributes):'
p217
sI1296
S'        sql = self._select(query, fields, attributes)'
p218
sI1297
S"        cacheable = attributes.get('cacheable', False)"
p219
ssg87
S"(self=<pydal.adapters.mysql.MySQLAdapter object>, query=<Query (trade.out_tid = '1326507')>, fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...], attributes={})"
p220
sg89
g197
sa(dp221
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p222
sg68
(dp223
S'self'
p224
S'<pydal.adapters.mysql.MySQLAdapter object>'
p225
sS'self.execute'
p226
S'<bound method MySQLAdapter.execute of <pydal.adapters.mysql.MySQLAdapter object>>'
p227
sS'sql'
p228
S'"SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');"'
p229
ssg74
I1250
sg75
(dp230
I1248
S"        cache = args_get('cache',None)"
p231
sI1249
S'        if not cache:'
p232
sI1250
S'            self.execute(sql)'
p233
sI1251
S'            rows = self._fetchall()'
p234
sI1252
S'        else:'
p235
sI1253
S'            if isinstance(cache, dict):'
p236
sI1254
S"                cache_model = cache['model']"
p237
sI1245
S''
sI1246
S'    def _select_aux(self, sql, fields, attributes):'
p238
sI1247
S'        args_get = attributes.get'
p239
ssg87
S'(self=<pydal.adapters.mysql.MySQLAdapter object>, sql="SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');", fields=[<pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, <pydal.objects.Field object>, ...], attributes={})'
p240
sg89
S'_select_aux'
p241
sa(dp242
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p243
sg68
(dp244
S'a'
S'("SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');",)'
p245
sS'self'
p246
S'<pydal.adapters.mysql.MySQLAdapter object>'
p247
sS'b'
g21
sS'self.log_execute'
p248
S'<bound method MySQLAdapter.log_execute of <pydal.adapters.mysql.MySQLAdapter object>>'
p249
ssg74
I1385
sg75
(dp250
I1380
S'        self.db._timings.append((command,time.time()-t0))'
p251
sI1381
S'        del self.db._timings[:-TIMINGSSIZE]'
p252
sI1382
S'        return ret'
p253
sI1383
S''
sI1384
S'    def execute(self, *a, **b):'
p254
sI1385
S'        return self.log_execute(*a, **b)'
p255
sI1386
S''
sI1387
S'    def execute_test_query(self):'
p256
sI1388
S'        return self.execute(self.test_query)'
p257
sI1389
S''
ssg87
S'(self=<pydal.adapters.mysql.MySQLAdapter object>, *a=("SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');",), **b={})'
p258
sg89
S'execute'
p259
sa(dp260
g66
S'/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py'
p261
sg68
(dp262
S'a'
S'("SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');",)'
p263
sS'b'
g21
sS'self'
p264
S'<pydal.adapters.mysql.MySQLAdapter object>'
p265
sS'ret'
p266
g109
sS'command'
p267
S'"SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');"'
p268
sS'self.get_cursor'
p269
S'<bound method MySQLAdapter.get_cursor of <pydal.adapters.mysql.MySQLAdapter object>>'
p270
sS').execute'
p271
g109
ssg74
I1379
sg75
(dp272
I1376
S"            self.db.logger.debug('SQL: %s' % command)"
p273
sI1377
S'        self.db._lastsql = command'
p274
sI1378
S'        t0 = time.time()'
p275
sI1379
S'        ret = self.get_cursor().execute(command, *a[1:], **b)'
p276
sI1380
S'        self.db._timings.append((command,time.time()-t0))'
p277
sI1381
S'        del self.db._timings[:-TIMINGSSIZE]'
p278
sI1382
S'        return ret'
p279
sI1383
S''
sI1374
S'            command = self.filter_sql_command(command)'
p280
sI1375
S'        if self.db._debug:'
p281
ssg87
S'(self=<pydal.adapters.mysql.MySQLAdapter object>, *a=("SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');",), **b={})'
p282
sg89
S'log_execute'
p283
sa(dp284
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py'
p285
sg68
(dp286
S'query'
p287
S'"SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');"'
p288
sS'self'
p289
S'<pymysql.cursors.Cursor object>'
p290
sS'result'
p291
g109
sS'self._query'
p292
S'<bound method Cursor._query of <pymysql.cursors.Cursor object>>'
p293
ssg74
I146
sg75
(dp294
I141
S'        while self.nextset():'
p295
sI142
S'            pass'
p296
sI143
S''
sI144
S'        query = self.mogrify(query, args)'
p297
sI145
S''
sI146
S'        result = self._query(query)'
p298
sI147
S'        self._executed = query'
p299
sI148
S'        return result'
p300
sI149
S''
sI150
S'    def executemany(self, query, args):'
p301
ssg87
S'(self=<pymysql.cursors.Cursor object>, query="SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');", args=None)'
p302
sg89
g259
sa(dp303
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py'
p304
sg68
(dp305
S'q'
S'"SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');"'
p306
sS'conn.query'
p307
S'<bound method Connection.query of <pymysql.connections.Connection object>>'
p308
sS'conn'
p309
S'<pymysql.connections.Connection object>'
p310
ssg74
I296
sg75
(dp311
I291
S'        self.rownumber = r'
p312
sI292
S''
sI293
S'    def _query(self, q):'
p313
sI294
S'        conn = self._get_db()'
p314
sI295
S'        self._last_executed = q'
p315
sI296
S'        conn.query(q)'
p316
sI297
S'        self._do_get_result()'
p317
sI298
S'        return self.rowcount'
p318
sI299
S''
sI300
S'    def _do_get_result(self):'
p319
ssg87
S'(self=<pymysql.cursors.Cursor object>, q="SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');")'
p320
sg89
S'_query'
p321
sa(dp322
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p323
sg68
(dp324
S'self._read_query_result'
p325
S'<bound method Connection._read_query_result of <pymysql.connections.Connection object>>'
p326
sS'self'
p327
S'<pymysql.connections.Connection object>'
p328
sS'unbuffered'
p329
S'False'
p330
sS'self._affected_rows'
p331
S'0'
ssg74
I819
sg75
(dp332
I814
S'            if PY2:'
p333
sI815
S'                sql = sql.encode(self.encoding)'
p334
sI816
S'            else:'
p335
sI817
S"                sql = sql.encode(self.encoding, 'surrogateescape')"
p336
sI818
S'        self._execute_command(COMMAND.COM_QUERY, sql)'
p337
sI819
S'        self._affected_rows = self._read_query_result(unbuffered=unbuffered)'
p338
sI820
S'        return self._affected_rows'
p339
sI821
S''
sI822
S'    def next_result(self, unbuffered=False):'
p340
sI823
S'        self._affected_rows = self._read_query_result(unbuffered=unbuffered)'
p341
ssg87
S'(self=<pymysql.connections.Connection object>, sql="SELECT  trade.id, trade.tid, trade.out_tid, trad...son FROM trade WHERE (trade.out_tid = \'1326507\');", unbuffered=False)'
p342
sg89
S'query'
p343
sa(dp344
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p345
sg68
(dp346
S'result.read'
p347
S'<bound method MySQLResult.read of <pymysql.connections.MySQLResult object>>'
p348
sS'result'
p349
S'<pymysql.connections.MySQLResult object>'
p350
ssg74
I1001
sg75
(dp351
I996
S'                result.unbuffered_active = False'
p352
sI997
S'                result.connection = None'
p353
sI998
S'                raise'
p354
sI999
S'        else:'
p355
sI1000
S'            result = MySQLResult(self)'
p356
sI1001
S'            result.read()'
p357
sI1002
S'        self._result = result'
p358
sI1003
S'        if result.server_status is not None:'
p359
sI1004
S'            self.server_status = result.server_status'
p360
sI1005
S'        return result.affected_rows'
p361
ssg87
S'(self=<pymysql.connections.Connection object>, unbuffered=False)'
p362
sg89
S'_read_query_result'
p363
sa(dp364
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p365
sg68
(dp366
S'first_packet'
p367
g109
sS'self'
p368
S'<pymysql.connections.MySQLResult object>'
p369
sS'self.connection'
p370
S'None'
p371
sS'self.connection._read_packet'
p372
g109
ssg74
I1285
sg75
(dp373
I1280
S'        if self.unbuffered_active:'
p374
sI1281
S'            self._finish_unbuffered_query()'
p375
sI1282
S''
sI1283
S'    def read(self):'
p376
sI1284
S'        try:'
p377
sI1285
S'            first_packet = self.connection._read_packet()'
p378
sI1286
S''
sI1287
S'            if first_packet.is_ok_packet():'
p379
sI1288
S'                self._read_ok_packet(first_packet)'
p380
sI1289
S'            elif first_packet.is_load_local_packet():'
p381
ssg87
S'(self=<pymysql.connections.MySQLResult object>)'
p382
sg89
S'read'
p383
sa(dp384
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p385
sg68
(dp386
S'packet'
p387
S'<pymysql.connections.MysqlPacket object>'
p388
sS'packet.check_error'
p389
S'<bound method MysqlPacket.check_error of <pymysql.connections.MysqlPacket object>>'
p390
ssg74
I965
sg75
(dp391
I960
S'                continue'
p392
sI961
S'            if bytes_to_read < MAX_PACKET_LEN:'
p393
sI962
S'                break'
p394
sI963
S''
sI964
S'        packet = packet_type(buff, self.encoding)'
p395
sI965
S'        packet.check_error()'
p396
sI966
S'        return packet'
p397
sI967
S''
sI968
S'    def _read_bytes(self, num_bytes):'
p398
sI969
S'        while True:'
p399
ssg87
S"(self=<pymysql.connections.Connection object>, packet_type=<class 'pymysql.connections.MysqlPacket'>)"
p400
sg89
S'_read_packet'
p401
sa(dp402
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/connections.py'
p403
sg68
(dp404
S'self._data'
p405
S'"\\xff\\x1e\\x04#42S22Unknown column \'trade.wrong_reason\' in \'field list\'"'
p406
sS'self'
p407
S'<pymysql.connections.MysqlPacket object>'
p408
sS'global err'
p409
S"<module 'pymysql.err' from '/usr/local/lib/python2.7/dist-packages/pymysql/err.pyc'>"
p410
sS'err.raise_mysql_exception'
p411
S'<function raise_mysql_exception>'
p412
ssg74
I394
sg75
(dp413
I389
S'        if self.is_error_packet():'
p414
sI390
S'            self.rewind()'
p415
sI391
S'            self.advance(1)  # field_count == error (we already know that)'
p416
sI392
S'            errno = self.read_uint16()'
p417
sI393
S'            if DEBUG: print("errno =", errno)'
p418
sI394
S'            err.raise_mysql_exception(self._data)'
p419
sI395
S''
sI396
S'    def dump(self):'
p420
sI397
S'        dump_packet(self._data)'
p421
sI398
S''
ssg87
S'(self=<pymysql.connections.MysqlPacket object>)'
p422
sg89
S'check_error'
p423
sa(dp424
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/err.py'
p425
sg68
(dp426
S'global _check_mysql_exception'
p427
S'<function _check_mysql_exception>'
p428
sS'errinfo'
p429
S'(1054, u\'42S22\', u"Unknown column \'trade.wrong_reason\' in \'field list\'")'
p430
ssg74
I120
sg75
(dp431
I111
S'    if errorclass:'
p432
sI112
S'        raise errorclass(errno, errorvalue)'
p433
sI113
S''
sI114
S"    # couldn't find the right error number"
p434
sI115
S'    raise InternalError(errno, errorvalue)'
p435
sI116
S''
sI117
S''
sI118
S'def raise_mysql_exception(data):'
p436
sI119
S'    errinfo = _get_error_info(data)'
p437
sI120
S'    _check_mysql_exception(errinfo)'
p438
ssg87
S'(data="\\xff\\x1e\\x04#42S22Unknown column \'trade.wrong_reason\' in \'field list\'")'
p439
sg89
S'raise_mysql_exception'
p440
sa(dp441
g66
S'/usr/local/lib/python2.7/dist-packages/pymysql/err.py'
p442
sg68
(dp443
S'errno'
p444
S'1054'
p445
sS'global InternalError'
p446
S"<class 'pymysql.err.InternalError'>"
p447
sS'errorvalue'
p448
S'u"Unknown column \'trade.wrong_reason\' in \'field list\'"'
p449
ssg74
I115
sg75
(dp450
I110
S'    errorclass = error_map.get(errno, None)'
p451
sI111
S'    if errorclass:'
p452
sI112
S'        raise errorclass(errno, errorvalue)'
p453
sI113
S''
sI114
S"    # couldn't find the right error number"
p454
sI115
S'    raise InternalError(errno, errorvalue)'
p455
sI116
S''
sI117
S''
sI118
S'def raise_mysql_exception(data):'
p456
sI119
S'    errinfo = _get_error_info(data)'
p457
ssg87
S'(errinfo=(1054, u\'42S22\', u"Unknown column \'trade.wrong_reason\' in \'field list\'"))'
p458
sg89
S'_check_mysql_exception'
p459
sasS'pyver'
p460
S'Python 2.7.6: /usr/local/bin/uwsgi (prefix: /usr)'
p461
sS'session'
p462
g61
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp463
sS'etype'
p464
S"<class 'pymysql.err.InternalError'>"
p465
sS'date'
p466
S'Mon Apr 25 13:40:17 2016'
p467
sS'response'
p468
g61
(S's-?\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7f3f191624c8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_pampers1</td><td style="vertical-align:top;">:</td><td><div>122.193.31.14-f8844573-a0e6-4924-97eb-3e440f327432<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*.xml</div></td></tr><tr><td><div>*.json</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">Content-Type</td><td style="vertical-align:top;">:</td><td><div>application/json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/pampers1/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>My Sites</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>This App</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Design</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/pampers1</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Controller</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/controllers/TtApi.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>View</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/views/TtApi/AddTradeToEdb.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>DB Model</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/models/db.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Menu Model</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/models/menu.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Config.ini</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/private/appconfig.ini</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Layout</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/views/layout.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Stylesheet</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/static/css/web2py-bootstrap3.css</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Database</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/pampers1/appadmin/index</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Errors</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/errors/pampers1</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>About</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/about/pampers1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>web2py.com</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Download</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/download</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Support</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/support</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Demo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/demo_admin</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Quick Examples</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/examples/default/examples</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>FAQ</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/AlterEgo</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Videos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/videos/</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Free Applications</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/appliances</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/plugins</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2pyslices.com/</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Documentation</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Online book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Preface</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/00</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Introduction</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/01</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Python</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/02</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Overview</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/03</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>The Core</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/04</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>The Views</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/05</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Database</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/06</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Forms and Validators</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/07</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Email and SMS</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/08</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Access Control</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/09</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Services</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/10</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Ajax Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/11</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Components and Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/12</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Deployment Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/13</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Other Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/14</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Helping web2py</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/15</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Buy web2py\'s book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://stores.lulu.com/web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Community</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Groups</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/usergroups</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Twitter</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://twitter.com/web2py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Live Chat</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://webchat.freenode.net/?channels=web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^TtApi/\\w+\\.py$</div></td></tr><tr><td><div>^TtApi/AddTradeToEdb/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>122.193.31.14</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/www-data/web2py/applications/pampers1/sessions/122.193.31.14-f8844573-a0e6-4924-97eb-3e440f327432</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>c0762cbf4baf7f9af97c051e7fcb8083</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>122.193.31.14-f8844573-a0e6-4924-97eb-3e440f327432</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>generic.json</div></td></tr></table></div>'
tRp469
sS'locals'
p470
(dp471
S'errorclass'
p472
S'None'
p473
sS'errno'
p474
S'1054'
p475
sS'sqlstate'
p476
S"u'42S22'"
p477
sS'errinfo'
p478
S'(1054, u\'42S22\', u"Unknown column \'trade.wrong_reason\' in \'field list\'")'
p479
sS'errorvalue'
p480
S'u"Unknown column \'trade.wrong_reason\' in \'field list\'"'
p481
sssS'traceback'
p482
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/pampers1/controllers/TtApi.py", line 488, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/gluon/globals.py", line 378, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/www-data/web2py/applications/pampers1/controllers/TtApi.py", line 360, in POST\n    t=db(db.trade.out_tid==edbdata[\'out_tid\']).select()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1293, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1250, in _select_aux\n    self.execute(sql)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1385, in execute\n    return self.log_execute(*a, **b)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1379, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py", line 146, in execute\n    result = self._query(query)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/cursors.py", line 296, in _query\n    conn.query(q)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 819, in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 1001, in _read_query_result\n    result.read()\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 1285, in read\n    first_packet = self.connection._read_packet()\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 965, in _read_packet\n    packet.check_error()\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/connections.py", line 394, in check_error\n    err.raise_mysql_exception(self._data)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/err.py", line 120, in raise_mysql_exception\n    _check_mysql_exception(errinfo)\n  File "/usr/local/lib/python2.7/dist-packages/pymysql/err.py", line 115, in _check_mysql_exception\n    raise InternalError(errno, errorvalue)\nInternalError: (1054, u"Unknown column \'trade.wrong_reason\' in \'field list\'")\n'
p483
s.