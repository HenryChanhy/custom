(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'product_info'"
p3
sS'layer'
p4
S'/home/henry/prd_web2py/applications/pampers1/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n#\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n####rowcontent[\'mobile\'] in db().select(db.history_order.mobile)#########\n# #######################################################################\nimport re\nfrom simhash import Simhash,SimhashIndex\n\nimport openpyxl\n\nauth.settings.allow_basic_login = True\nauth.define_tables(username=True)\n\nprovinces=(u\'\xe5\x8c\x97\xe4\xba\xac\',u\'\xe5\xa4\xa9\xe6\xb4\xa5\',u\'\xe6\xb2\xb3\xe5\x8c\x97\',u\'\xe5\xb1\xb1\xe8\xa5\xbf\',u\'\xe5\x86\x85\xe8\x92\x99\xe5\x8f\xa4\',u\'\xe8\xbe\xbd\xe5\xae\x81\',u\'\xe5\x90\x89\xe6\x9e\x97\',u\'\xe9\xbb\x91\xe9\xbe\x99\xe6\xb1\x9f\',u\'\xe4\xb8\x8a\xe6\xb5\xb7\',u\'\xe6\xb1\x9f\xe8\x8b\x8f\',\n           u\'\xe6\xb5\x99\xe6\xb1\x9f\',u\'\xe5\xae\x89\xe5\xbe\xbd\',u\'\xe7\xa6\x8f\xe5\xbb\xba\',u\'\xe6\xb1\x9f\xe8\xa5\xbf\',u\'\xe5\xb1\xb1\xe4\xb8\x9c\',u\'\xe6\xb2\xb3\xe5\x8d\x97\',u\'\xe6\xb9\x96\xe5\x8c\x97\',u\'\xe6\xb9\x96\xe5\x8d\x97\',u\'\xe5\xb9\xbf\xe4\xb8\x9c\',u\'\xe5\xb9\xbf\xe8\xa5\xbf\',\n           u\'\xe6\xb5\xb7\xe5\x8d\x97\',u\'\xe9\x87\x8d\xe5\xba\x86\',u\'\xe5\x9b\x9b\xe5\xb7\x9d\',u\'\xe8\xb4\xb5\xe5\xb7\x9e\',u\'\xe4\xba\x91\xe5\x8d\x97\',u\'\xe8\xa5\xbf\xe8\x97\x8f\',u\'\xe9\x99\x95\xe8\xa5\xbf\',u\'\xe7\x94\x98\xe8\x82\x83\',u\'\xe9\x9d\x92\xe6\xb5\xb7\',u\'\xe5\xae\x81\xe5\xa4\x8f\',\n           u\'\xe6\x96\xb0\xe7\x96\x86\',u\'\xe9\xa6\x99\xe6\xb8\xaf\',u\'\xe6\xbe\xb3\xe9\x97\xa8\',u\'\xe5\x8f\xb0\xe6\xb9\xbe\')\nzhixia=(u\'\xe5\x8c\x97\xe4\xba\xac\',u\'\xe5\xa4\xa9\xe6\xb4\xa5\',u\'\xe9\x87\x8d\xe5\xba\x86\',u\'\xe4\xb8\x8a\xe6\xb5\xb7\')\ntexing=(u\'\xe9\xa6\x99\xe6\xb8\xaf\',u\'\xe6\xbe\xb3\xe9\x97\xa8\')\nSKU_dict={u\'589203710279202\':u\'18\xe7\x89\x87S\xe7\xa0\x81\',\nu\'690314820783301\':u\'18\xe7\x89\x87NB\xe7\xa0\x81\',\nu\'589203710279204\':u\'8\xe7\x89\x87S\xe7\xa0\x81\',\nu\'690314820785503\':u\'8\xe7\x89\x87NB\xe7\xa0\x81\'}\ntop4_city=(u\'\xe5\x8c\x97\xe4\xba\xac\xe5\xb8\x82\',u\'\xe6\x88\x90\xe9\x83\xbd\xe5\xb8\x82\',u\'\xe5\xb9\xbf\xe5\xb7\x9e\xe5\xb8\x82\',u\'\xe4\xb8\x8a\xe6\xb5\xb7\xe5\xb8\x82\')\nA_city=(u\'\xe5\x90\x88\xe8\x82\xa5\xe5\xb8\x82\',u\'\xe7\xa6\x8f\xe5\xb7\x9e\xe5\xb8\x82\',u\'\xe5\x85\xb0\xe5\xb7\x9e\xe5\xb8\x82\',u\'\xe6\xb7\xb1\xe5\x9c\xb3\xe5\xb8\x82\',\'\xe5\x8d\x97\xe5\xae\x81\xe5\xb8\x82\',u\'\xe8\xb4\xb5\xe9\x98\xb3\xe5\xb8\x82\',u\'\xe6\xb5\xb7\xe5\x8f\xa3\xe5\xb8\x82\',u\'\xe7\x9f\xb3\xe5\xae\xb6\xe5\xba\x84\xe5\xb8\x82\',\nu\'\xe9\x83\x91\xe5\xb7\x9e\xe5\xb8\x82\',u\'\xe5\x93\x88\xe5\xb0\x94\xe6\xbb\xa8\xe5\xb8\x82\',u\'\xe6\xad\xa6\xe6\xb1\x89\xe5\xb8\x82\',u\'\xe9\x95\xbf\xe6\xb2\x99\xe5\xb8\x82\',u\'\xe5\x8d\x97\xe4\xba\xac\xe5\xb8\x82\',u\'\xe5\xa4\xa7\xe8\xbf\x9e\xe5\xb8\x82\',u\'\xe6\xb2\x88\xe9\x98\xb3\xe5\xb8\x82\',u\'\xe5\x91\xbc\xe5\x92\x8c\xe6\xb5\xa9\xe7\x89\xb9\xe5\xb8\x82\',\nu\'\xe9\x93\xb6\xe5\xb7\x9d\xe5\xb8\x82\',u\'\xe8\xa5\xbf\xe5\xae\x81\xe5\xb8\x82\',u\'\xe6\xb5\x8e\xe5\x8d\x97\xe5\xb8\x82\',u\'\xe9\x9d\x92\xe5\xb2\x9b\xe5\xb8\x82\',u\'\xe5\xa4\xaa\xe5\x8e\x9f\xe5\xb8\x82\',u\'\xe8\xa5\xbf\xe5\xae\x89\xe5\xb8\x82\',u\'\xe5\xa4\xa9\xe6\xb4\xa5\xe5\xb8\x82\',u\'\xe6\x8b\x89\xe8\x90\xa8\xe5\xb8\x82\',u\'\xe6\x98\x86\xe6\x98\x8e\xe5\xb8\x82\',\nu\'\xe6\x9d\xad\xe5\xb7\x9e\xe5\xb8\x82\',u\'\xe9\x87\x8d\xe5\xba\x86\xe5\xb8\x82\')\n\ndef init_db():\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe8\xae\xa2\xe5\x8d\x95\xe7\xbc\x96\xe5\x8f\xb7\',field_id=\'order_id\',field_order=1)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe5\xba\x97\xe9\x93\xba\xe5\x90\x8d\xe7\xa7\xb0\',field_id=\'shop_name\',field_order=2)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe5\xa4\x96\xe9\x83\xa8\xe5\xb9\xb3\xe5\x8f\xb0\xe5\x8d\x95\xe5\x8f\xb7\',field_id=\'ex_id\',field_order=3)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe7\x94\xb5\xe8\xaf\x9d\',field_id=\'telephone\',field_order=4)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe6\x89\x8b\xe6\x9c\xba\',field_id=\'mobile\',field_order=5)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe6\x94\xb6\xe8\xb4\xa7\xe4\xba\xba\',field_id=\'user_name\',field_order=6)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe6\x94\xb6\xe8\xb4\xa7\xe7\x9c\x81\',field_id=\'province\',field_order=7)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe6\x94\xb6\xe8\xb4\xa7\xe5\xb8\x82\',field_id=\'city\',field_order=8)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe6\x94\xb6\xe8\xb4\xa7\xe5\x8e\xbf\',field_id=\'county\',field_order=9)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe6\x94\xb6\xe8\xb4\xa7\xe5\x9c\xb0\xe5\x9d\x80\',field_id=\'address\',field_order=10)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe4\xba\xa7\xe5\x93\x81\xe7\xbc\x96\xe5\x8f\xb7\',field_id=\'product_id\',field_order=11)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe6\x9d\xa1\xe5\xbd\xa2\xe7\xa0\x81\',field_id=\'barcode\',field_order=12)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe8\xa7\x84\xe6\xa0\xbc\',field_id=\'specification\',field_order=13)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe7\xbd\x91\xe5\xba\x97\xe5\x93\x81\xe5\x90\x8d\',field_id=\'ex_product_name\',field_order=14)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe4\xba\xa7\xe5\x93\x81\xe5\x90\x8d\xe7\xa7\xb0\',field_id=\'product_name\',field_order=15)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe8\xae\xa2\xe8\xb4\xa7\xe6\x95\xb0\xe9\x87\x8f\',field_id=\'order_num\',field_order=16)\n    db.db_map.insert(table_type=\'excel\',table_name=\'custom_order\',field_name=u\'\xe7\xbd\x91\xe5\xba\x97\xe8\xa7\x84\xe6\xa0\xbc\',field_id=\'ex_spec\',field_order=17)\n\ndef import_csv(csvfile):\n    db.custom_order.import_from_csv_file(csvfile)\n\ndef get_features(s):\n    return [s[i:i+3] for i in range(max(len(s)-3+1,1))]\n\'\'\'\n#s=Simhash(get_feature(ws.cell(row=rows,column=10).value,3))\nhistory_data=db().select(db.history_order.order_id,db.history_order.address).as_list()\naddr_obj=[(str(k),Simhash(get_feature(v,3))) for k, v in history_data]\nindex = SimhashIndex(addr_obj, k=3)\nor index.get_near_dups(s) is not None\nand\\(db.history_order.county==ws.cell(row=rows, column=9).value)\nrowcontent[\'relate_history_id\']=buf_list[i][\'order_id\']\nrowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9c\xb0\xe5\x9d\x80\xe7\xac\xac\'+str(buf_list[i][\'order_id\'])+u\'\xe5\x9c\xb0\xe5\x9d\x80\xe9\x87\x8d\xe5\xa4\x8d\'\nif rowcontent[\'mobile\'] in db().select(db.history_order.mobile) :\n            rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe9\x87\x8d\xe5\xa4\x8d\'\n            db.incorrect_data.insert(**rowcontent)\n        else:\n            rowcontent[\'product_tag\']=SKU_dict[ws.cell(row=rows,column=12).value]\n                s=s.lower()\n    s=re.sub(r\'[^\\w]+\',\'\',s)\n    db.custom_order.insert(**rowcontent)\xe5\x9b\x9e\xe6\x97\x8f|\xe5\xa3\xae\xe6\x97\x8f|\xe7\xbb\xb4\xe5\xb0\x94\xe5\x90\xbe\xe6\x97\x8f|\xe7\x89\xb9\xe5\x88\xab\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba|\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\n    &\\(re.match(\'\\d{0,2}\',db.history_order.product_name).group()==\\\n    str(ws1.cell(row=rows,column=10).value))\n        if not tablename==\'custom_order\': raise HTTP(400)\n        return dict(custom_order = db.custom_order(id))\ndef wrong_data():\n    response.title = \'wrong_data\'\n    response.view = \'plugin_sqleditable/sample.html\'\n    editable = SQLEDITABLE(db.wrong_order, showid=False, maxrow=29).process()\n    return dict(editable=editable)\n\'\'\'\n\n#@auth.requires_login()\ndef display_form():\n    grid = SQLFORM.grid(db.wrong_order,fields=\\\n        [db.wrong_order.order_id,db.wrong_order.ex_id,db.wrong_order.mobile,\n        db.wrong_order.user_name,db.wrong_order.province,db.wrong_order.city,\n        db.wrong_order.address,db.wrong_order.wrong_reason,db.wrong_order.dup_ID,\n        db.wrong_order.dup_ex,db.wrong_order.dup_address,db.wrong_order.dup_name,\n        db.wrong_order.dup_phone])\n    return locals()\n\ndef display_pampers_result():\n    grid = SQLFORM.grid(db.pampers_result)\n    return locals()\n\ndef display_pampers_order():\n    grid = SQLFORM.grid(db.pampers_order)\n    return locals()\n\ndef check_order():\n    orderList=db(db.wrong_order).select().as_list()\n    return locals()\n\ndef process_order():\n    Info=request.vars\n    order_id=Info["order_id"]\n    iFlag=Info["process_flag"]\n\'\'\'\ndef data_wrong():\n    form = SQLFORM(db.wrong_order)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\'\'\'\ndef import_excel(file):\n    WB=openpyxl.load_workbook(file)\n    WS=WB.active\n    return WS\n\ndef add_excel(ws):\n    field_list = db(db.db_map.table_name==\'custom_order\').select(db.db_map.field_name,db.db_map.field_id).as_list()\n    field_dict = {}\n    for fd in field_list:\n        field_dict[fd[\'field_name\'].decode("utf8")]=fd[\'field_id\']\n    header=[] #\xe8\xa1\xa8\xe5\xa4\xb4\n    for cols in range(1,ws.max_column+1):\n        header.append(field_dict[ws.cell(row=1,column=cols).value])\n    buf_list=[]\n    for rows in range(467,ws.max_row+1):\n        rowcontent={}\n        for cols in range(1,ws.max_column+1):\n            rowcontent[header[cols-1]]=ws.cell(row=rows, column=cols).value\n        rowcontent[\'address\']=rowcontent[\'address\'].replace(rowcontent[\'province\']+u\'\',\'\')\n        rowcontent[\'address\']=rowcontent[\'address\'].replace(u\'\'+rowcontent[\'city\'],\'\')\n        rowcontent[\'address\']=rowcontent[\'address\'].replace(rowcontent[\'county\']+u\'\',\'\')\n        if ws.cell(row=rows, column=9).value !=ws.cell(row=rows-1,column=9).value:\n            buf_list=db((db.history_order.province==ws.cell(row=rows, column=7).value)&\\\n                        (db.history_order.city==ws.cell(row=rows, column=8).value)&\\\n                        (db.history_order.county==ws.cell(row=rows, column=9).value)&\\\n                        (db.history_order.product_name==SKU_dict[ws.cell(row=rows,column=12).value])).select\\\n                (db.history_order.mobile,db.history_order.address_bak,db.history_order.order_id,\\\n                 db.history_order.ex_id,db.history_order.user_name).as_list()\n        is_correct=1\n        for i in range(0,len(buf_list)):\n            if rowcontent[\'mobile\']==buf_list[i][\'mobile\']:\n                is_correct=0\n                rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x8f\xb7\xe7\xa0\x81\xe7\xac\xac\'+str(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                rowcontent[\'dup_address\']=buf_list[i][\'address_bak\']\n                rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                db.wrong_order.insert(**rowcontent)\n                break\n            elif Simhash(get_feature(buf_list[i][\'address_bak\'].decode(\'UTF-8\'))).distance(Simhash(get_feature(u\'\'+rowcontent[\'address\'])))<18:\n                is_correct=0\n                rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9c\xb0\xe5\x9d\x80\xe7\xac\xac\'+str(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                rowcontent[\'dup_address\']=buf_list[i][\'address_bak\']\n                rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                db.wrong_order.insert(**rowcontent)\n                break\n            else:continue\n        if is_correct==1:\n            if rowcontent[\'user_name\']!= ws.cell(row=rows-1, column=6).value:\n                rowcontent[\'product_tag\']=SKU_dict[ws.cell(row=rows,column=12).value]\n                db.custom_order.insert(**rowcontent)\n    for rows in range(2,467):\n        rowcontent={}\n        for cols in range(1,6+1)+range(11,ws.max_column+1):\n            rowcontent[header[cols-1]]=ws.cell(row=rows, column=cols).value\n        for prov in provinces:\n            if prov in str(ws.cell(row=rows,column=10).value):\n                spare_addr=ws.cell(row=rows,column=10).value.replace(prov,\'\')\n                spare_addr=spare_addr.replace(u\'\xe7\x9c\x81\',\'\')\n                spare_addr=spare_addr.replace(u\'\xe5\xb8\x82\',\'\')\n                if prov in zhixia:\n                    rowcontent[header[6]]=prov+u\'\xe5\xb8\x82\'\n                elif prov in texing:\n                    rowcontent[header[6]]=prov+u\'\xe7\x89\xb9\xe5\x88\xab\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\'\n                elif prov==u\'\xe5\xb9\xbf\xe8\xa5\xbf\':\n                    rowcontent[header[6]]=prov+u\'\xe5\xa3\xae\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                elif prov==u\'\xe6\x96\xb0\xe7\x96\x86\':\n                    rowcontent[header[6]]=prov+u\'\xe7\xbb\xb4\xe5\x90\xbe\xe5\xb0\x94\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                elif prov==u\'\xe5\xae\x81\xe5\xa4\x8f\':\n                    rowcontent[header[6]]=prov+u\'\xe5\x9b\x9e\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                elif prov==u\'\xe8\xa5\xbf\xe8\x97\x8f\':\n                    rowcontent[header[6]]=prov+u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                elif prov==u\'\xe5\x86\x85\xe8\x92\x99\xe5\x8f\xa4\':\n                    rowcontent[header[6]]=prov+u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                else:\n                    rowcontent[header[6]]=prov+u\'\xe7\x9c\x81\'\n                break\n            else:\n                spare_addr=ws.cell(row=rows,column=10).value\n        addr2=re.split(u\'\xe5\xb8\x82|\xe8\x87\xaa\xe6\xb2\xbb\xe5\xb7\x9e\',spare_addr)\n        rowcontent[header[7]]=addr2[0]\n        spare_addr2=re.sub(addr2[0],\'\',spare_addr)\n        spare_addr2=re.sub(u\'\xe5\xb8\x82|\xe8\x87\xaa\xe6\xb2\xbb\xe5\xb7\x9e\',\'\',spare_addr2)\n\n        addr3=re.split(u\'\xe5\x8e\xbf|\xe5\x8c\xba\',spare_addr2)\n        rowcontent[header[8]]=addr3[0]+u\'(\xe5\x8e\xbf)\'\n        spare_addr3=re.sub(addr3[0],\'\',spare_addr2)\n        spare_addr3=re.sub(u\'\xe5\x8e\xbf|\xe5\x8c\xba\',\'\',spare_addr3)\n        rowcontent[header[9]]=spare_addr3\n        if (header[6] not in rowcontent):\n            db.address_lack.insert(**rowcontent)\n        else:\n            buf_list=db((rowcontent[header[6]]==db.history_order.province)&\\\n                        (db.history_order.product_name==SKU_dict[ws.cell(row=rows,column=12).value])).select\\\n                (db.history_order.mobile,db.history_order.address,db.history_order.order_id,\\\n                 db.history_order.ex_id,db.history_order.user_name).as_list()\n            is_correct=1\n            for i in range(0,len(buf_list)):\n                if rowcontent[\'mobile\']==buf_list[i][\'mobile\']:\n                    is_correct=0\n                    rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x8f\xb7\xe7\xa0\x81\xe7\xac\xac\'+str(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                    rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                    rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                    rowcontent[\'dup_address\']=buf_list[i][\'address\']\n                    rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                    rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                    db.wrong_order.insert(**rowcontent)\n                    break\n                elif Simhash(get_feature(buf_list[i][\'address\'])).distance(Simhash(get_feature(ws.cell(row=rows,column=10).value)))<24:\n                    is_correct=0\n                    rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9c\xb0\xe5\x9d\x80\xe7\xac\xac\'+str(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                    rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                    rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                    rowcontent[\'dup_address\']=buf_list[i][\'address\']\n                    rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                    rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                    db.wrong_order.insert(**rowcontent)\n                    break\n                else:continue\n            if is_correct==1:\n                if rowcontent[\'user_name\']!= ws.cell(row=rows-1, column=6).value:\n                    rowcontent[\'product_tag\']=SKU_dict[ws.cell(row=rows,column=12).value]\n                    db.custom_order.insert(**rowcontent)\n\n\npampers_dict={\'order_id\':\'A\',\'ex_id\':\'B\',\'user_name\':\'C\',\'mobile\':\'D\',\'province\':\'E\',\n              \'city\':\'F\',\'county\':\'G\',\'address\':\'H\',\'pregnancy\':\'I\',\'product_piece\':\'J\',\n              \'product_size\':\'K\',\'datetime\':\'L\'}\ndef add_pampers(ws1):\n    header=[\'order_id\',\'ex_id\',\'user_name\',\'mobile\',\'province\',\'city\',\'county\',\'address\',\n            \'pregnancy\',\'product_piece\',\'product_size\',\'date_time\']\n    for rows in range(650,ws1.max_row+1):\n        rowcontent={}\n        buf_list=[]\n        for cols in range(1,ws1.min_col+1):\n            rowcontent[header[cols-1]]=u\'\'+str(ws1.cell(row=rows,column=cols).value)\n        rowcontent[\'address\']=rowcontent[\'address\'].replace(rowcontent[\'province\'],\'\')\n        rowcontent[\'address\']=rowcontent[\'address\'].replace(rowcontent[\'city\'],\'\')\n        rowcontent[\'address\']=rowcontent[\'address\'].replace(rowcontent[\'county\'],\'\')\n        if ws1.cell(row=rows,column=7).value==ws1.cell(row=rows-1,column=7).value:\n            db.pampers_self_dup(**rowcontent)\n        elif not isinstance(rowcontent[\'address\'],str):\n            db.pampers_addr_lack.insert(**rowcontent)\n        else:\n            buf_list=db((db.history_order.province==ws1.cell(row=rows, column=5).value)&\\\n                        (db.history_order.city==ws1.cell(row=rows, column=6).value)&\\\n                        (db.history_order.county==ws1.cell(row=rows, column=7).value)).select\\\n                (db.history_order.mobile,db.history_order.address_bak,db.history_order.order_id,\n                 db.history_order.ex_id,db.history_order.user_name,db.history_order.product_name).as_list()\n        is_correct=1\n        for i in range(0,len(buf_list)):\n            if (buf_list[i][\'product_name\'].decode(\'utf8\')).startswith(str(rowcontent[\'product_piece\'])):\n                if rowcontent[\'mobile\']==buf_list[i][\'mobile\']:\n                    is_correct=0\n                    rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x8f\xb7\xe7\xa0\x81\xe7\xac\xac\'+str(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                    rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                    rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                    rowcontent[\'dup_address\']=buf_list[i][\'address_bak\']\n                    rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                    rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                    db.pampers_history_dup.insert(**rowcontent)\n                    break\n                elif Simhash(get_feature(str(buf_list[i][\'address_bak\']).decode(\'UTF-8\')))\\\n                        .distance(Simhash(get_feature(u\'\'+rowcontent[\'address\'])))<5:\n                    is_correct=0\n                    rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9c\xb0\xe5\x9d\x80\xe7\xac\xac\'+str(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                    rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                    rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                    rowcontent[\'dup_address\']=buf_list[i][\'address_bak\']\n                    rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                    rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                    db.pampers_history_dup.insert(**rowcontent)\n                    break\n                else:continue\n        if is_correct==1:\n            if rowcontent[\'user_name\'] ==ws1.cell(row=rows-1,column=3).value:\n                db.pampers_self_dup.insert(**rowcontent)\n            else:\n                if (rowcontent[\'county\'].endswith(u\'\xe5\x8e\xbf\'))or\\\n                (rowcontent[\'county\']==u\'\xe6\xb8\x85\xe6\x96\xb0\xe5\x8c\xba\')or\\\n                (rowcontent[\'county\']==u\'\xe4\xbc\x8a\xe5\xae\x81\xe5\xb8\x82\')or\\\n                (rowcontent[\'county\']==u\'\xe4\xb8\x87\xe5\xb1\xb1\xe5\x8c\xba\')or\\\n                (rowcontent[\'county\']==u\'\xe5\x85\xad\xe6\x9e\x9d\xe7\x89\xb9\xe5\x8c\xba\'):\n                    if((u\'\xe6\x9d\x91\'in rowcontent[\'address\'])and(u\'\xe4\xb9\xa1\xe6\x9d\x91\'not in rowcontent[\'address\']))or\\\n                    ((u\'\xe4\xb9\xa1\'in rowcontent[\'address\'])and(u\'\xe4\xb9\xa1\xe6\x9d\x91\'not in rowcontent[\'address\']))or\\\n                    ((u\'\xe9\x95\x87\'in rowcontent[\'address\'])and(u\'\xe5\xb0\x8f\xe9\x95\x87\'not in rowcontent[\'address\'])):\n                        rowcontent[\'class_city\']=\'village\'\n                    else:\n                        rowcontent[\'class_city\']=\'D\'\n                elif (rowcontent[\'county\'].endswith(u\'\xe5\xb8\x82\'))and\\\n                    (rowcontent[\'county\']!=u\'\xe5\xb7\xa2\xe6\xb9\x96\xe5\xb8\x82\')and\\\n                    (rowcontent[\'county\']!=u\'\xe6\xaf\x95\xe8\x8a\x82\xe5\xb8\x82\'):\n                    rowcontent[\'class_city\']=\'C\'\n                elif (rowcontent[\'city\'] in top4_city):\n                    rowcontent[\'class_city\']=\'Top4\'\n                elif(rowcontent[\'city\'] in A_city):\n                    rowcontent[\'class_city\']=\'A\'\n                else:\n                    rowcontent[\'class_city\']=\'B\'\n                db.pampers_order.insert(**rowcontent)\n\n    for rows in range(1,647):\n        rowcontent={}\n        for cols in range(1,ws1.max_column+1):\n            rowcontent[header[cols-1]]=ws1.cell(row=rows,column=cols).value\n        is_addr_complete=1\n        flag=0\n        for prov in provinces:\n            if prov in unicode(ws1.cell(row=rows,column=8).value):\n                flag=1\n                spare_addr0=ws1.cell(row=rows,column=8).value.replace(prov,\'\')\n                spare_addr0=spare_addr0.replace(u\'\xe7\x9c\x81\',\'\')\n                if prov in zhixia:\n                    rowcontent[header[4]]=prov\n                    rowcontent[header[5]]=prov+u\'\xe5\xb8\x82\'\n                    spare_addr1=spare_addr0[spare_addr0.find(u\'\xe5\xb8\x82\')+1:]\n                elif prov in texing:\n                    rowcontent[header[4]]=prov+u\'\xe7\x89\xb9\xe5\x88\xab\xe8\xa1\x8c\xe6\x94\xbf\xe5\x8c\xba\'\n                elif prov==u\'\xe5\xb9\xbf\xe8\xa5\xbf\':\n                    rowcontent[header[4]]=prov+u\'\xe5\xa3\xae\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                    spare_addr1=spare_addr0.replace(u\'\xe5\xa3\xae\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',\'\')\n                elif prov==u\'\xe6\x96\xb0\xe7\x96\x86\':\n                    rowcontent[header[4]]=prov+u\'\xe7\xbb\xb4\xe5\x90\xbe\xe5\xb0\x94\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                    spare_addr1=spare_addr0.replace(u\'\xe7\xbb\xb4\xe5\x90\xbe\xe5\xb0\x94\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',\'\')\n                elif prov==u\'\xe5\xae\x81\xe5\xa4\x8f\':\n                    rowcontent[header[4]]=prov+u\'\xe5\x9b\x9e\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                    spare_addr1=spare_addr0.replace(u\'\xe5\x9b\x9e\xe6\x97\x8f\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',\'\')\n                elif prov==u\'\xe8\xa5\xbf\xe8\x97\x8f\':\n                    rowcontent[header[4]]=prov+u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                    spare_addr1=spare_addr0.replace(u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',\'\')\n                elif prov==u\'\xe5\x86\x85\xe8\x92\x99\xe5\x8f\xa4\':\n                    rowcontent[header[4]]=prov+u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\'\n                    spare_addr1=spare_addr0.replace(u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\x8c\xba\',\'\')\n                else:\n                    rowcontent[header[4]]=prov+u\'\xe7\x9c\x81\'\n                    spare_addr1=spare_addr0[spare_addr0.find(u\'\xe7\x9c\x81\')+1:]\n                break\n        if flag==0:\n            is_addr_complete=0\n            spare_addr1=ws1.cell(row=rows,column=8).value\n        if (u\'\xe5\xb8\x82\'in spare_addr1):\n            addr2=spare_addr1[0:spare_addr1.find(u\'\xe5\xb8\x82\')+1]\n            spare_addr2=spare_addr1[spare_addr1.find(u\'\xe5\xb8\x82\')+1:]\n            rowcontent[header[5]]=addr2\n        elif u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\xb7\x9e\'in spare_addr1:\n            addr2=spare_addr1[0:spare_addr1.find(u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\xb7\x9e\')+3]\n            spare_addr2=spare_addr1[spare_addr1.find(u\'\xe8\x87\xaa\xe6\xb2\xbb\xe5\xb7\x9e\')+3:]\n            rowcontent[header[5]]=addr2\n        elif u\'\xe5\x9c\xb0\xe5\x8c\xba\'in spare_addr1:\n            addr2=spare_addr1[0:spare_addr1.find(u\'\xe5\x9c\xb0\xe5\x8c\xba\')+2]\n            spare_addr2=spare_addr1[spare_addr1.find(u\'\xe5\x9c\xb0\xe5\x8c\xba\')+2:]\n            rowcontent[header[5]]=addr2\n        elif u\'\xe7\x9b\x9f\'in spare_addr1:\n            addr2=spare_addr1[0:spare_addr1.find(u\'\xe7\x9b\x9f\')+1]\n            spare_addr2=spare_addr1[spare_addr1.find(u\'\xe7\x9b\x9f\')+1:]\n            rowcontent[header[5]]=addr2\n        else:\n            spare_addr2=spare_addr1\n            if rowcontent[header[4]] not in zhixia:\n                is_addr_complete=0\n\n        if u\'\xe5\x8e\xbf\'in spare_addr2:\n            addr3=spare_addr2[0:spare_addr2.find(u\'\xe5\x8e\xbf\')+1]\n            spare_addr3=spare_addr2[spare_addr2.find(u\'\xe5\x8e\xbf\')+1:]\n            rowcontent[header[6]]=addr3\n        elif (u\'\xe5\xb8\x82\'in spare_addr2)and (u\'\xe8\xb6\x85\xe5\xb8\x82\' not in spare_addr2)and (u\'\xe5\xb8\x82\xe5\x9c\xba\' not in spare_addr2):\n            addr3=spare_addr2[0:spare_addr2.find(u\'\xe5\xb8\x82\')+1]\n            spare_addr3=spare_addr2[spare_addr2.find(u\'\xe5\xb8\x82\')+1:]\n            rowcontent[header[6]]=addr3\n        elif (u\'\xe5\x8c\xba\'in spare_addr2):\n            addr3=spare_addr2[0:spare_addr2.find(u\'\xe5\x8c\xba\')+1]\n            spare_addr3=spare_addr2[spare_addr2.find(u\'\xe5\x8c\xba\')+1:]\n            rowcontent[header[6]]=addr3\n        else:\n            spare_addr3=spare_addr2\n            is_addr_complete=0\n\n        if is_addr_complete==0:\n            db.pampers_addr_lack.insert(**rowcontent)\n        else:\n            buf_list=db((db.history_order.province==ws1.cell(row=rows, column=5).value)&\\\n                        (db.history_order.city==ws1.cell(row=rows, column=6).value)&\\\n                        (db.history_order.county==ws1.cell(row=rows, column=7).value)).select\\\n                (db.history_order.mobile,db.history_order.address_bak,db.history_order.order_id,\n                 db.history_order.ex_id,db.history_order.user_name).as_list()\n            is_dup=0\n            for i in range(0,len(buf_list)):\n                if rowcontent[\'mobile\']==buf_list[i][\'mobile\']:\n                    is_dup=1\n                    rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x8f\xb7\xe7\xa0\x81\xe7\xac\xac\'+unicode(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                    rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                    rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                    rowcontent[\'dup_address\']=buf_list[i][\'address\']\n                    rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                    rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                    db.pampers_history_dup.insert(**rowcontent)\n                    break\n                elif Simhash(get_feature(buf_list[i][\'address\'])).distance(Simhash(get_feature(ws1.cell(row=rows,column=10).value)))<24:\n                    is_dup=1\n                    rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9c\xb0\xe5\x9d\x80\xe7\xac\xac\'+unicode(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                    rowcontent[\'dup_ID\']=buf_list[i][\'order_id\']\n                    rowcontent[\'dup_ex\']=buf_list[i][\'ex_id\']\n                    rowcontent[\'dup_address\']=buf_list[i][\'address\']\n                    rowcontent[\'dup_name\']=buf_list[i][\'user_name\']\n                    rowcontent[\'dup_phone\']=buf_list[i][\'mobile\']\n                    db.pampers_history_dup.insert(**rowcontent)\n                    break\n                else:continue\n            if is_dup==0:\n                if rowcontent[\'user_name\']== ws1.cell(row=rows-1, column=3).value:\n                    db.pampers_self_dup(**rowcontent)\n                else:\n                    if (rowcontent[\'county\'].endswith(u\'\xe5\x8e\xbf\'))or\\\n                    (rowcontent[\'county\']==u\'\xe6\xb8\x85\xe6\x96\xb0\xe5\x8c\xba\')or\\\n                    (rowcontent[\'county\']==u\'\xe4\xbc\x8a\xe5\xae\x81\xe5\xb8\x82\')or\\\n                    (rowcontent[\'county\']==u\'\xe4\xb8\x87\xe5\xb1\xb1\xe5\x8c\xba\')or\\\n                    (rowcontent[\'county\']==u\'\xe5\x85\xad\xe6\x9e\x9d\xe7\x89\xb9\xe5\x8c\xba\'):\n                        if((u\'\xe6\x9d\x91\'in rowcontent[\'address\'])and(u\'\xe4\xb9\xa1\xe6\x9d\x91\'not in rowcontent[\'address\']))or\\\n                        ((u\'\xe4\xb9\xa1\'in rowcontent[\'address\'])and(u\'\xe4\xb9\xa1\xe6\x9d\x91\'not in rowcontent[\'address\']))or\\\n                        ((u\'\xe9\x95\x87\'in rowcontent[\'address\'])and(u\'\xe5\xb0\x8f\xe9\x95\x87\'not in rowcontent[\'address\'])):\n                            rowcontent[\'class_city\']=\'village\'\n                        else:\n                            rowcontent[\'class_city\']=\'D\'\n                    elif (rowcontent[\'county\'].endswith(u\'\xe5\xb8\x82\'))and\\\n                        (rowcontent[\'county\']!=u\'\xe5\xb7\xa2\xe6\xb9\x96\xe5\xb8\x82\')and\\\n                        (rowcontent[\'county\']!=u\'\xe6\xaf\x95\xe8\x8a\x82\xe5\xb8\x82\'):\n                        rowcontent[\'class_city\']=\'C\'\n                    elif (rowcontent[\'city\'] in top4_city):\n                        rowcontent[\'class_city\']=\'Top4\'\n                    elif(rowcontent[\'city\'] in A_city):\n                        rowcontent[\'class_city\']=\'A\'\n                    else:\n                        rowcontent[\'class_city\']=\'B\'\n                    db.pampers_order.insert(**rowcontent)\n\ndef pampers_census():\n    row_content={}\n    row_content[\'tag\']=\'November\'\n    row_content[\'distribution\']=db(db.pampers_order.order_id >= 0).count()\n    row_content[\'Top4\']=db(db.pampers_order.class_city==\'Top4\').count()\n    row_content[\'A_city\']=db(db.pampers_order.class_city==\'A\').count()\n    row_content[\'B_city\']=db(db.pampers_order.class_city==\'B\').count()\n    row_content[\'C_city\']=db(db.pampers_order.class_city==\'C\').count()\n    row_content[\'D_city\']=db(db.pampers_order.class_city==\'D\').count()\n    row_content[\'village\']=db(db.pampers_order.class_city==\'village\').count()\n    db.pampers_result.insert(**row_content)\n    row_content={}\n    row_content[\'tag\']=\'percent\'\n    row_content[\'distribution\']=\'100%\'\n    row_content[\'Top4\']=float(db(db.pampers_order.class_city==\'Top4\').count())/db(db.pampers_order.order_id >= 0).count()\n    row_content[\'A_city\']=float(db(db.pampers_order.class_city==\'A\').count())/db(db.pampers_order.order_id >= 0).count()\n    row_content[\'B_city\']=float(db(db.pampers_order.class_city==\'B\').count())/db(db.pampers_order.order_id >= 0).count()\n    row_content[\'C_city\']=float(db(db.pampers_order.class_city==\'C\').count())/db(db.pampers_order.order_id >= 0).count()\n    row_content[\'D_city\']=float(db(db.pampers_order.class_city==\'D\').count())/db(db.pampers_order.order_id >= 0).count()\n    row_content[\'village\']=float(db(db.pampers_order.class_city==\'village\').count())/db(db.pampers_order.order_id >= 0).count()\n    db.pampers_result.insert(**row_content)\n\ndef add_PG(ws3):\n    product_dict={}\n    header=[\'SB_Internal_Member_ID\',\'Member_Account_ID\',\'Reward_ID\',\'Reward_Name\',\'Reward_Value\',\n        \'Reward_Points\',\'Reward_Internal_Cost\',\'Issue_Date\',\'Issue_Location\',\'Redeemed_Date\',\n        \'Redeemed_Location\',\'Cancel_Date\',\'Expiration_Date\',\'Reward_Barcode\',\'First_Name\',\'Last_Name\',\n        \'Address\',\'City\',\'trade_state\',\'ZipCode\',\'Email_Address\',\'Mobil_Phone\',\'IssuedFlag\',\'RedeemFlag\',\n        \'CanceledFlag\',\'REDEMPTION_STATUS\',\'DLVRYNBR_REJRSN\',\'DELIVERY_ADDRESS\']\n    for rows in range(1,ws3.max_row+1):\n        rowcontent={}\n        buf_list=[]\n        for cols in range(1,ws3.min_col+1):\n            rowcontent[header[cols-1]]=unicode(ws3.cell(row=rows,column=cols).value)\n        db.original_data.insert(**rowcontent)\n#product id detribute info\n    rows= db().select(db.original_data.Reward_Name,\n                db.original_data.Reward_Value,\n                db.original_data.Reward_Points,\n                db.original_data.Reward_Internal_Cost,\n                orderby=db.original_data.Reward_Name)\n    rows[0][\'product_id\']=1*100+37\n    product_id=1*100+37\n    product_dict[rows[0][\'Reward_Name\']]=rows[0][\'product_id\']\n    db.product_info.insert(**rows[0])\n    for i in range(1,len(rows)):\n        if (rows[i][\'Reward_Name\']!=rows[i-1][\'Reward_Name\'])or\\\n        (rows[i][\'Reward_Value\']!=rows[i-1][\'Reward_Value\'])or\\\n        (rows[i][\'Reward_Points\']!=rows[i-1][\'Reward_Points\'])or\\\n        (rows[i][\'Reward_Internal_Cost\']!=rows[i-1][\'Reward_Internal_Cost\']):\n            rows[i][\'product_id\']=product_id+100\n            product_id=rows[i][\'product_id\']\n            product_dict[rows[i][\'Reward_Name\']]=rows[i][\'product_id\']\n            db.product_info.insert(**rows[i])\n        else:pass\n#user id detribute info\n    user_row={}\n    users_address=[]\n    address_buf={}\n    users= db(db.original_data.DELIVERY_ADDRESS !=None).select\\\n            (db.original_data.SB_Internal_Member_ID,\n             db.original_data.Member_Account_ID,\n             db.original_data.DELIVERY_ADDRESS,\n             db.original_data.Reward_Name,\n             orderby=db.original_data.DELIVERY_ADDRESS)\n    users_address=((users[0][\'DELIVERY_ADDRESS\']).decode(\'utf8\')).split(";")\n    user_row[\'user_name\']=users_address[0]\n    address_buf[\'user_name\']=users_address[0]\n    user_row[\'address\']=users_address[1]\n    address_buf[\'address\']=users_address[1]\n    user_row[\'phone_num\']=users_address[2]\n    address_buf[\'phone_num\']=users_address[2]\n    user_row[\'city\']=users_address[3]\n    user_row[\'province\']=users_address[4]\n    user_row[\'zip_code\']=users_address[5]\n    user_row[\'Country\']=users_address[6]\n    user_row[\'SB_Internal_Member_ID\']=unicode(users[0][\'SB_Internal_Member_ID\'])\n    user_row[\'Member_Account_ID\']=unicode(users[0][\'Member_Account_ID\'])\n    user_row[\'user_id\']=1*100+79\n    user_id=1*100+79\n    db.user_info.insert(**user_row)\n\n    for i in range(1,len(users)):\n        users_address=((users[i][\'DELIVERY_ADDRESS\']).decode(\'utf8\')).split(";")\n        if len(users_address)==7:\n            user_row[\'user_name\']=users_address[0]\n            user_row[\'address\']=users_address[1]\n            user_row[\'phone_num\']=users_address[2]\n            user_row[\'city\']=users_address[3]\n            user_row[\'province\']=users_address[4]\n            user_row[\'zip_code\']=users_address[5]\n            user_row[\'Country\']=users_address[6]\n            user_row[\'SB_Internal_Member_ID\']=unicode(users[0][\'SB_Internal_Member_ID\'])\n            user_row[\'Member_Account_ID\']=unicode(users[0][\'Member_Account_ID\'])\n            w1=(user_row[\'phone_num\']==address_buf[\'phone_num\'])\n            w2=(Simhash(get_feature(user_row[\'address\'])).distance(Simhash(get_feature(address_buf[\'address\'])))<5)\n            w3=(user_row[\'user_name\']==address_buf[\'user_name\'])\n            if (w1*0.5+w2*0.3+w3*0.2)<0.5:\n                user_row[\'user_id\']=user_id+100\n                user_id=user_row[\'user_id\']\n                db.user_info.insert(**user_row)\n                address_buf[\'phone_num\']=user_row[\'phone_num\']\n                address_buf[\'address\']=user_row[\'address\']\n                address_buf[\'user_name\']=user_row[\'user_name\']\n            else:pass\n#user2product\n    all_user=db().select(db.user_info.ALL)\n    for each in range(0,len(all_user)):\n        u2p_row={}\n        u2p_row[\'product_id\']=[]\n        u2p_row[\'trials_count\']=[]\n        u2p_row[\'user_id\']=all_user[each][\'user_id\']\n        u2p_ship=db(int(all_user[each][\'Member_Account_ID\'])==db.original_data.Member_Account_ID).select\\\n                (db.original_data.Reward_Name)\n        all_product=[]\n        all_product.append(u2p_ship[0][\'Reward_Name\'])\n        if len(u2p_ship)>=2:\n            for j in range(1,len(u2p_ship)):\n                if u2p_ship[j][\'Reward_Name\'] != u2p_ship[j-1][\'Reward_Name\']:\n                    all_product.append(u2p_ship[j][\'Reward_Name\'])\n        for k in range(0,len(all_product)):\n            (u2p_row[\'product_id\']).append(all_product[k])\n            each_product_count=all_product.count(all_product[k])\n            (u2p_row[\'trials_count\']).append(int(each_product_count))\n        db.user2product.insert(**u2p_row)\n        del all_product\n        del u2p_ship\n        u2p_row.clear()\ndef display_u2p():\n    grid = SQLFORM.grid(db.user2product)\n    return locals()\n\ndef add_babybox_BBS_CD(ws4):\n    field_list=[\'order_id\',\'trade_order\',\'trade_id\',\'ex_id\',\'product_order\',\'barcode\',\n                    \'username\',\'cellphone\',\'province\',\'city\',\'county\',\'address\',\'reserve1\',\n                    \'product_name\',\'data_date\',\'channel\',\'moon\',\'reserve2\',\'product\',\'product_size\',\n                    \'product_brand\',\'store_size\',\'product_quantity\',\'store_name\',\n                    \'receive_province\',\'receive_city\',\'receive_county\',\'receive_address\']\n    header_BBS=[]\n    header_FSCD=[]\n    SameOneHouse_phonenum=[]\n    town5times_phonenum=[]\n    village3times_phonenum=[]\n    AddressBlur_phonenum=[]\n    cor=[]\n    incor=[]\n    table_header={}\n    for cols in range(1,ws4.min_col+1):\n        table_header[field_list[cols-1]]=ws4.cell(row=1,column=cols).value\n    for rows in range(2,ws4.max_row+1):\n        rowcontent={}\n        for cols in range(1,ws4.min_col+1):\n            rowcontent[field_list[cols-1]]=ws4.cell(row=rows,column=cols).value\n        address=rowcontent[\'address\']\n        if address.endswith(u\'\xe5\xb8\x82\')or address.endswith(u\'\xe5\x8e\xbf\')or\\\n        address.endswith(u\'\xe9\x95\x87\')or address.endswith(u\'\xe5\xb7\xa5\xe4\xb8\x9a\xe5\x8c\xba\')or address.endswith(u\'\xe5\xb7\xa5\xe4\xb8\x9a\xe5\x9b\xad\xe5\x8c\xba\')or\\\n        address.endswith(u\'\xe5\x85\xac\xe5\x9b\xad\')or address.endswith(u\'\xe7\xae\xa1\xe7\x90\x86\xe5\x8c\xba\')or address.endswith(u\'\xe5\xbc\x80\xe5\x8f\x91\xe5\x8c\xba\')or\\\n        address.endswith(u\'\xe6\x96\xb0\xe5\x8c\xba\')or address.endswith(u\'\xe7\x90\x83\xe5\x9c\xba\')or address.endswith(u\'\xe5\x81\x9c\xe8\xbd\xa6\xe5\x9c\xba\')or\\\n        address.endswith(u\'\xe7\xaf\xae\xe7\x90\x83\xe5\x9c\xba\')or address.endswith(u\'\xe5\xa4\xa7\xe9\x81\x93\')or address.endswith(u\'\xe5\x9b\xbd\xe9\x81\x93\')or\\\n        address.endswith(u\'\xe9\x81\x93\')or address.endswith(u\'\xe8\xb7\xaf\')or address.endswith(u\'\xe6\xa1\xa5\')or\\\n        address.endswith(u\'\xe8\xb7\xaf\xe5\x8f\xa3\')or address.endswith(u\'\xe8\xa1\x97\xe4\xb8\x8a\')or address.endswith(u\'\xe8\xa1\x97\')or\\\n        address.endswith(u\'\xe9\x97\xa8\xe5\x8f\xa3\')or address.endswith(u\'\xe5\xb8\x82\xe5\x9c\xba\')or address.endswith(u\'\xe5\x85\xac\xe4\xba\xa4\xe7\xab\x99\')or\\\n        address.endswith(u\'\xe8\xbd\xa6\xe7\xab\x99\')or address.endswith(u\'\xe5\x8a\xa0\xe6\xb2\xb9\xe7\xab\x99\')or address.endswith(u\'\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\x99\')or\\\n        address.endswith(u\'\xe8\x87\xaa\xe5\x8f\x96\')or address.endswith(u\'\xe4\xba\xa4\xe5\x8f\x89\xe5\x8f\xa3\')or address.endswith(u\'\xe4\xb8\x89\xe5\xb2\x94\xe5\x8f\xa3\')or\\\n        address.endswith(u\'\xe6\xa1\xa5\xe5\xa4\xb4\')or address.endswith(u\'\xe9\x99\x84\xe8\xbf\x91\')or address.endswith(u\'\xe5\xbf\xab\xe9\x80\x92\')or\\\n        address.endswith(u\'\xe7\x89\xa9\xe6\xb5\x81\')or address.endswith(u\'\xe8\x87\xaa\xe5\x8f\x96\')or address.endswith(u\'\xe4\xba\xa4\xe5\x8f\xa3\'):\n            incor.append(rowcontent[\'cellphone\'])\n        elif address.endswith(u\'\xe5\x8f\xb7\xe6\xa5\xbc\') or address.endswith(u\'\xe6\xa0\x8b\')or\\\n        address.endswith(u\'\xe5\xb9\xa2\') or address.endswith(u\'\xe5\xba\xa7\'):\n            SameOneHouse_phonenum.append(rowcontent[\'cellphone\'])\n        elif address.endswith(u\'\xe5\xb0\x8f\xe5\x8c\xba\')or address.endswith(u\'\xe6\xa0\xa1\xe5\x8c\xba\')or\\\n        address.endswith(u\'\xe5\xae\xbf\xe8\x88\x8d\')or address.endswith(u\'\xe5\x85\xac\xe5\xaf\x93\')or\\\n        address.endswith(u\'\xe6\x9c\x9f\')or address.endswith(u\'A\xe5\x8c\xba\')or\\\n        address.endswith(u\'B\xe5\x8c\xba\')or address.endswith(u\'C\xe5\x8c\xba\')or\\\n        address.endswith(u\'D\xe5\x8c\xba\')or address.endswith(u\'\xe4\xb8\x9c\xe5\x8c\xba\')or\\\n        address.endswith(u\'\xe8\xa5\xbf\xe5\x8c\xba\')or address.endswith(u\'\xe5\x8c\x97\xe5\x8c\xba\')or\\\n        address.endswith(u\'\xe5\x8d\x97\xe5\x8c\xba\'):\n            town5times_phonenum.append(rowcontent[\'cellphone\'])\n        elif address.endswith(u\'\xe4\xb9\xa1\')or address.endswith(u\'\xe6\x9d\x91\')or address.endswith(u\'\xe5\xba\x84\')or\\\n        address.endswith(u\'\xe8\x90\xa5\')or address.endswith(u\'\xe5\xaf\xa8\')or address.endswith(u\'\xe5\xb4\x96\')or\\\n        address.endswith(u\'\xe7\x9f\xbf\')or address.endswith(u\'\xe5\xb2\x97\')or address.endswith(u\'\xe6\xb2\x9f\')or\\\n        address.endswith(u\'\xe9\x9b\x86\')or address.endswith(u\'\xe6\xb9\xbe\')or address.endswith(u\'\xe5\xb0\x8f\xe5\xad\xa6\')or\\\n        address.endswith(u\'\xe4\xb8\xad\xe5\xad\xa6\')or  address.endswith(u\'\xe5\xa4\xa7\xe5\xad\xa6\')or address.endswith(u\'\xe5\x8e\x82\')or\\\n        address.endswith(u\'\xe8\xa1\x97\xe9\x81\x93\')or address.endswith(u\'\xe9\x87\x8c\')or address.endswith(u\'\xe5\xb7\xb7\')or\\\n        address.endswith(u\'\xe5\xbc\x84\')or address.endswith(u\'\xe7\xa4\xbe\xe5\x8c\xba\')or address.endswith(u\'\xe4\xb8\xad\xe5\xbf\x83\')or\\\n        address.endswith(u\'\xe5\x8a\x9e\xe4\xba\x8b\xe5\xa4\x84\')or address.endswith(u\'\xe6\x94\xbf\xe5\xba\x9c\xe5\x8d\x95\xe4\xbd\x8d\')or address.endswith(u\'\xe5\xb1\x80\')or\\\n        address.endswith(u\'\xe6\xb3\x95\xe9\x99\xa2\')or address.endswith(u\'\xe5\x8c\xbb\xe9\x99\xa2\')or address.endswith(u\'\xe5\xa4\xa7\xe5\x8e\xa6\')or\\\n        address.endswith(u\'\xe5\xb1\x85\xe5\xa7\x94\xe4\xbc\x9a\')or address.endswith(u\'\xe6\xb4\xbe\xe5\x87\xba\xe6\x89\x80\')or address.endswith(u\'\xe6\xb1\xbd\xe9\x85\x8d\xe5\x9f\x8e\')or\\\n        address.endswith(u\'\xe5\x95\x86\xe8\xb4\xb8\xe5\x9f\x8e\')or address.endswith(u\'\xe9\x80\x9f\xe9\x80\x92\xe6\x98\x93\')or address.endswith(u\'\xe9\x95\x87\xe9\x82\xae\xe5\xb1\x80\'):\n            village3times_phonenum.append(rowcontent[\'cellphone\'])\n        elif address.endswith(u\'\xe4\xbe\xa7\') or address.endswith(u\'\xe6\x97\x81\')or address.endswith(u\'\xe8\xbe\xb9\')or\\\n        address.endswith(u\'\xe9\x9a\x94\xe5\xa3\x81\')or address.endswith(u\'\xe9\x99\x84\xe8\xbf\x91\')or address.endswith(u\'\xe5\xaf\xb9\xe9\x9d\xa2\')or \\\n        address.endswith(u\'\xe6\xae\xb5\'):#or address.endswith(u\'\xe9\x97\xa8\xe5\x8f\xa3\') or address.endswith(u\'\xe5\x8f\xa3\') :\n            AddressBlur_phonenum.append(rowcontent[\'cellphone\'])\n        else:\n            cor.append(rowcontent[\'cellphone\'])\n\n    for rows in range(2,ws4.max_row+1):\n        rowcontent={}\n        correct_phonenum=SameOneHouse_phonenum + town5times_phonenum + \\\n                        village3times_phonenum + AddressBlur_phonenum\n        phonenum = ws4.cell(row=rows,column=8).value\n        for cols in range(1,ws4.min_col+1):\n            rowcontent[field_list[cols-1]]=ws4.cell(row=rows,column=cols).value\n        if phonenum in incor:\n            db.incorrect_BCB.insert(**rowcontent)\n        elif phonenum in cor:\n            db.correct_BCB.insert(**rowcontent)\n        elif phonenum in SameOneHouse_phonenum:\n            if SameOneHouse_phonenum.count(phonenum)>=2:\n                db.incorrect_BCB.insert(**rowcontent)\n            else:\n                db.correct_BCB.insert(**rowcontent)\n        elif phonenum in town5times_phonenum:\n            if (town5times_phonenum.count(phonenum)>5):\n                db.incorrect_BCB.insert(**rowcontent)\n            else:\n                db.correct_BCB.insert(**rowcontent)\n        elif phonenum in village3times_phonenum:\n            if village3times_phonenum.count(phonenum)>3:\n                db.incorrect_BCB.insert(**rowcontent)\n            else:\n                db.correct_BCB.insert(**rowcontent)\n        elif phonenum in AddressBlur_phonenum:\n            if AddressBlur_phonenum.count(phonenum)>=2:\n                db.incorrect_BCB.insert(**rowcontent)\n            else:\n                db.correct_BCB.insert(**rowcontent)\n        else:pass\n\ndef statistics(list1):\n    dict1={}\n    for i in range(0,len(list1)):\n        if  list1[i] in dict1.keys():\n            continue\n        else:\n            li=[]\n            li.append(i)\n            for j in range(i+1,len(list1)):\n                if list1[i] == list1[j]:\n                    li.append(j)\n        dict1[list1[i]]=li\n    return dict1\n\'\'\'\ndef statistics(addr):\n    dict1={}\n    for i in range(0,len(addr)):\n        if  addr[i] in dict1.keys():\n            continue\n        else:\n            li=[]\n            li.append(i)\n            for j in range(i+1,len(addr)):\n                if Simhash(get_features(u\'\'+addr[i])).distance(Simhash(get_features(u\'\'+addr[j])))<7:\n                    li.append(j)\n        dict1[addr[i]]=li\n    return dict1\n#address compare\n\naddress_dict={}\n    for num in single_place_collect:\n        if  ws4.cell(row=num,column=7).value in dict.keys():\n\'\'\'\ndef add_BBS_20151222(ws4):\n    field_list=[\'order_id\',\'ex_id\',\'shop_name\',\'telephone\',\'cellphone\',\'user_name\',\'address\',\n                \'province\',\'city\',\'county\',\'product_order\',\'barcode\',\'product_name\',\'product_size\',\n                \'store_name\',\'store_size\',\'product_quantity\']\n    black_name=[]\n    full_line=2\n    for rows in range(2,ws4.max_row+1):\n        if (ws4.cell(row=rows,column=8).value ==u\'-\'):\n            full_line=full_line+1\n        else:\n            break\n    #for rows in range(2,full_line):\n    phone_dict={}\n    for i in range(1,ws4.max_row+1):\n        if  ws4.cell(row=i,column=5).value in phone_dict.keys():\n            continue\n        else:\n            li=[]\n            li.append(i)\n            for j in range(i+1,ws4.min_col+1):\n                if ws4.cell(row=j,column=5).value == ws4.cell(row=i,column=5).value:\n                    li.append(j)\n        phone_dict[ws4.cell(row=i,column=5).value]=li\n#collect the duplicated phone_place\n    dup_place_collect=[]\n    weight_place_collect=[]\n    single_place_collect=[]\n    for phone_place in phone_dict.values():\n        if len(phone_place)>=3:\n            raise HTTP(404)\n        elif len(phone_place)>=2:\n            if Simhash(get_feature(ws4.cell(row=phone_place[0],column=7).value)).distance\\\n            (Simhash(get_feature(ws4.cell(row=phone_place[1],column=7).value)))<8:\n                dup_place_collect.extend(phone_place)\n            else:\n                weight_place_collect.extend(phone_place)\n        else:\n            pass\n    for i in range(1,ws4.max_row+1):\n        if i in (weight_place_collect+dup_place_collect):\n            continue\n        else:\n            single_place_collect.append(i)\n    precor_place_collect=[]\n    precor_place_collect.append(single_place_collect[0])\n    for i in single_place_collect[1:]:\n        address=ws4.cell(row=i,column=7).value\n        if address.endswith(u\'\xe5\xb8\x82\')or address.endswith(u\'\xe5\x8e\xbf\')or\\\n        address.endswith(u\'\xe9\x95\x87\')or address.endswith(u\'\xe5\xb7\xa5\xe4\xb8\x9a\xe5\x8c\xba\')or address.endswith(u\'\xe5\xb7\xa5\xe4\xb8\x9a\xe5\x9b\xad\xe5\x8c\xba\')or\\\n        address.endswith(u\'\xe5\x85\xac\xe5\x9b\xad\')or address.endswith(u\'\xe7\xae\xa1\xe7\x90\x86\xe5\x8c\xba\')or address.endswith(u\'\xe5\xbc\x80\xe5\x8f\x91\xe5\x8c\xba\')or\\\n        address.endswith(u\'\xe6\x96\xb0\xe5\x8c\xba\')or address.endswith(u\'\xe7\x90\x83\xe5\x9c\xba\')or address.endswith(u\'\xe5\x81\x9c\xe8\xbd\xa6\xe5\x9c\xba\')or\\\n        address.endswith(u\'\xe7\xaf\xae\xe7\x90\x83\xe5\x9c\xba\')or address.endswith(u\'\xe5\xa4\xa7\xe9\x81\x93\')or address.endswith(u\'\xe5\x9b\xbd\xe9\x81\x93\')or\\\n        address.endswith(u\'\xe9\x81\x93\')or address.endswith(u\'\xe8\xb7\xaf\')or address.endswith(u\'\xe6\xa1\xa5\')or\\\n        address.endswith(u\'\xe8\xb7\xaf\xe5\x8f\xa3\')or address.endswith(u\'\xe8\xa1\x97\xe4\xb8\x8a\')or address.endswith(u\'\xe8\xa1\x97\')or\\\n        address.endswith(u\'\xe9\x97\xa8\xe5\x8f\xa3\')or address.endswith(u\'\xe5\xb8\x82\xe5\x9c\xba\')or address.endswith(u\'\xe5\x85\xac\xe4\xba\xa4\xe7\xab\x99\')or\\\n        address.endswith(u\'\xe8\xbd\xa6\xe7\xab\x99\')or address.endswith(u\'\xe5\x8a\xa0\xe6\xb2\xb9\xe7\xab\x99\')or address.endswith(u\'\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\x99\')or\\\n        address.endswith(u\'\xe8\x87\xaa\xe5\x8f\x96\')or address.endswith(u\'\xe4\xba\xa4\xe5\x8f\x89\xe5\x8f\xa3\')or address.endswith(u\'\xe4\xb8\x89\xe5\xb2\x94\xe5\x8f\xa3\')or\\\n        address.endswith(u\'\xe6\xa1\xa5\xe5\xa4\xb4\')or address.endswith(u\'\xe9\x99\x84\xe8\xbf\x91\')or address.endswith(u\'\xe5\xbf\xab\xe9\x80\x92\')or\\\n        address.endswith(u\'\xe7\x89\xa9\xe6\xb5\x81\')or address.endswith(u\'\xe8\x87\xaa\xe5\x8f\x96\')or address.endswith(u\'\xe4\xba\xa4\xe5\x8f\xa3\'):\n            rowcontent={}\n            for cols in range(1,ws4.min_col+1):\n                rowcontent[field_list[cols-1]]=ws4.cell(row=i,column=cols).value\n            rowcontent[\'wrong_reason\']=u\'\xe5\x9c\xb0\xe5\x9d\x80\xe4\xb8\x8d\xe8\xaf\xa6\'\n            db.incorrect_BCB.insert(**rowcontent)\n        elif Simhash(get_feature(ws4.cell(row=i-1,column=7).value)).distance\\\n        (Simhash(get_feature(ws4.cell(row=i,column=7).value)))<8:\n            rowcontent={}\n            for cols in range(1,ws4.min_col+1):\n                rowcontent[field_list[cols-1]]=ws4.cell(row=i,column=cols).value\n            rowcontent[\'wrong_reason\']=u\'\xe5\xbd\x93\xe4\xbb\xbd\xe9\x87\x8d\xe5\xa4\x8d\'\n            db.incorrect_BCB.insert(**rowcontent)\n        else:\n            precor_place_collect.append(i)\n    for rows in (precor_place_collect+dup_place_collect):\n        rowcontent={}\n        for cols in range(1,ws4.min_col+1):\n            rowcontent[field_list[cols-1]]=ws4.cell(row=rows,column=cols).value\n        address=rowcontent[\'address\']+u\'\'\n        address=address.replace(u\'\xef\xbc\x8c\',\'\')\n        address=address.replace(u\'--\',u\'-\')\n        address=address.replace(u\'\xe2\x80\x9c\',\'\')\n        address=address.replace(u\'\xe2\x80\x9d\',\'\')\n        rowcontent[\'address\']=address\n        #rowcontent[\'address\']=(str(rowcontent[\'address\']).decode(\'UTF-8\')).replace(u\'\xef\xbc\x8c\',\'\')\n        #rowcontent[\'address\']=(str(rowcontent[\'address\']).decode(\'UTF-8\')).replace(u\'--\',u\'-\')\n        #rowcontent[\'address\']=(str(rowcontent[\'address\']).decode(\'UTF-8\')).replace(u\'\xe2\x80\x9c\',\'\')\n        #rowcontent[\'address\']=(str(rowcontent[\'address\']).decode(\'UTF-8\')).replace(u\'\xe2\x80\x9d\',\'\')\n        if u\'\xe8\xa1\x97\xe9\x81\x93\xe5\x8a\x9e\xe4\xba\x8b\xe5\xa4\x84\' in address[0:address.find(u\'\xe7\x9c\x81\')]:\n            rowcontent[\'address\']=str(rowcontent[\'address\']).replace(u\'\xe8\xa1\x97\xe9\x81\x93\xe5\x8a\x9e\xe4\xba\x8b\xe5\xa4\x84\',\'\')\n        buf_list=db((db.history_order.province==ws4.cell(row=rows, column=8).value)&\\\n                    (db.history_order.city==ws4.cell(row=rows, column=9).value)&\\\n                    (db.history_order.county==ws4.cell(row=rows, column=10).value)).select\\\n                (db.history_order.order_id,db.history_order.address_bak,db.history_order.mobile).as_list()\n        is_dup=0\n        for i in range(0,len(buf_list)):\n            if rowcontent[\'cellphone\']==buf_list[i][\'mobile\']:\n                is_dup=1\n                rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x8f\xb7\xe7\xa0\x81\xe7\xac\xac\'+unicode(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                db.incorrect_BCB.insert(**rowcontent)\n                break\n            elif Simhash(get_feature(str(buf_list[i][\'address_bak\']).decode(\'UTF-8\'))).distance(Simhash(get_feature(u\'\'+ws4.cell(row=rows,column=7).value)))<8:\n                is_dup=1\n                rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9c\xb0\xe5\x9d\x80\xe7\xac\xac\'+unicode(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                db.incorrect_BCB.insert(**rowcontent)\n                break\n            else:continue\n        if is_dup==0:\n            db.correct_BCB.insert(**rowcontent)\n\n    for rows in weight_place_collect:\n        rowcontent={}\n        for cols in range(1,ws4.min_col+1):\n            rowcontent[field_list[cols-1]]=ws4.cell(row=rows,column=cols).value\n        address=str(rowcontent[\'address\'])\n        address=address.replace(u\'\xef\xbc\x8c\',\'\')\n        address=address.replace(u\'--\',u\'-\')\n        address=address.replace(u\'\xe2\x80\x9c\',\'\')\n        address=address.replace(u\'\xe2\x80\x9d\',\'\')\n        rowcontent[\'address\']=address\n\n        if u\'\xe8\xa1\x97\xe9\x81\x93\xe5\x8a\x9e\xe4\xba\x8b\xe5\xa4\x84\' in address[0:address.find(u\'\xe7\x9c\x81\')]:\n            rowcontent[\'address\']=str(rowcontent[\'address\']).replace(u\'\xe8\xa1\x97\xe9\x81\x93\xe5\x8a\x9e\xe4\xba\x8b\xe5\xa4\x84\',\'\')\n        buf_list=db((db.history_order.province==ws4.cell(row=rows, column=8).value)&\\\n                    (db.history_order.city==ws4.cell(row=rows, column=9).value)&\\\n                    (db.history_order.county==ws4.cell(row=rows, column=10).value)).select\\\n                (db.history_order.order_id,db.history_order.address_bak,db.history_order.mobile).as_list()\n        is_dup=0\n        for i in range(0,len(buf_list)):\n            if rowcontent[\'cellphone\']==buf_list[i][\'mobile\']:\n                is_dup=1\n                rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x8f\xb7\xe7\xa0\x81\xe7\xac\xac\'+unicode(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                rowcontent[\'status1\']=u\'\xe7\x9d\x80\xe9\x87\x8d\xe7\x9c\x8b\'\n                db.incorrect_BCB.insert(**rowcontent)\n                break\n            elif Simhash(get_feature(str(buf_list[i][\'address_bak\']).decode(\'UTF-8\'))).distance(Simhash(get_feature(u\'\'+ws4.cell(row=rows,column=7).value)))<8:\n                is_dup=1\n                rowcontent[\'wrong_reason\']=u\'\xe4\xb8\x8e\xe5\x8e\x86\xe5\x8f\xb2\xe5\x9c\xb0\xe5\x9d\x80\xe7\xac\xac\'+unicode(buf_list[i][\'order_id\'])+u\'\xe6\x9d\xa1\xe9\x87\x8d\xe5\xa4\x8d\'\n                rowcontent[\'status1\']=u\'\xe7\x9d\x80\xe9\x87\x8d\xe7\x9c\x8b\'\n                db.incorrect_BCB.insert(**rowcontent)\n                break\n            else:continue\n        if is_dup==0:\n            db.correct_BCB.insert(**rowcontent)\n\n\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #response.flash = T("Hello World")\n    #return dict(message=T(\'Welcome to web2py!\'))\n    if request.vars.csvfile1 != None:\n        ws=import_excel(request.vars.csvfile1.file)\n        add_excel(ws)\n        response.flash = T(\'data uploaded\')\n    if request.vars.csvfile3 != None:\n        ws3=import_excel(request.vars.csvfile3.file)\n        add_PG(ws3)\n        response.flash = T(\'data uploaded\')\n    if request.vars.csvfile4 != None:\n        ws4=import_excel(request.vars.csvfile4.file)\n        add_BBS_20151222(ws4)\n        response.flash = T(\'data uploaded\')\n    if request.vars.csvfile2 != None:\n        ws1=import_excel(request.vars.csvfile2.file)\n        lice=[1516161,1520345,1518691,1542961,1551748,1541116,1516035,1520803,\n        1522679,1527299,1538111,1544564,1550749,1520841,1540979,1523641]\n        if db(db.pampers_order).isempty():\n            add_pampers(ws1)\n            response.flash = T(\'data uploaded\')\n        else:\n            count=0\n            for i in range(0,len(lice)):\n                if(ws1.cell(row=i,column=1).value==lice[i]):\n                    count=count+1\n            if count>11:\n                add_pampers(ws1)\n                response.flash = T(\'data uploaded\')\n            else:pass\n        pampers_census()\n    return dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nimport time\nimport hashlib\ndef MD5Sign(md5Str):\n    m=hashlib.md5()\n    m.update(md5Str)\n    return m.hexdigest().upper()\n#@auth.requires_login()\n@request.restful()\ndef TradeAdd():\n    response.view =\'generic.\'+request.extension  #return  json\n    def POST(tablename,**vars):\n        ret={}\n        content=[]\n        jsonObj={}\n        #if db(db.trade).isempty():\n        keys=[]\n        keys=vars.keys()\n        if (\'apiKey\' in keys)and(\'product_info\' in keys)and\\\n        (\'timestamp\' in keys)and(\'sig\' in keys) and\\\n        (\'out_tid\' in keys)and (\'shop_id\' in keys)and\\\n        (\'consignee\' in keys)and(\'address\' in keys)and\\\n        (\'postcode\' in keys)and(\'mobilPhone\' in keys)and\\\n        (\'order_date\' in keys)and\\\n        (\'barCode\' in vars[\'product_info\'][0].keys())and\\\n        (\'product_title\' in vars[\'product_info\'][0].keys())and \\\n        (\'standard\' in vars[\'product_info\'][0].keys())and\\\n        (\'out__tid\' in vars[\'product_info\'][0].keys()):\n            #ret=dict(db[tablename].validate_and_insert(**vars))\n            ts=int(time.time())\n            this_apiKey=0xec4238a0\n            this_apiSecret=0xec30a863\n            \'\'\'essencial_field=[str(vars[\'product_info\'][0][\'barCode\']),\n                             (vars[\'product_info\'][0][\'product_title\']),\n                             str(vars[\'product_info\'][0][\'standard\']),\n                             str(vars[\'product_info\'][0][\'out__tid\']),\n                 str(vars[\'apiKey\']),str(vars[\'apiSecret\']),\n                 str(vars[\'timestamp\']),str(vars[\'out_tid\']),\n                 (vars[\'address\']),str(vars[\'postcode\']),\n                 str(vars[\'mobilPhone\']),str(vars[\'shop_id\']),\n                 str(vars[\'order_date\']),(vars[\'consignee\'])]\n            essencial_field.sort()\'\'\'\n            essencial_field=vars.keys()\n            essencial_field.sort()\n            SigStr=""\n            for field in essencial_field:\n                if field =="sig" or field =="apiSecret":\n                    continue\n                elif field =="product_info":\n                    SigStr=SigStr+unicode(field)+u"="+u"["\n                    for d in vars["product_info"]:\n                        k=d.keys()\n                        k.sort()\n                        SigStr=SigStr+u"{"\n                        for j in k:\n                            SigStr=SigStr+unicode(j)+u"="+unicode(d[j])+u"&"\n                        SigStr=SigStr[0:len(SigStr)-1]\n                        SigStr=SigStr+u"}"\n                    SigStr=SigStr+u"]"+u"&"\n                else:\n                     SigStr=SigStr+unicode(field)+u"="+unicode(vars[field])+u"&"\n            this_sig=MD5Sign(SigStr[0:len(SigStr)-1].encode(\'utf8\'))\n            if  (int(vars[\'apiKey\'])==(this_apiKey)) and\\\n            (ts-int(vars[\'timestamp\'])<100) and\\\n            (vars[\'sig\']==this_sig):\n                content.append({\'is_success\':\'true\',\'response_Msg\':u\'\xe6\x88\x90\xe5\x8a\x9f\xe5\xaf\xbc\xe5\x85\xa5\xe7\xb3\xbb\xe7\xbb\x9f\'})\n            else:\n                content.append({\'sig\':(vars[\'sig\']),\'this_sig\':this_sig})\n        else:\n            if not (\'apiKey\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe6\x8e\xa5\xe5\x8f\xa3\xe5\xaf\x86\xe9\x92\xa5\xe5\x9c\xa8\xe8\xbd\xaf\xe4\xbb\xb6\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'apiKey\'})\n            if not (\'timestamp\' in keys):\n                content.append({\'is_success\':\'false\',\n                        \'response_Msg\':u\'\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\xe5\x9c\xa8\xe8\xbd\xaf\xe4\xbb\xb6\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                        \'field\':\'timestamp\'})\n            if not (\'sig\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe7\xad\xbe\xe5\x90\x8d\xe5\x9c\xa8\xe8\xbd\xaf\xe4\xbb\xb6\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'sig\'})\n            if not (\'out_tid\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe7\xad\xbe\xe5\x90\x8d\xe5\x9c\xa8\xe8\xbd\xaf\xe4\xbb\xb6\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'out_tid\'})\n            if not (\'shop_id\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe5\xba\x97\xe9\x93\xba\xe4\xbb\xa3\xe7\xa0\x81\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'shop_id\'})\n            if not (\'consignee\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe6\x94\xb6\xe8\xb4\xa7\xe4\xba\xba\xe5\xa7\x93\xe5\x90\x8d\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'consignee\'})\n            if not (\'address\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe6\x94\xb6\xe8\xb4\xa7\xe5\x9c\xb0\xe5\x9d\x80\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'address\'})\n            if not (\'postcode\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe9\x82\xae\xe6\x94\xbf\xe7\xbc\x96\xe7\xa0\x81\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'postcode\'})\n            if not (\'mobilPhone\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe6\x89\x8b\xe6\x9c\xba\xe5\x8f\xb7\xe7\xa0\x81\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'mobilPhone\'})\n            if not (\'order_date\' in keys):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe8\xae\xa2\xe8\xb4\xa7\xe6\x97\xa5\xe6\x9c\x9f\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'order_date\'})\n            if not (\'barCode\' in vars[\'product_info\'][0].keys()):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe4\xba\xa7\xe5\x93\x81\xe6\x9d\xa1\xe5\xbd\xa2\xe7\xa0\x81\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'barCode\'})\n            if not (\'product_title\' in vars[\'product_info\'][0].keys()):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe4\xba\xa7\xe5\x93\x81\xe5\x90\x8d\xe7\xa7\xb0\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'product_title\'})\n            if not (\'standard\' in vars[\'product_info\'][0].keys()):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe7\xbd\x91\xe5\xba\x97\xe8\xa7\x84\xe6\xa0\xbc\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'standard\'})\n            if not (\'out__tid\' in vars[\'product_info\'][0].keys()):\n                content.append({\'is_success\':\'false\',\n                                \'response_Msg\':u\'\xe5\xa4\x96\xe9\x83\xa8\xe5\xb9\xb3\xe5\x8f\xb0\xe5\x8d\x95\xe5\x8f\xb7\xe5\x9c\xa8\xe5\xad\x90\xe8\xa1\xa8\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\',\n                                \'field\':\'out__tid\'})\n#ret=dict(db[tablename].validate_and_insert(**vars))\n        jsonObj[\'item\']=content\n        return jsonObj\n            #else:raise HTTP(400)\n    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef TradeGet():\n    response.view =\'generic.\'+request.extension  #return  json\n    def GET(*args,**vars):\n        patterns=[\n            "/products[db_map]",\n            "/productid/{db_map.id}",\n            "/product_exid/{db_map.field_order}",\n            "/product/{custom_order.user_name.startswith}",\n            "/product/{custom_order.user_name}/:field",\n            "/trades[trade]",\n            "/tradeTid/{trade.tid}",\n            "/tradeOut/{trade.out_tid}"\n        ]\n        #patterns = \'auto\'\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    return locals()\n\n@request.restful()\ndef TradeUpdate():\n    response.view =\'generic.\'+request.extension  #return  json\n    def PUT(table_name,record_id,**vars):\n        return db(db[table_name].order_id==record_id).update(**vars)\n    return locals()\n\n@request.restful()\ndef TradeDelete():\n    response.view =\'generic.\'+request.extension  #return  json\n    def DELETE(table_name,record_id):\n        return db(db[table_name].order_id==record_id).delete()\n    return locals()\n\n\n\n\'\'\'else:\n samp_list=db().select(db.trade.mobilPhone,\ndb.trade.postcode,db.trade.consignee,db.trade.address).as_list()\nfor i in range(0,len(samp_list)):\nw1=(vars[\'mobilPhone\']==samp_list[i][\'mobilPhone\'])\nw2=(vars[\'postcode\']==samp_list[i][\'postcode\'])and \\\n    (Simhash(get_feature(vars[\'address\'])).distance(Simhash(get_feature(samp_phonenum[i][\'address\'])))<5)\n    w3=(vars[\'consignee\']==samp_list[i][\'consignee\'])\n    if (w1*0.5+w2*0.3+w3*0.2)>0.5:\n        ret=dict(db[tablename].validate_and_insert(**vars))\n    else:\n        ret["errors"]={"WrongReason":"duplication"}\'\'\'\n\nresponse._vars=response._caller(TradeAdd)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.KeyError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.KeyError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.KeyError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.KeyError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.KeyError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.KeyError object>'
p23
sS'args'
p24
S"('product_info',)"
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.KeyError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.KeyError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.KeyError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.KeyError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.KeyError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.KeyError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.KeyError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.KeyError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.KeyError object>'
p47
sS'__doc__'
p48
S"'Mapping key not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.KeyError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'product_info'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\x15C\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>trade</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>58.214.19.138</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>1011</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>application/pkcs7-mime; smime-type=enveloped-data; name=&quot;smime.p7m&quot;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">DOCUMENT_ROOT</td><td style="vertical-align:top;">:</td><td><div>/usr/share/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>Keep-Alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_DISPOSITION</td><td style="vertical-align:top;">:</td><td><div>attachment; filename=&quot;smime.p7m&quot;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>1011</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TRANSFER_ENCODING</td><td style="vertical-align:top;">:</td><td><div>base64</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>application/pkcs7-mime; smime-type=enveloped-data; name=&quot;smime.p7m&quot;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Apache-HttpClient/4.3.6 (java 1.5)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/pampers1/default/TradeAdd/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>58.214.19.138</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>58878</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_URI</td><td style="vertical-align:top;">:</td><td><div>/pampers1/default/TradeAdd/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">UWSGI_SCHEME</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/henry/prd_web2py/applications/admin/&#x27;, &#x27;/home/henry/prd_web2py/applications/pampers1/&#x27;, &#x27;/home/henry/prd_web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/henry/prd_web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div>1011</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div>application/pkcs7-mime; smime-type=enveloped-data; name=&quot;smime.p7m&quot;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">document_root</td><td style="vertical-align:top;">:</td><td><div>/usr/share/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/henry/prd_web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>Keep-Alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_disposition</td><td style="vertical-align:top;">:</td><td><div>attachment; filename=&quot;smime.p7m&quot;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_length</td><td style="vertical-align:top;">:</td><td><div>1011</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_transfer_encoding</td><td style="vertical-align:top;">:</td><td><div>base64</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_type</td><td style="vertical-align:top;">:</td><td><div>application/pkcs7-mime; smime-type=enveloped-data; name=&quot;smime.p7m&quot;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Apache-HttpClient/4.3.6 (java 1.5)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>TTdev</div></td></tr><tr><td><div>mx.taotonggroup.com</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>113.108.155.51</div></td></tr><tr><td><div>int.taotonggroup.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/pampers1/default/TradeAdd/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>58.214.19.138</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>58878</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/pampers1/default/TradeAdd/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>int.taotonggroup.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.node</td><td style="vertical-align:top;">:</td><td><div>TTdev</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.version</td><td style="vertical-align:top;">:</td><td><div>2.0.11.2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_node</td><td style="vertical-align:top;">:</td><td><div>TTdev</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_version</td><td style="vertical-align:top;">:</td><td><div>2.0.11.2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/henry/prd_web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.2-stable+timestamp.2015.12.18.11.00.46</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;wsgi_errors&#x27;, mode &#x27;w&#x27; at 0x7f5a48e4ddb0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f5a4889bd20&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;wsgi_errors&#x27;, mode &#x27;w&#x27; at 0x7f5a48e4ddb0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f5a4889bd20&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/henry/prd_web2py/applications/pampers1/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>TradeAdd</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/henry/prd_web2py/applications/admin/&#x27;, &#x27;/home/henry/prd_web2py/applications/pampers1/&#x27;, &#x27;/home/henry/prd_web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/henry/prd_web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/henry/prd_web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>TTdev</div></td></tr><tr><td><div>mx.taotonggroup.com</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>113.108.155.51</div></td></tr><tr><td><div>int.taotonggroup.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.13.2-stable+timestamp.2015.12.18.11.00.46</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 1, 4, 16, 10, 7, 699579)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/pampers1/default/TradeAdd/trade.json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 1, 4, 8, 10, 7, 699603)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7f5a45686850&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'/home/henry/prd_web2py/gluon/restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'A_city': (u'\\u5408\\u80a5\\u5e02', u'\\u798f\\u5dde\\u5e02', u'\\u5170\\u5dde\\u5e02', u'\\u6df1\\u5733\\u5e02', '\\xe5\\x8d\\x97\\xe5\\xae\\x81\\xe5\\xb8\\x82', u'\\u8d35\\u9633\\u5e02', u'\\u6d77\\u53e3\\u5e02', u'\\u77f3\\u5bb6\\u5e84\\u5e02', u'\\u90d1\\u5dde\\u5e02', u'\\u54c8\\u5c14\\u6ee8\\u5e02', u'\\u6b66\\u6c49\\u5e02', u'\\u957f\\u6c99\\u5e02', u'\\u5357\\u4eac\\u5e02', u'\\u5927\\u8fde\\u5e02', u'\\u6c88\\u9633\\u5e02', u'\\u547c\\u548c\\u6d69\\u7279\\u5e02', u'\\u94f6\\u5ddd\\u5e02', u'\\u897f\\u5b81\\u5e02', u'\\u6d4e\\u5357\\u5e02', u'\\u9752\\u5c9b\\u5e02', ...), 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0x7f5a44757cb0, file "/...ations/pampers1/controllers/default.py", line 11>'
p69
ssS'lnum'
p70
I227
sS'lines'
p71
(dp72
I224
S'            ccode = code'
p73
sI225
S'        else:'
p74
sI226
S'            ccode = compile2(code, layer)'
p75
sI227
S'        exec ccode in environment'
p76
sI228
S'    except HTTP:'
p77
sI229
S'        raise'
p78
sI230
S'    except RestrictedError:'
p79
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p80
sI222
S'    try:'
p81
sI223
S'        if isinstance(code, types.CodeType):'
p82
ssS'call'
p83
S'(code=\'# -*- coding: utf-8 -*-\\n# this file is released ..."}\\\'\\\'\\\'\\n\\nresponse._vars=response._caller(TradeAdd)\\n\', environment={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'ASSIGNJS\': <function ASSIGNJS>, \'A_city\': (u\'\\u5408\\u80a5\\u5e02\', u\'\\u798f\\u5dde\\u5e02\', u\'\\u5170\\u5dde\\u5e02\', u\'\\u6df1\\u5733\\u5e02\', \'\\xe5\\x8d\\x97\\xe5\\xae\\x81\\xe5\\xb8\\x82\', u\'\\u8d35\\u9633\\u5e02\', u\'\\u6d77\\u53e3\\u5e02\', u\'\\u77f3\\u5bb6\\u5e84\\u5e02\', u\'\\u90d1\\u5dde\\u5e02\', u\'\\u54c8\\u5c14\\u6ee8\\u5e02\', u\'\\u6b66\\u6c49\\u5e02\', u\'\\u957f\\u6c99\\u5e02\', u\'\\u5357\\u4eac\\u5e02\', u\'\\u5927\\u8fde\\u5e02\', u\'\\u6c88\\u9633\\u5e02\', u\'\\u547c\\u548c\\u6d69\\u7279\\u5e02\', u\'\\u94f6\\u5ddd\\u5e02\', u\'\\u897f\\u5b81\\u5e02\', u\'\\u6d4e\\u5357\\u5e02\', u\'\\u9752\\u5c9b\\u5e02\', ...), \'AppConfig\': <function AppConfig>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, layer=\'/home/henry/prd_web2py/applications/pampers1/controllers/default.py\')'
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'/home/henry/prd_web2py/applications/pampers1/controllers/default.py'
p88
sg64
(dp89
sg70
I1130
sg71
(dp90
I1120
S'for i in range(0,len(samp_list)):'
p91
sI1121
S"w1=(vars['mobilPhone']==samp_list[i]['mobilPhone'])"
p92
sI1122
S"w2=(vars['postcode']==samp_list[i]['postcode'])and \\"
p93
sI1123
S"    (Simhash(get_feature(vars['address'])).distance(Simhash(get_feature(samp_phonenum[i]['address'])))<5)"
p94
sI1124
S"    w3=(vars['consignee']==samp_list[i]['consignee'])"
p95
sI1125
S'    if (w1*0.5+w2*0.3+w3*0.2)>0.5:'
p96
sI1126
S'        ret=dict(db[tablename].validate_and_insert(**vars))'
p97
sI1127
S'    else:'
p98
sI1128
S'        ret["errors"]={"WrongReason":"duplication"}\'\'\''
p99
sI1119
S'db.trade.postcode,db.trade.consignee,db.trade.address).as_list()'
p100
ssg83
S'()'
p101
sg85
S'<module>'
p102
sa(dp103
g62
S'/home/henry/prd_web2py/gluon/globals.py'
p104
sg64
(dp105
S'self'
p106
S'undefined'
p107
sS'f'
S'<function TradeAdd>'
p108
ssg70
I412
sg71
(dp109
I416
S"        self.generic_patterns = ['*']"
p110
sI407
S"        self.flash = ''            # used by the default view layout"
p111
sI408
S'        self.meta = Storage()      # used by web2py_ajax.html'
p112
sI409
S'        self.menu = []             # used by the default view layout'
p113
sI410
S'        self.files = []            # used by web2py_ajax.html'
p114
sI411
S'        self._vars = None'
p115
sI412
S'        self._caller = lambda f: f()'
p116
sI413
S'        self._view_environment = None'
p117
sI414
S'        self._custom_commit = None'
p118
sI415
S'        self._custom_rollback = None'
p119
ssg83
S'(f=<function TradeAdd>)'
p120
sg85
S'<lambda>'
p121
sa(dp122
g62
S'/home/henry/prd_web2py/gluon/globals.py'
p123
sg64
(dp124
S'rest_action'
p125
S'<function POST>'
p126
sS'_self'
p127
S"<Storage {'_vars': <Storage {}>, 'function': 'Tr...'/home/henry/prd_web2py/applications/pampers1/'}>"
p128
sS'_self.args'
p129
S"['trade']"
p130
sS'builtingetattr'
p131
S'<built-in function getattr>'
p132
ssg70
I378
sg71
(dp133
I373
S'                rest_action = _action().get(method, None)'
p134
sI374
S'                if not (rest_action and method == method.upper()'
p135
sI375
S'                        and callable(rest_action)):'
p136
sI376
S'                    raise HTTP(405, "method not allowed")'
p137
sI377
S'                try:'
p138
sI378
S"                    return rest_action(*_self.args, **getattr(_self, 'vars', {}))"
p139
sI379
S'                except TypeError, e:'
p140
sI380
S'                    exc_type, exc_value, exc_traceback = sys.exc_info()'
p141
sI381
S'                    if len(traceback.extract_tb(exc_traceback)) == 1:'
p142
sI382
S'                        raise HTTP(400, "invalid arguments")'
p143
ssg83
S"(_action=<function TradeAdd>, _self=<Storage {'_vars': <Storage {}>, 'function': 'Tr...'/home/henry/prd_web2py/applications/pampers1/'}>, *a=(), **b={})"
p144
sg85
S'f'
sa(dp145
g62
S'/home/henry/prd_web2py/applications/pampers1/controllers/default.py'
p146
sg64
(dp147
S'vars'
p148
g45
sS'].keys'
p149
S'<built-in method keys of dict object>'
p150
ssg70
I1056
sg71
(dp151
I1056
S"            if not ('barCode' in vars['product_info'][0].keys()):"
p152
sI1057
S"                content.append({'is_success':'false',"
p153
sI1058
S"                                'response_Msg':u'\xe4\xba\xa7\xe5\x93\x81\xe6\x9d\xa1\xe5\xbd\xa2\xe7\xa0\x81\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8',"
p154
sI1059
S"                                'field':'barCode'})"
p155
sI1060
S"            if not ('product_title' in vars['product_info'][0].keys()):"
p156
sI1051
S"                                'field':'mobilPhone'})"
p157
sI1052
S"            if not ('order_date' in keys):"
p158
sI1053
S"                content.append({'is_success':'false',"
p159
sI1054
S"                                'response_Msg':u'\xe8\xae\xa2\xe8\xb4\xa7\xe6\x97\xa5\xe6\x9c\x9f\xe5\x9c\xa8\xe8\xa1\xa8\xe5\x8d\x95\xe4\xb8\xad\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8',"
p160
sI1055
S"                                'field':'order_date'})"
p161
ssg83
S"(tablename='trade', **vars={})"
p162
sg85
S'POST'
p163
sasS'pyver'
p164
S'Python 2.7.6: /usr/local/bin/uwsgi (prefix: /usr)'
p165
sS'session'
p166
g57
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp167
sS'etype'
p168
S"<type 'exceptions.KeyError'>"
p169
sS'date'
p170
S'Mon Jan  4 16:10:07 2016'
p171
sS'response'
p172
g57
(S's\xe7>\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7f5a4551d068&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_pampers1</td><td style="vertical-align:top;">:</td><td><div>58.214.19.138-476014f6-8062-4b36-ba7e-c8fd9cf3c1c6<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">Content-Type</td><td style="vertical-align:top;">:</td><td><div>application/json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/pampers1/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>My Sites</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/site</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>This App</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Design</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/design/pampers1</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Controller</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/controllers/default.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>View</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/views/default/TradeAdd.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>DB Model</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/models/db.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Menu Model</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/models/menu.py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Config.ini</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/private/appconfig.ini</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Layout</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/views/layout.html</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Stylesheet</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/pampers1/static/css/web2py-bootstrap3.css</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Database</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/pampers1/appadmin/index</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Errors</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/errors/pampers1</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>About</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/about/pampers1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>web2py.com</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Download</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/download</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Support</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/support</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Demo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/demo_admin</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Quick Examples</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/examples/default/examples</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>FAQ</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/AlterEgo</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Videos</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/videos/</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Free Applications</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/appliances</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2py.com/plugins</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://web2pyslices.com/</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Documentation</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>#</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Online book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book</div></td></tr></table></div></td></tr><tr><td><div><li class="divider"></li></div></td></tr><tr><td><div><table><tr><td><div>Preface</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/00</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Introduction</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/01</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Python</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/02</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Overview</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/03</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>The Core</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/04</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>The Views</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/05</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Database</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/06</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Forms and Validators</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/07</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Email and SMS</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/08</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Access Control</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/09</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Services</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/10</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Ajax Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/11</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Components and Plugins</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/12</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Deployment Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/13</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Other Recipes</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/14</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Helping web2py</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/book/default/chapter/15</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Buy web2py\'s book</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://stores.lulu.com/web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Community</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>None</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Groups</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://www.web2py.com/examples/default/usergroups</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Twitter</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://twitter.com/web2py</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Live Chat</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://webchat.freenode.net/?channels=web2py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/TradeAdd/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>58.214.19.138</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/henry/prd_web2py/applications/pampers1/sessions/58.214.19.138-476014f6-8062-4b36-ba7e-c8fd9cf3c1c6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>c0762cbf4baf7f9af97c051e7fcb8083</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>58.214.19.138-476014f6-8062-4b36-ba7e-c8fd9cf3c1c6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Pampers1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>generic.json</div></td></tr></table></div>'
tRp173
sS'locals'
p174
(dp175
S'jsonObj'
p176
g45
sS'vars'
p177
g45
sS'keys'
p178
S'[]'
p179
sS'tablename'
p180
S"'trade'"
p181
sS'ret'
p182
g45
sS'content'
p183
S"[{'field': 'apiKey', 'is_success': 'false', 'response_Msg': u'\\u63a5\\u53e3\\u5bc6\\u94a5\\u5728\\u8f6f\\u4ef6\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'timestamp', 'is_success': 'false', 'response_Msg': u'\\u65f6\\u95f4\\u6233\\u5728\\u8f6f\\u4ef6\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'sig', 'is_success': 'false', 'response_Msg': u'\\u7b7e\\u540d\\u5728\\u8f6f\\u4ef6\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'out_tid', 'is_success': 'false', 'response_Msg': u'\\u7b7e\\u540d\\u5728\\u8f6f\\u4ef6\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'shop_id', 'is_success': 'false', 'response_Msg': u'\\u5e97\\u94fa\\u4ee3\\u7801\\u5728\\u8868\\u5355\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'consignee', 'is_success': 'false', 'response_Msg': u'\\u6536\\u8d27\\u4eba\\u59d3\\u540d\\u5728\\u8868\\u5355\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'address', 'is_success': 'false', 'response_Msg': u'\\u6536\\u8d27\\u5730\\u5740\\u5728\\u8868\\u5355\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'postcode', 'is_success': 'false', 'response_Msg': u'\\u90ae\\u653f\\u7f16\\u7801\\u5728\\u8868\\u5355\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'mobilPhone', 'is_success': 'false', 'response_Msg': u'\\u624b\\u673a\\u53f7\\u7801\\u5728\\u8868\\u5355\\u4e2d\\u4e0d\\u5b58\\u5728'}, {'field': 'order_date', 'is_success': 'false', 'response_Msg': u'\\u8ba2\\u8d27\\u65e5\\u671f\\u5728\\u8868\\u5355\\u4e2d\\u4e0d\\u5b58\\u5728'}]"
p184
sssS'traceback'
p185
S'Traceback (most recent call last):\n  File "/home/henry/prd_web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/henry/prd_web2py/applications/pampers1/controllers/default.py", line 1130, in <module>\n  File "/home/henry/prd_web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/henry/prd_web2py/gluon/globals.py", line 378, in f\n    return rest_action(*_self.args, **getattr(_self, \'vars\', {}))\n  File "/home/henry/prd_web2py/applications/pampers1/controllers/default.py", line 1056, in POST\n    if not (\'barCode\' in vars[\'product_info\'][0].keys()):\nKeyError: \'product_info\'\n'
p186
s.